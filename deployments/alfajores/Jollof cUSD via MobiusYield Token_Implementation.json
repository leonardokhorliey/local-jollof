{
  "address": "0x3B732193098C5df5FD47667D19Abf90b8040EcEe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "DividendWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weiAmount",
          "type": "uint256"
        }
      ],
      "name": "DividendsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DIVIDEND_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METADATA_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "accumulativeDividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "deployWrapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "wrapperAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployWrapperOnMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distributeDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "dividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dividendTokenDataList",
      "outputs": [
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dividendTokenDataListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dividendTokenToDataID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "dividendTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_wrapperTemplate",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_deployWrapperOnMint",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_baseName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        }
      ],
      "name": "registerDividendToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setBaseName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newValue",
          "type": "string"
        }
      ],
      "name": "setBaseSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "setDeployWrapperOnMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIDToWrapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "totalSupplyBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "totalSupplies",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        }
      ],
      "name": "withdrawDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawDividendFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "dividendToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "withdrawnDividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperTemplate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrapperTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4763735f613c5fac2d91fca31f3dc22ea03341443892a89bdd068aef6f429052",
  "receipt": {
    "to": null,
    "from": "0x2B0bf86E5b94341fa5Ab205C00b981c8719f1b44",
    "contractAddress": "0x3B732193098C5df5FD47667D19Abf90b8040EcEe",
    "transactionIndex": 0,
    "gasUsed": "4299307",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1334e0d4062385e9e2784b49af41bcc7f164f9acc28cbf7f9af529085e55cab9",
    "transactionHash": "0x4763735f613c5fac2d91fca31f3dc22ea03341443892a89bdd068aef6f429052",
    "logs": [],
    "blockNumber": 13558459,
    "cumulativeGasUsed": "4299307",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6828678cf7019b5d316d664003754973",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIVIDEND_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"deployWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployWrapperOnMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"dividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dividendTokenDataList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTokenDataListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dividendTokenToDataID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"dividendTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_wrapperTemplate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_deployWrapperOnMint\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_baseName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"}],\"name\":\"registerDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setBaseName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"setBaseSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setDeployWrapperOnMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDToWrapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"totalSupplyBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"totalSupplies\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"}],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawDividendFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dividendToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperTemplate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapperTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accumulativeDividendOf(uint256,address,address)\":{\"details\":\"accumulativeDividendOf(_owner) = _withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner) = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\",\"params\":{\"_owner\":\"The address of a token holder.\",\"dividendToken\":\"The token the dividend is in\",\"tokenID\":\"The token's ID.\"},\"returns\":{\"_0\":\"The amount of dividend in wei that `_owner` has earned in total.\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"deployWrapper(uint256)\":{\"details\":\"If a wrapper already exists for this tokenID, does nothing and returns the address of the existing wrapper.\",\"params\":{\"tokenID\":\"The ID of the token to wrap\"},\"returns\":{\"wrapperAddress\":\"The address of the wrapper\"}},\"dividendOf(uint256,address,address)\":{\"params\":{\"_owner\":\"The address of a token holder.\",\"dividendToken\":\"The token the dividend is in\",\"tokenID\":\"The token's ID.\"},\"returns\":{\"_0\":\"The amount of dividend in wei that `_owner` can withdraw.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"withdrawnDividendOf(uint256,address,address)\":{\"params\":{\"_owner\":\"The address of a token holder.\",\"dividendToken\":\"The token the dividend is in\",\"tokenID\":\"The token's ID.\"},\"returns\":{\"_0\":\"The amount of dividend in wei that `_owner` has withdrawn.\"}},\"wrapperTransfer(address,address,uint256,uint256)\":{\"details\":\"Only callable by a wrapper deployed by this contract.\",\"params\":{\"amount\":\"The amount to transfer\",\"from\":\"Source of transfer\",\"to\":\"Target of transfer\",\"tokenID\":\"The ERC-1155 token ID of the wrapper\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accumulativeDividendOf(uint256,address,address)\":{\"notice\":\"View the amount of dividend in wei that an address has earned in total.\"},\"deployWrapper(uint256)\":{\"notice\":\"Deploys an ERC20Wrapper contract for the ERC-1155 tokens with ID `tokenID`.\"},\"dividendOf(uint256,address,address)\":{\"notice\":\"View the amount of dividend in wei that an address can withdraw.\"},\"dividendTokenDataList(uint256)\":{\"notice\":\"The list of tokens that can be distributed to token holders as dividend. 1-indexed.\"},\"dividendTokenToDataID(address)\":{\"notice\":\"The dividend token address to its key in {dividendTokenDataList}\"},\"setDeployWrapperOnMint(bool)\":{\"notice\":\"Param setters (need metadata role)\"},\"withdrawnDividendOf(uint256,address,address)\":{\"notice\":\"View the amount of dividend in wei that an address has withdrawn.\"},\"wrapperTransfer(address,address,uint256,uint256)\":{\"notice\":\"Called by an ERC20Wrapper contract to handle a transfer call.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/FundingMultitoken.sol\":\"FundingMultitoken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xf4059b28b9d7c342804d33b16ea30c65ca6afd560e426b44ca727a0343c04c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdf3a49167ee6c6ba60205aa5eefe29d3ff340b73d7326733eb53f440371b717e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x946f08c0a132c5877d458d7af7956da60607f20a5c03dd75760708c848aae6b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xb92541cd02568981bc3dac94060d542ab3231d8f30ade82aeba0588761c1b649\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/libs/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {ERC1155Upgradeable} from \\\"./ERC1155Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n    @notice An extension of ERC1155 that provides access-controlled minting and burning,\\n            as well as a total supply getter for each token ID.\\n */\\nabstract contract ERC1155Base is ERC1155Upgradeable, AccessControlUpgradeable {\\n    bytes32 public constant MINTER_BURNER_ROLE =\\n        keccak256(\\\"MINTER_BURNER_ROLE\\\");\\n    bytes32 public constant METADATA_ROLE = keccak256(\\\"METADATA_ROLE\\\");\\n    bytes internal constant NULL_BYTES = bytes(\\\"\\\");\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    function __ERC1155Base_init(address admin, string memory uri)\\n        internal\\n        initializer\\n    {\\n        __ERC1155_init(uri);\\n        __ERC1155Base_init_unchained(admin);\\n    }\\n\\n    function __ERC1155Base_init_unchained(address admin) internal initializer {\\n        // admin is granted metadata role and minter-burner role\\n        // metadata role is managed by itself\\n        // minter-burner role is managed by itself\\n        _setupRole(METADATA_ROLE, admin);\\n        _setupRole(MINTER_BURNER_ROLE, admin);\\n        _setRoleAdmin(METADATA_ROLE, METADATA_ROLE);\\n        _setRoleAdmin(MINTER_BURNER_ROLE, MINTER_BURNER_ROLE);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to mint\\\"\\n        );\\n\\n        _mint(to, id, amount, NULL_BYTES);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to mint\\\"\\n        );\\n\\n        _mintBatch(to, ids, amounts, NULL_BYTES);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to burn\\\"\\n        );\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to burn\\\"\\n        );\\n\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    function setURI(string calldata newuri) external {\\n        require(\\n            hasRole(METADATA_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have metadata role to set URI\\\"\\n        );\\n\\n        _setURI(newuri);\\n    }\\n\\n    function totalSupply(uint256 id) public view returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    function totalSupplyBatch(uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory totalSupplies)\\n    {\\n        totalSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            totalSupplies[i] = _totalSupply[ids[i]];\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        } else if (to == address(0)) {\\n            // Burn\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe6b789d74e1c93e03232f95264fcfdcf61a7d3934cca90a09a1b703fc119cc5c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/ERC1155DividendToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {\\n    SafeCastUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\nimport {ERC1155Base} from \\\"./ERC1155Base.sol\\\";\\n\\n/**\\n    @notice An extension of ERC1155Base that allows distributing dividends to all holders\\n            of an token ID. Also supports multiple dividend tokens.\\n */\\nabstract contract ERC1155DividendToken is ERC1155Base {\\n    using SafeERC20 for IERC20;\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n\\n    struct DividendTokenData {\\n        address dividendToken;\\n        mapping(uint256 => uint256) magnifiedDividendPerShare;\\n        // About dividendCorrection:\\n        // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n        //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n        // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n        //   `dividendOf(_user)` should not be changed,\\n        //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n        // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n        //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n        //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n        //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n        // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n        mapping(uint256 => mapping(address => int256)) magnifiedDividendCorrections;\\n        mapping(uint256 => mapping(address => uint256)) withdrawnDividends;\\n    }\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    /**\\n        @notice The list of tokens that can be distributed to token holders as dividend. 1-indexed.\\n     */\\n    mapping(uint256 => DividendTokenData) public dividendTokenDataList;\\n    uint256 public dividendTokenDataListLength;\\n    /**\\n        @notice The dividend token address to its key in {dividendTokenDataList}\\n     */\\n    mapping(address => uint256) public dividendTokenToDataID;\\n\\n    /// @dev This event MUST emit when target is distributed to token holders.\\n    /// @param from The address which sends target to this contract.\\n    /// @param weiAmount The amount of distributed target in wei.\\n    event DividendsDistributed(\\n        uint256 indexed tokenID,\\n        address indexed from,\\n        address indexed dividendToken,\\n        uint256 weiAmount\\n    );\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws target from this contract.\\n    /// @param weiAmount The amount of withdrawn target in wei.\\n    event DividendWithdrawn(\\n        uint256 indexed tokenID,\\n        address indexed to,\\n        address indexed dividendToken,\\n        uint256 weiAmount\\n    );\\n\\n    function __ERC1155DividendToken_init(\\n        address[] memory dividendTokens,\\n        address admin,\\n        string memory uri\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __ERC1155DividendToken_init_unchained(dividendTokens);\\n    }\\n\\n    function __ERC1155DividendToken_init_unchained(\\n        address[] memory dividendTokens\\n    ) internal initializer {\\n        dividendTokenDataListLength = dividendTokens.length;\\n        for (uint256 i = 0; i < dividendTokens.length; i++) {\\n            dividendTokenDataList[i + 1].dividendToken = dividendTokens[i];\\n            dividendTokenToDataID[dividendTokens[i]] = i + 1;\\n        }\\n    }\\n\\n    /**\\n        Public getters\\n     */\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        return _withdrawableDividendOf(tokenID, dividendToken, _owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return data.withdrawnDividends[tokenID][_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = _withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return\\n            ((data.magnifiedDividendPerShare[tokenID] *\\n                balanceOf(_owner, tokenID))\\n                .toInt256() +\\n                data.magnifiedDividendCorrections[tokenID][_owner])\\n                .toUint256() / magnitude;\\n    }\\n\\n    /**\\n        Internal functions\\n     */\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function _withdrawableDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) internal view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return\\n            accumulativeDividendOf(tokenID, dividendToken, _owner) -\\n            data.withdrawnDividends[tokenID][_owner];\\n    }\\n\\n    /// @notice Distributes target to token holders as dividends.\\n    /// @dev It reverts if the total supply of tokens is 0.\\n    /// It emits the `DividendsDistributed` event if the amount of received target is greater than 0.\\n    /// About undistributed target tokens:\\n    ///   In each distribution, there is a small amount of target not distributed,\\n    ///     the magnified amount of which is\\n    ///     `(amount * magnitude) % totalSupply()`.\\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\\n    ///     (de-magnified) in a distribution can be less than 1 wei.\\n    ///   We can actually keep track of the undistributed target in a distribution\\n    ///     and try to distribute it in the next distribution,\\n    ///     but keeping track of such data on-chain costs much more than\\n    ///     the saved target, so we don't do that.\\n    function _distributeDividends(\\n        uint256 tokenID,\\n        address dividendToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 tokenTotalSupply = totalSupply(tokenID);\\n        require(tokenTotalSupply > 0);\\n        require(amount > 0);\\n\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        require(\\n            dividendTokenDataID != 0,\\n            \\\"ERC1155DividendToken: invalid dividendToken\\\"\\n        );\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n\\n        data.magnifiedDividendPerShare[tokenID] +=\\n            (amount * magnitude) /\\n            tokenTotalSupply;\\n\\n        IERC20(dividendToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        emit DividendsDistributed(tokenID, msg.sender, dividendToken, amount);\\n    }\\n\\n    /// @notice Withdraws the target distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn target is greater than 0.\\n    function _withdrawDividend(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address user\\n    ) internal {\\n        uint256 _withdrawableDividend =\\n            _withdrawableDividendOf(tokenID, dividendToken, user);\\n        if (_withdrawableDividend > 0) {\\n            uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n            require(\\n                dividendTokenDataID != 0,\\n                \\\"ERC1155DividendToken: invalid dividendToken\\\"\\n            );\\n            DividendTokenData storage data =\\n                dividendTokenDataList[dividendTokenDataID];\\n            data.withdrawnDividends[tokenID][user] += _withdrawableDividend;\\n            emit DividendWithdrawn(\\n                tokenID,\\n                user,\\n                dividendToken,\\n                _withdrawableDividend\\n            );\\n            IERC20(dividendToken).safeTransfer(user, _withdrawableDividend);\\n        }\\n    }\\n\\n    function _registerDividendToken(address dividendToken)\\n        internal\\n        returns (uint256 newDividendTokenDataID)\\n    {\\n        require(\\n            dividendTokenToDataID[dividendToken] == 0,\\n            \\\"ERC1155DividendToken: already registered\\\"\\n        );\\n        dividendTokenDataListLength++;\\n        newDividendTokenDataID = dividendTokenDataListLength;\\n        dividendTokenDataList[newDividendTokenDataID]\\n            .dividendToken = dividendToken;\\n        dividendTokenToDataID[dividendToken] = newDividendTokenDataID;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Base) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        to\\n                    ] -= (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                        amount)\\n                        .toInt256();\\n                }\\n            }\\n        } else if (to == address(0)) {\\n            // Burn\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        from\\n                    ] += (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                        amount)\\n                        .toInt256();\\n                }\\n            }\\n        } else {\\n            // Transfer\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    int256 _magCorrection =\\n                        (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                            amount)\\n                            .toInt256();\\n                    // Retain the rewards\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        from\\n                    ] += _magCorrection;\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        to\\n                    ] -= _magCorrection;\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x4a719bc153c69f2696da21be8f9e35e5d34c6c8d44c00b570e21facbc3e9345b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {\\n    IERC1155Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {\\n    IERC1155ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport {\\n    IERC1155MetadataURIUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {\\n    ERC165Upgradeable,\\n    IERC165Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            _msgSender() != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(\\n            accountBalance >= amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(\\n                accountBalance >= amount,\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n        @dev Override this to return true to skip checking to.onERC1155Received during\\n             single transfers.\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address, /*operator*/\\n        address, /*from*/\\n        address, /*to*/\\n        uint256, /*id*/\\n        uint256, /*amount*/\\n        bytes memory /*data*/\\n    ) internal virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (\\n            to.isContract() &&\\n            !_shouldSkipSafeTransferAcceptanceCheck(\\n                operator,\\n                from,\\n                to,\\n                id,\\n                amount,\\n                data\\n            )\\n        ) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable(to)\\n                        .onERC1155BatchReceived\\n                        .selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xe6f712f761f40635980cd74959b76cd21ed9c9af3c04d3836e5545a6965ab117\",\"license\":\"MIT\"},\"contracts/libs/ERC20Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {WrappedERC1155Token} from \\\"./WrappedERC1155Token.sol\\\";\\n\\n/**\\n    @notice An ERC-20 wrapper for a particular tokenID of an ERC-1155 token\\n */\\ncontract ERC20Wrapper is Initializable, IERC20 {\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    WrappedERC1155Token public parentMultitoken;\\n    uint256 public tokenID;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    function initialize(\\n        address _parentMultitoken,\\n        uint256 _tokenID,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external virtual initializer {\\n        parentMultitoken = WrappedERC1155Token(_parentMultitoken);\\n        tokenID = _tokenID;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return parentMultitoken.totalSupply(tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return parentMultitoken.balanceOf(account, tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20Wrapper: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20Wrapper: decreased allowance below zero\\\"\\n        );\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n        @dev Only callable by the parentMultitoken. Emits a transfer event when the parent token\\n             is transferred.\\n     */\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(\\n            msg.sender == address(parentMultitoken),\\n            \\\"ERC20Wrapper: not parent\\\"\\n        );\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        parentMultitoken.wrapperTransfer(sender, recipient, tokenID, amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(\\n            owner != address(0),\\n            \\\"ERC20Wrapper: approve from the zero address\\\"\\n        );\\n        require(\\n            spender != address(0),\\n            \\\"ERC20Wrapper: approve to the zero address\\\"\\n        );\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x7a1e2fcaef72e6752747477cc3c53d047a6ca9304d6732b72e760c69cf8c6733\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n        @dev Modified from openzeppelin. Instead of reverting when the allowance is non-zero,\\n        we first set the allowance to 0 and then call approve(spender, currentAllowance + value).\\n        This provides support for non-standard tokens such as USDT that revert in this scenario. \\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 currentAllowance = token.allowance(address(this), spender);\\n        if (currentAllowance > 0) {\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, 0)\\n            );\\n        }\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                currentAllowance + value\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91d0d84914826f19d5c8b841cb366d93b1b1051a873323aa73970edf4e9b8c6b\",\"license\":\"MIT\"},\"contracts/libs/WrappedERC1155Token.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {\\n    ClonesUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport {\\n    StringsUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"./ERC1155Upgradeable.sol\\\";\\nimport {ERC1155Base} from \\\"./ERC1155Base.sol\\\";\\nimport {ERC20Wrapper} from \\\"./ERC20Wrapper.sol\\\";\\n\\n/**\\n    @notice An ERC-1155 multitoken where each ID is wrapped in an ERC-20 interface\\n */\\nabstract contract WrappedERC1155Token is ERC1155Base {\\n    using ClonesUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    mapping(uint256 => address) public tokenIDToWrapper;\\n    address public wrapperTemplate;\\n    bool public deployWrapperOnMint;\\n    string public baseName;\\n    string public baseSymbol;\\n    uint8 public decimals;\\n\\n    function __WrappedERC1155Token_init(\\n        address admin,\\n        string memory uri,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __WrappedERC1155Token_init_unchained(\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n    }\\n\\n    function __WrappedERC1155Token_init_unchained(\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        wrapperTemplate = _wrapperTemplate;\\n        deployWrapperOnMint = _deployWrapperOnMint;\\n        baseName = _baseName;\\n        baseSymbol = _baseSymbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n        @notice Called by an ERC20Wrapper contract to handle a transfer call.\\n        @dev Only callable by a wrapper deployed by this contract.\\n        @param from Source of transfer\\n        @param to Target of transfer\\n        @param tokenID The ERC-1155 token ID of the wrapper\\n        @param amount The amount to transfer\\n     */\\n    function wrapperTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        uint256 amount\\n    ) external {\\n        require(\\n            msg.sender == tokenIDToWrapper[tokenID],\\n            \\\"WrappedERC1155Token: not wrapper\\\"\\n        );\\n        _safeTransferFrom(from, to, tokenID, amount, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n        @notice Deploys an ERC20Wrapper contract for the ERC-1155 tokens with ID `tokenID`.\\n        @dev If a wrapper already exists for this tokenID, does nothing and returns the address\\n             of the existing wrapper.\\n        @param tokenID The ID of the token to wrap\\n        @return wrapperAddress The address of the wrapper\\n     */\\n    function deployWrapper(uint256 tokenID)\\n        external\\n        returns (address wrapperAddress)\\n    {\\n        return _deployWrapper(tokenID);\\n    }\\n\\n    /**\\n        @dev See {deployWrapper}\\n     */\\n    function _deployWrapper(uint256 tokenID)\\n        internal\\n        returns (address wrapperAddress)\\n    {\\n        wrapperAddress = tokenIDToWrapper[tokenID];\\n        if (wrapperAddress == address(0)) {\\n            // deploy wrapper\\n            ERC20Wrapper wrapper = ERC20Wrapper(wrapperTemplate.clone());\\n            string memory tokenIDString = tokenID.toString();\\n            string memory name =\\n                string(abi.encodePacked(baseName, tokenIDString));\\n            string memory symbol =\\n                string(abi.encodePacked(baseSymbol, tokenIDString));\\n            wrapper.initialize(address(this), tokenID, name, symbol, decimals);\\n            tokenIDToWrapper[tokenID] = address(wrapper);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            if (deployWrapperOnMint) {\\n                for (uint256 i = 0; i < ids.length; i++) {\\n                    _deployWrapper(ids[i]);\\n                }\\n            }\\n        }\\n\\n        // Emit transfer event in wrapper\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            address wrapperAddress = tokenIDToWrapper[ids[i]];\\n            if (wrapperAddress != address(0)) {\\n                ERC20Wrapper wrapper = ERC20Wrapper(wrapperAddress);\\n                wrapper.emitTransferEvent(from, to, amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @dev See {ERC1155Upgradeable._shouldSkipSafeTransferAcceptanceCheck}\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address operator,\\n        address, /*from*/\\n        address, /*to*/\\n        uint256 id,\\n        uint256, /*amount*/\\n        bytes memory /*data*/\\n    ) internal virtual override(ERC1155Upgradeable) returns (bool) {\\n        address wrapperAddress = tokenIDToWrapper[id];\\n        if (wrapperAddress != address(0)) {\\n            // has wrapper, check if operator is the wrapper\\n            return operator == wrapperAddress;\\n        } else {\\n            // no wrapper, should do safety checks\\n            return false;\\n        }\\n    }\\n\\n    /**\\n        Param setters (need metadata role)\\n     */\\n    function setDeployWrapperOnMint(bool newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        deployWrapperOnMint = newValue;\\n    }\\n\\n    function setBaseName(string calldata newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        baseName = newValue;\\n    }\\n\\n    function setBaseSymbol(string calldata newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        baseSymbol = newValue;\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x479d3d384f212c301d3c4a0ca640ce2a597d1400c871c7cb0baa4ffe35308098\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/FundingMultitoken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.4;\\n\\nimport {ERC1155Upgradeable} from \\\"../libs/ERC1155Upgradeable.sol\\\";\\nimport {ERC1155DividendToken} from \\\"../libs/ERC1155DividendToken.sol\\\";\\nimport {WrappedERC1155Token} from \\\"../libs/WrappedERC1155Token.sol\\\";\\n\\ncontract FundingMultitoken is ERC1155DividendToken, WrappedERC1155Token {\\n    bytes32 public constant DIVIDEND_ROLE = keccak256(\\\"DIVIDEND_ROLE\\\");\\n\\n    function __FundingMultitoken_init(\\n        address admin,\\n        string calldata uri,\\n        address[] memory dividendTokens,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __ERC1155DividendToken_init_unchained(dividendTokens);\\n        __WrappedERC1155Token_init_unchained(\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n        __FundingMultitoken_init_unchained(admin);\\n    }\\n\\n    function __FundingMultitoken_init_unchained(address admin)\\n        internal\\n        initializer\\n    {\\n        // DIVIDEND_ROLE is managed by itself\\n        _setupRole(DIVIDEND_ROLE, admin);\\n        _setRoleAdmin(DIVIDEND_ROLE, DIVIDEND_ROLE);\\n    }\\n\\n    function initialize(\\n        address admin,\\n        string calldata uri,\\n        address[] calldata dividendTokens,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) external virtual initializer {\\n        __FundingMultitoken_init(\\n            admin,\\n            uri,\\n            dividendTokens,\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n    }\\n\\n    function distributeDividends(\\n        uint256 tokenID,\\n        address dividendToken,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _distributeDividends(tokenID, dividendToken, amount);\\n    }\\n\\n    function withdrawDividend(uint256 tokenID, address dividendToken) external {\\n        _withdrawDividend(tokenID, dividendToken, msg.sender);\\n    }\\n\\n    function withdrawDividendFor(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address user\\n    ) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _withdrawDividend(tokenID, dividendToken, user);\\n    }\\n\\n    function registerDividendToken(address dividendToken) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _registerDividendToken(dividendToken);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155DividendToken, WrappedERC1155Token) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n        @dev See {ERC1155Upgradeable._shouldSkipSafeTransferAcceptanceCheck}\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n        override(ERC1155Upgradeable, WrappedERC1155Token)\\n        returns (bool)\\n    {\\n        return\\n            WrappedERC1155Token._shouldSkipSafeTransferAcceptanceCheck(\\n                operator,\\n                from,\\n                to,\\n                id,\\n                amount,\\n                data\\n            );\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf09205173ddd85889b845e935e7cceede3bbea96645ade75dc7feafd99f87e10\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614ccf806100206000396000f3fe608060405234801561001057600080fd5b50600436106102895760003560e01c806377954ac21161015c578063b7b424e8116100ce578063e0507fac11610087578063e0507fac1461061d578063e985e9c514610630578063f242432a1461066c578063f3491f2b1461067f578063f4a1400214610694578063f5298aca146106a757600080fd5b8063b7b424e81461059c578063bd85b039146105af578063c8262c6c146105cf578063d2eb949b146105e4578063d547741f146105f7578063d81d0a151461060a57600080fd5b806391d148541161012057806391d14854146105345780639285a1e11461054757806398f192e31461055a578063a217fddf1461056e578063a22cb46514610576578063a4ed80511461058957600080fd5b806377954ac2146104dd5780637f9678b2146104f057806380583be714610510578063814d05f01461051857806381d792ef1461052b57600080fd5b80632f2ff15d116102005780634e1273f4116101b95780634e1273f41461044657806358b37b9b14610466578063590b07ec1461047957806366300d73146104a25780636b20c454146104b557806372c32860146104c857600080fd5b80632f2ff15d14610396578063313ce567146103a95780633627fda8146103c957806336568abe146103dc57806338841782146103ef57806348ab4f4b1461040457600080fd5b80631503063311610252578063150306331461031f578063156e29f6146103275780631b2121aa1461033a578063248a9ca31461034d5780632578f786146103705780632eb2c2d61461038357600080fd5b8062fdd58e1461028e57806301ffc9a7146102b457806302b171e2146102d757806302fe5305146102ea5780630e89341c146102ff575b600080fd5b6102a161029c366004614008565b6106ba565b6040519081526020015b60405180910390f35b6102c76102c23660046141de565b610753565b60405190151581526020016102ab565b6102a16102e5366004614249565b610764565b6102fd6102f8366004614216565b61077b565b005b61031261030d3660046141a4565b61083a565b6040516102ab9190614590565b6103126108ce565b6102fd610335366004614031565b61095d565b6102fd610348366004614216565b6109b1565b6102a161035b3660046141a4565b60009081526097602052604090206001015490565b6102fd61037e36600461416c565b6109f2565b6102fd610391366004613d15565b610a45565b6102fd6103a43660046141bc565b610adc565b610131546103b79060ff1681565b60405160ff90911681526020016102ab565b6102fd6103d73660046141bc565b610b02565b6102fd6103ea3660046141bc565b610b0d565b6102a1600080516020614c5a83398151915281565b61042e6104123660046141a4565b61012d602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016102ab565b610459610454366004614063565b610b87565b6040516102ab9190614558565b61042e6104743660046141a4565b610ce8565b61042e6104873660046141a4565b60fb602052600090815260409020546001600160a01b031681565b6102a16104b0366004614249565b610cf3565b6102fd6104c3366004613e5d565b610d52565b6102a1600080516020614c7a83398151915281565b6104596104eb36600461412d565b610df4565b6102a16104fe366004613cc9565b60fd6020526000908152604090205481565b610312610ed1565b6102fd610526366004614249565b610edf565b6102a160fc5481565b6102c76105423660046141bc565b610f1e565b6102fd610555366004613dba565b610f49565b61012e5461042e906001600160a01b031681565b6102a1600081565b6102fd610584366004613eda565b610fd2565b6102fd610597366004613cc9565b6110a9565b6102fd6105aa366004614284565b6110e6565b6102a16105bd3660046141a4565b600090815260c9602052604090205490565b6102a1600080516020614c3a83398151915281565b6102fd6105f2366004614216565b611125565b6102fd6106053660046141bc565b611166565b6102fd610618366004613e5d565b61118c565b6102fd61062b366004613f10565b61123c565b6102c761063e366004613ce3565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102fd61067a366004613dfb565b6112f8565b61012e546102c790600160a01b900460ff1681565b6102a16106a2366004614249565b61137f565b6102fd6106b5366004614031565b611431565b60006001600160a01b03831661072b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b600061075e82611470565b92915050565b6000610771848484611495565b90505b9392505050565b610793600080516020614c5a83398151915233610f1e565b6107f75760405162461bcd60e51b815260206004820152602f60248201527f45524331313535426173653a206d7573742068617665206d657461646174612060448201526e726f6c6520746f207365742055524960881b6064820152608401610722565b61083682828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150292505050565b5050565b60606067805461084990614a9c565b80601f016020809104026020016040519081016040528092919081815260200182805461087590614a9c565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b50505050509050919050565b61012f80546108dc90614a9c565b80601f016020809104026020016040519081016040528092919081815260200182805461090890614a9c565b80156109555780601f1061092a57610100808354040283529160200191610955565b820191906000526020600020905b81548152906001019060200180831161093857829003601f168201915b505050505081565b610975600080516020614c7a83398151915233610f1e565b6109915760405162461bcd60e51b8152600401610722906146c4565b6109ac83838360405180602001604052806000815250611515565b505050565b6109c9600080516020614c5a83398151915233610f1e565b6109e55760405162461bcd60e51b81526004016107229061490f565b6109ac61012f8383613a23565b610a0a600080516020614c5a83398151915233610f1e565b610a265760405162461bcd60e51b81526004016107229061490f565b61012e8054911515600160a01b0260ff60a01b19909216919091179055565b6001600160a01b038516331480610a615750610a61853361063e565b610ac85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610722565b610ad585858585856115ed565b5050505050565b600082815260976020526040902060010154610af88133611801565b6109ac8383611865565b6108368282336118eb565b6001600160a01b0381163314610b7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610722565b61083682826119de565b60608151835114610bec5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610722565b600083516001600160401b03811115610c1557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c3e578160200160208202803683370190505b50905060005b8451811015610ce057610ca5858281518110610c7057634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610c9857634e487b7160e01b600052603260045260246000fd5b60200260200101516106ba565b828281518110610cc557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610cd981614b03565b9050610c44565b509392505050565b600061075e82611a45565b6001600160a01b038216600090815260fd602052604081205480610d1b576000915050610774565b600090815260fb6020908152604080832087845260030182528083206001600160a01b038616845290915290205490509392505050565b610d6a600080516020614c7a83398151915233610f1e565b610d865760405162461bcd60e51b815260040161072290614835565b610ad58585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250611b8092505050565b6060816001600160401b03811115610e1c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e45578160200160208202803683370190505b50905060005b82811015610eca5760c96000858584818110610e7757634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054828281518110610ead57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610ec281614b03565b915050610e4b565b5092915050565b61013080546108dc90614a9c565b610ef7600080516020614c3a83398151915233610f1e565b610f135760405162461bcd60e51b81526004016107229061467a565b6109ac8383836118eb565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815261012d60205260409020546001600160a01b03163314610fb05760405162461bcd60e51b815260206004820181905260248201527f5772617070656445524331313535546f6b656e3a206e6f7420777261707065726044820152606401610722565b610fcc8484848460405180602001604052806000815250611d3a565b50505050565b336001600160a01b038316141561103d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610722565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110c1600080516020614c3a83398151915233610f1e565b6110dd5760405162461bcd60e51b81526004016107229061467a565b61083681611e64565b6110fe600080516020614c3a83398151915233610f1e565b61111a5760405162461bcd60e51b81526004016107229061467a565b6109ac838383611f33565b61113d600080516020614c5a83398151915233610f1e565b6111595760405162461bcd60e51b81526004016107229061490f565b6109ac6101308383613a23565b6000828152609760205260409020600101546111828133611801565b6109ac83836119de565b6111a4600080516020614c7a83398151915233610f1e565b6111c05760405162461bcd60e51b8152600401610722906146c4565b610ad58585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250612047915050565b600054610100900460ff1680611255575060005460ff16155b6112715760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015611293576000805461ffff19166101011790555b6112d98b8b8b8b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a6121be565b80156112eb576000805461ff00191690555b5050505050505050505050565b6001600160a01b0385163314806113145750611314853361063e565b6113725760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610722565b610ad58585858585611d3a565b6001600160a01b038216600090815260fd6020526040812054806113a7576000915050610774565b600081815260fb602090815260408083208884526002810183528184206001600160a01b038816855290925290912054600160801b9061141d9061140e6113ee888b6106ba565b60008b815260018701602052604090205461140991906149e4565b612292565b6114189190614977565b612300565b61142791906149d0565b9695505050505050565b611449600080516020614c7a83398151915233610f1e565b6114655760405162461bcd60e51b815260040161072290614835565b6109ac838383612352565b60006001600160e01b03198216637965db0b60e01b148061075e575061075e8261245f565b6001600160a01b038216600090815260fd6020526040812054806114bd576000915050610774565b600081815260fb602090815260408083208884526003810183528184206001600160a01b0388168552909252909120546114f887878761137f565b6114279190614a42565b8051610836906067906020840190613aa3565b6001600160a01b03841661153b5760405162461bcd60e51b8152600401610722906148ce565b3361155b8160008761154c886124af565b611555886124af565b87612508565b60008481526065602090815260408083206001600160a01b03891684529091528120805485929061158d9084906149b8565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ad581600087878787612516565b815183511461160e5760405162461bcd60e51b815260040161072290614886565b6001600160a01b0384166116345760405162461bcd60e51b815260040161072290614715565b33611643818787878787612508565b60005b845181101561179357600085828151811061167157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061169d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156116ee5760405162461bcd60e51b8152600401610722906147eb565b6116f88282614a42565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461177891906149b8565b925050819055505050508061178c90614b03565b9050611646565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e392919061456b565b60405180910390a46117f981878787878761269a565b505050505050565b61180b8282610f1e565b61083657611823816001600160a01b03166014612764565b61182e836020612764565b60405160200161183f9291906143fc565b60408051601f198184030181529082905262461bcd60e51b825261072291600401614590565b61186f8282610f1e565b6108365760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006118f8848484611495565b90508015610fcc576001600160a01b038316600090815260fd6020526040902054806119365760405162461bcd60e51b8152600401610722906145eb565b600081815260fb602090815260408083208884526003810183528184206001600160a01b038816855290925282208054919285926119759084906149b8565b92505081905550846001600160a01b0316846001600160a01b0316877f56f5c15e9cca112839303eda856edf8986e092fc839520408e38e9e662b8d27e866040516119c291815260200190565b60405180910390a46117f96001600160a01b0386168585612945565b6119e88282610f1e565b156108365760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815261012d60205260409020546001600160a01b031680611b7b5761012e54600090611a7c906001600160a01b03166129a8565b90506000611a8984612a40565b9050600061012f82604051602001611aa2929190614356565b6040516020818303038152906040529050600061013083604051602001611aca929190614356565b60408051601f19818403018152908290526101315463be88368d60e01b83529092506001600160a01b0386169163be88368d91611b179130918b918891889160ff90911690600401614509565b600060405180830381600087803b158015611b3157600080fd5b505af1158015611b45573d6000803e3d6000fd5b505050600087815261012d6020526040902080546001600160a01b0319166001600160a01b039690961695909517909455505050505b919050565b6001600160a01b038316611ba65760405162461bcd60e51b8152600401610722906147a8565b8051825114611bc75760405162461bcd60e51b815260040161072290614886565b6000339050611bea81856000868660405180602001604052806000815250612508565b60005b8351811015611cdb576000848281518110611c1857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611c4457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611c955760405162461bcd60e51b815260040161072290614636565b611c9f8282614a42565b60009384526065602090815260408086206001600160a01b038c1687529091529093209290925550819050611cd381614b03565b915050611bed565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d2c92919061456b565b60405180910390a450505050565b6001600160a01b038416611d605760405162461bcd60e51b815260040161072290614715565b33611d7081878761154c886124af565b60008481526065602090815260408083206001600160a01b038a16845290915290205483811015611db35760405162461bcd60e51b8152600401610722906147eb565b611dbd8482614a42565b60008681526065602090815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290611dfb9084906149b8565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e5b828888888888612516565b50505050505050565b6001600160a01b038116600090815260fd602052604081205415611edb5760405162461bcd60e51b815260206004820152602860248201527f455243313135354469766964656e64546f6b656e3a20616c726561647920726560448201526719da5cdd195c995960c21b6064820152608401610722565b60fc8054906000611eeb83614b03565b909155505060fc54600081815260fb6020908152604080832080546001600160a01b039097166001600160a01b03199097168717905594825260fd9052929092208290555090565b600083815260c9602052604090205480611f4c57600080fd5b60008211611f5957600080fd5b6001600160a01b038316600090815260fd602052604090205480611f8f5760405162461bcd60e51b8152600401610722906145eb565b600081815260fb6020526040902082611fac600160801b866149e4565b611fb691906149d0565b600087815260018301602052604081208054909190611fd69084906149b8565b90915550611ff190506001600160a01b038616333087612b61565b846001600160a01b0316336001600160a01b0316877f8e19c486d7cf157228582812303b4763c49b90104252be0a955a3efb25f46ada8760405161203791815260200190565b60405180910390a4505050505050565b6001600160a01b03841661206d5760405162461bcd60e51b8152600401610722906148ce565b815183511461208e5760405162461bcd60e51b815260040161072290614886565b3361209e81600087878787612508565b60005b8451811015612156578381815181106120ca57634e487b7160e01b600052603260045260246000fd5b6020026020010151606560008784815181106120f657634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461213e91906149b8565b9091555081905061214e81614b03565b9150506120a1565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516121a792919061456b565b60405180910390a4610ad58160008787878761269a565b600054610100900460ff16806121d7575060005460ff16155b6121f35760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612215576000805461ffff19166101011790555b6122558a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b9992505050565b61225e87612c18565b61226b8686868686612d6b565b6122748a612e3d565b8015612286576000805461ff00191690555b50505050505050505050565b60006001600160ff1b038211156122fc5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610722565b5090565b6000808212156122fc5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610722565b6001600160a01b0383166123785760405162461bcd60e51b8152600401610722906147a8565b336123a781856000612389876124af565b612392876124af565b60405180602001604052806000815250612508565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156123ea5760405162461bcd60e51b815260040161072290614636565b6123f48382614a42565b60008581526065602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b148061249057506001600160e01b031982166303a24d0760e21b145b8061075e57506301ffc9a760e01b6001600160e01b031983161461075e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124f757634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6117f9868686868686612ed9565b6001600160a01b0384163b1515801561253a5750612538868686868686613075565b155b156117f95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061257390899089908890889088906004016144cf565b602060405180830381600087803b15801561258d57600080fd5b505af19250505080156125bd575060408051601f3d908101601f191682019092526125ba918101906141fa565b60015b61266a576125c9614b74565b806308c379a0141561260357506125de614b8c565b806125e95750612605565b8060405162461bcd60e51b81526004016107229190614590565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610722565b6001600160e01b0319811663f23a6e6160e01b14611e5b5760405162461bcd60e51b8152600401610722906145a3565b6001600160a01b0384163b156117f95760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126de9089908990889088908890600401614471565b602060405180830381600087803b1580156126f857600080fd5b505af1925050508015612728575060408051601f3d908101601f19168201909252612725918101906141fa565b60015b612734576125c9614b74565b6001600160e01b0319811663bc197c8160e01b14611e5b5760405162461bcd60e51b8152600401610722906145a3565b606060006127738360026149e4565b61277e9060026149b8565b6001600160401b038111156127a357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127cd576020820181803683370190505b509050600360fc1b816000815181106127f657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061283357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006128578460026149e4565b6128629060016149b8565b90505b60018111156128f6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128a457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106128c857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936128ef81614a85565b9050612865565b5083156107745760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610722565b6040516001600160a01b0383166024820152604481018290526109ac90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b7b5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610722565b606081612a645750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612a8e5780612a7881614b03565b9150612a879050600a836149d0565b9150612a68565b6000816001600160401b03811115612ab657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ae0576020820181803683370190505b5090505b8415612b5957612af5600183614a42565b9150612b02600a86614b1e565b612b0d9060306149b8565b60f81b818381518110612b3057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612b52600a866149d0565b9450612ae4565b949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fcc9085906323b872dd60e01b90608401612971565b600054610100900460ff1680612bb2575060005460ff16155b612bce5760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612bf0576000805461ffff19166101011790555b612bf982613162565b612c02836131d2565b80156109ac576000805461ff0019169055505050565b600054610100900460ff1680612c31575060005460ff16155b612c4d5760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612c6f576000805461ffff19166101011790555b815160fc5560005b8251811015612d5557828181518110612ca057634e487b7160e01b600052603260045260246000fd5b602002602001015160fb6000836001612cb991906149b8565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055612cf28160016149b8565b60fd6000858481518110612d1657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612d4d90614b03565b915050612c77565b508015610836576000805461ff00191690555050565b600054610100900460ff1680612d84575060005460ff16155b612da05760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612dc2576000805461ffff19166101011790555b61012e8054861515600160a01b026001600160a81b03199091166001600160a01b038916171790558351612dfe9061012f906020870190613aa3565b508251612e1390610130906020860190613aa3565b50610131805460ff191660ff841617905580156117f9576000805461ff0019169055505050505050565b600054610100900460ff1680612e56575060005460ff16155b612e725760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612e94576000805461ffff19166101011790555b612eac600080516020614c3a83398151915283613289565b612ec4600080516020614c3a83398151915280613293565b8015610836576000805461ff00191690555050565b612ee78686868686866132de565b6001600160a01b038516612f595761012e54600160a01b900460ff1615612f595760005b8351811015612f5757612f44848281518110612f3757634e487b7160e01b600052603260045260246000fd5b6020026020010151611a45565b5080612f4f81614b03565b915050612f0b565b505b60005b8351811015611e5b57600061012d6000868481518110612f8c57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b031690508015613062576000819050806001600160a01b031663a6d49dca8989888781518110612fee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561304857600080fd5b505af115801561305c573d6000803e3d6000fd5b50505050505b508061306d81614b03565b915050612f5c565b6000613085878787878787613673565b979650505050505050565b60006130e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166136b19092919063ffffffff16565b8051909150156109ac57808060200190518101906131039190614188565b6109ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610722565b600054610100900460ff168061317b575060005460ff16155b6131975760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff161580156131b9576000805461ffff19166101011790555b6131c16136c0565b6131c96136c0565b612ec48261372c565b600054610100900460ff16806131eb575060005460ff16155b6132075760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613229576000805461ffff19166101011790555b613241600080516020614c5a83398151915283613289565b613259600080516020614c7a83398151915283613289565b613271600080516020614c5a83398151915280613293565b612ec4600080516020614c7a83398151915280613293565b6108368282611865565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6132ec86868686868661378c565b6001600160a01b0385166134065760005b835181101561340057600084828151811061332857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061335457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc5481116133ea57600081815260fb60209081526040808320868452600181019092529091205461339c906114099085906149e4565b600085815260028301602090815260408083206001600160a01b038e168452909152812080549091906133d0908490614a03565b909155508291506133e2905081614b03565b915050613365565b50505080806133f890614b03565b9150506132fd565b506117f9565b6001600160a01b03841661351a5760005b835181101561340057600084828151811061344257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061346e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc54811161350457600081815260fb6020908152604080832086845260018101909252909120546134b6906114099085906149e4565b600085815260028301602090815260408083206001600160a01b038f168452909152812080549091906134ea908490614977565b909155508291506134fc905081614b03565b91505061347f565b505050808061351290614b03565b915050613417565b60005b8351811015611e5b57600084828151811061354857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061357457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc54811161365d57600081815260fb60209081526040808320868452600181019092528220549091906135be906114099086906149e4565b90508082600201600087815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546136089190614977565b9091555050600085815260028301602090815260408083206001600160a01b038e16845290915281208054839290613641908490614a03565b925050819055505050808061365590614b03565b915050613585565b505050808061366b90614b03565b91505061351d565b600083815261012d60205260408120546001600160a01b031680156136a7576001600160a01b038881169116149050611427565b6000915050611427565b606061077184846000856138d2565b600054610100900460ff16806136d9575060005460ff16155b6136f55760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613717576000805461ffff19166101011790555b8015613729576000805461ff00191690555b50565b600054610100900460ff1680613745575060005460ff16155b6137615760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613783576000805461ffff19166101011790555b612ec482611502565b6001600160a01b03851661382f5760005b8351811015613400578281815181106137c657634e487b7160e01b600052603260045260246000fd5b602002602001015160c960008684815181106137f257634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600082825461381791906149b8565b9091555081905061382781614b03565b91505061379d565b6001600160a01b0384166117f95760005b8351811015611e5b5782818151811061386957634e487b7160e01b600052603260045260246000fd5b602002602001015160c9600086848151811061389557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546138ba9190614a42565b909155508190506138ca81614b03565b915050613840565b6060824710156139335760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610722565b843b6139815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610722565b600080866001600160a01b0316858760405161399d919061433a565b60006040518083038185875af1925050503d80600081146139da576040519150601f19603f3d011682016040523d82523d6000602084013e6139df565b606091505b5091509150613085828286606083156139f9575081610774565b825115613a095782518084602001fd5b8160405162461bcd60e51b81526004016107229190614590565b828054613a2f90614a9c565b90600052602060002090601f016020900481019282613a515760008555613a97565b82601f10613a6a5782800160ff19823516178555613a97565b82800160010185558215613a97579182015b82811115613a97578235825591602001919060010190613a7c565b506122fc929150613b17565b828054613aaf90614a9c565b90600052602060002090601f016020900481019282613ad15760008555613a97565b82601f10613aea57805160ff1916838001178555613a97565b82800160010185558215613a97579182015b82811115613a97578251825591602001919060010190613afc565b5b808211156122fc5760008155600101613b18565b80356001600160a01b0381168114611b7b57600080fd5b60008083601f840112613b54578182fd5b5081356001600160401b03811115613b6a578182fd5b6020830191508360208260051b8501011115613b8557600080fd5b9250929050565b600082601f830112613b9c578081fd5b81356020613ba982614954565b604051613bb68282614ad7565b8381528281019150858301600585901b87018401881015613bd5578586fd5b855b85811015613bf357813584529284019290840190600101613bd7565b5090979650505050505050565b8035611b7b81614c15565b600082601f830112613c1b578081fd5b81356001600160401b03811115613c3457613c34614b5e565b604051613c4b601f8301601f191660200182614ad7565b818152846020838601011115613c5f578283fd5b816020850160208301379081016020019190915292915050565b60008083601f840112613c8a578182fd5b5081356001600160401b03811115613ca0578182fd5b602083019150836020828501011115613b8557600080fd5b803560ff81168114611b7b57600080fd5b600060208284031215613cda578081fd5b61077482613b2c565b60008060408385031215613cf5578081fd5b613cfe83613b2c565b9150613d0c60208401613b2c565b90509250929050565b600080600080600060a08688031215613d2c578081fd5b613d3586613b2c565b9450613d4360208701613b2c565b935060408601356001600160401b0380821115613d5e578283fd5b613d6a89838a01613b8c565b94506060880135915080821115613d7f578283fd5b613d8b89838a01613b8c565b93506080880135915080821115613da0578283fd5b50613dad88828901613c0b565b9150509295509295909350565b60008060008060808587031215613dcf578384fd5b613dd885613b2c565b9350613de660208601613b2c565b93969395505050506040820135916060013590565b600080600080600060a08688031215613e12578081fd5b613e1b86613b2c565b9450613e2960208701613b2c565b9350604086013592506060860135915060808601356001600160401b03811115613e51578182fd5b613dad88828901613c0b565b600080600080600060608688031215613e74578283fd5b613e7d86613b2c565b945060208601356001600160401b0380821115613e98578485fd5b613ea489838a01613b43565b90965094506040880135915080821115613ebc578283fd5b50613ec988828901613b43565b969995985093965092949392505050565b60008060408385031215613eec578182fd5b613ef583613b2c565b91506020830135613f0581614c15565b809150509250929050565b6000806000806000806000806000806101008b8d031215613f2f578788fd5b613f388b613b2c565b995060208b01356001600160401b0380821115613f5357898afd5b613f5f8e838f01613c79565b909b50995060408d0135915080821115613f77578687fd5b613f838e838f01613b43565b9099509750879150613f9760608e01613b2c565b9650613fa560808e01613c00565b955060a08d0135915080821115613fba578485fd5b613fc68e838f01613c0b565b945060c08d0135915080821115613fdb578384fd5b50613fe88d828e01613c0b565b925050613ff760e08c01613cb8565b90509295989b9194979a5092959850565b6000806040838503121561401a578182fd5b61402383613b2c565b946020939093013593505050565b600080600060608486031215614045578081fd5b61404e84613b2c565b95602085013595506040909401359392505050565b60008060408385031215614075578182fd5b82356001600160401b038082111561408b578384fd5b818501915085601f83011261409e578384fd5b813560206140ab82614954565b6040516140b88282614ad7565b8381528281019150858301600585901b870184018b10156140d7578889fd5b8896505b84871015614100576140ec81613b2c565b8352600196909601959183019183016140db565b5096505086013592505080821115614116578283fd5b5061412385828601613b8c565b9150509250929050565b6000806020838503121561413f578182fd5b82356001600160401b03811115614154578283fd5b61416085828601613b43565b90969095509350505050565b60006020828403121561417d578081fd5b813561077481614c15565b600060208284031215614199578081fd5b815161077481614c15565b6000602082840312156141b5578081fd5b5035919050565b600080604083850312156141ce578182fd5b82359150613d0c60208401613b2c565b6000602082840312156141ef578081fd5b813561077481614c23565b60006020828403121561420b578081fd5b815161077481614c23565b60008060208385031215614228578182fd5b82356001600160401b0381111561423d578283fd5b61416085828601613c79565b60008060006060848603121561425d578081fd5b8335925061426d60208501613b2c565b915061427b60408501613b2c565b90509250925092565b600080600060608486031215614298578081fd5b833592506142a860208501613b2c565b9150604084013590509250925092565b6000815180845260208085019450808401835b838110156142e7578151875295820195908201906001016142cb565b509495945050505050565b6000815180845261430a816020860160208601614a59565b601f01601f19169290920160200192915050565b60008151614330818560208601614a59565b9290920192915050565b6000825161434c818460208701614a59565b9190910192915050565b600080845482600182811c91508083168061437257607f831692505b602080841082141561439257634e487b7160e01b87526022600452602487fd5b8180156143a657600181146143b7576143e3565b60ff198616895284890196506143e3565b60008b815260209020885b868110156143db5781548b8201529085019083016143c2565b505084890196505b5050505050506143f3818561431e565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614434816017850160208801614a59565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614465816028840160208801614a59565b01602801949350505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061449d908301866142b8565b82810360608401526144af81866142b8565b905082810360808401526144c381856142f2565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613085908301846142f2565b60018060a01b038616815284602082015260a06040820152600061453060a08301866142f2565b828103606084015261454281866142f2565b91505060ff831660808301529695505050505050565b60208152600061077460208301846142b8565b60408152600061457e60408301856142b8565b82810360208401526143f381856142b8565b60208152600061077460208301846142f2565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135354469766964656e64546f6b656e3a20696e76616c696420646960408201526a3b34b232b7322a37b5b2b760a91b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602a908201527f46756e64696e674d756c7469746f6b656e3a206d7573742068617665206469766040820152696964656e6420726f6c6560b01b606082015260800190565b60208082526031908201527f45524331313535426173653a206d7573742068617665206d696e7465722d62756040820152701c9b995c881c9bdb19481d1bc81b5a5b9d607a1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526031908201527f45524331313535426173653a206d7573742068617665206d696e7465722d6275604082015270393732b9103937b632903a3790313ab93760791b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f5772617070656445524331313535546f6b656e3a206e6f206d6574616461746160408201526420726f6c6560d81b606082015260800190565b60006001600160401b0382111561496d5761496d614b5e565b5060051b60200190565b600080821280156001600160ff1b038490038513161561499957614999614b32565b600160ff1b83900384128116156149b2576149b2614b32565b50500190565b600082198211156149cb576149cb614b32565b500190565b6000826149df576149df614b48565b500490565b60008160001904831182151516156149fe576149fe614b32565b500290565b60008083128015600160ff1b850184121615614a2157614a21614b32565b6001600160ff1b0384018313811615614a3c57614a3c614b32565b50500390565b600082821015614a5457614a54614b32565b500390565b60005b83811015614a74578181015183820152602001614a5c565b83811115610fcc5750506000910152565b600081614a9457614a94614b32565b506000190190565b600181811c90821680614ab057607f821691505b60208210811415614ad157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715614afc57614afc614b5e565b6040525050565b6000600019821415614b1757614b17614b32565b5060010190565b600082614b2d57614b2d614b48565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115614b8957600481823e5160e01c5b90565b600060443d1015614b9a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614bc957505050505090565b8285019150815181811115614be15750505050505090565b843d8701016020828501011115614bfb5750505050505090565b614c0a60208286010187614ad7565b509095945050505050565b801515811461372957600080fd5b6001600160e01b03198116811461372957600080fdfe1306abaae01ce00b9f91c50a35fbeecbc60f12b86cc685e2cf1f6baae86d17936bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f80cfd53186d792f1ec9d0679afc2dc3ffc86fc31fe1e0f342b838eb6c3eade62b3a2646970667358221220abd08a8a0aa3a293fb57524fba8bda22bca5221d15c927edec647f3209adb6e564736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102895760003560e01c806377954ac21161015c578063b7b424e8116100ce578063e0507fac11610087578063e0507fac1461061d578063e985e9c514610630578063f242432a1461066c578063f3491f2b1461067f578063f4a1400214610694578063f5298aca146106a757600080fd5b8063b7b424e81461059c578063bd85b039146105af578063c8262c6c146105cf578063d2eb949b146105e4578063d547741f146105f7578063d81d0a151461060a57600080fd5b806391d148541161012057806391d14854146105345780639285a1e11461054757806398f192e31461055a578063a217fddf1461056e578063a22cb46514610576578063a4ed80511461058957600080fd5b806377954ac2146104dd5780637f9678b2146104f057806380583be714610510578063814d05f01461051857806381d792ef1461052b57600080fd5b80632f2ff15d116102005780634e1273f4116101b95780634e1273f41461044657806358b37b9b14610466578063590b07ec1461047957806366300d73146104a25780636b20c454146104b557806372c32860146104c857600080fd5b80632f2ff15d14610396578063313ce567146103a95780633627fda8146103c957806336568abe146103dc57806338841782146103ef57806348ab4f4b1461040457600080fd5b80631503063311610252578063150306331461031f578063156e29f6146103275780631b2121aa1461033a578063248a9ca31461034d5780632578f786146103705780632eb2c2d61461038357600080fd5b8062fdd58e1461028e57806301ffc9a7146102b457806302b171e2146102d757806302fe5305146102ea5780630e89341c146102ff575b600080fd5b6102a161029c366004614008565b6106ba565b6040519081526020015b60405180910390f35b6102c76102c23660046141de565b610753565b60405190151581526020016102ab565b6102a16102e5366004614249565b610764565b6102fd6102f8366004614216565b61077b565b005b61031261030d3660046141a4565b61083a565b6040516102ab9190614590565b6103126108ce565b6102fd610335366004614031565b61095d565b6102fd610348366004614216565b6109b1565b6102a161035b3660046141a4565b60009081526097602052604090206001015490565b6102fd61037e36600461416c565b6109f2565b6102fd610391366004613d15565b610a45565b6102fd6103a43660046141bc565b610adc565b610131546103b79060ff1681565b60405160ff90911681526020016102ab565b6102fd6103d73660046141bc565b610b02565b6102fd6103ea3660046141bc565b610b0d565b6102a1600080516020614c5a83398151915281565b61042e6104123660046141a4565b61012d602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016102ab565b610459610454366004614063565b610b87565b6040516102ab9190614558565b61042e6104743660046141a4565b610ce8565b61042e6104873660046141a4565b60fb602052600090815260409020546001600160a01b031681565b6102a16104b0366004614249565b610cf3565b6102fd6104c3366004613e5d565b610d52565b6102a1600080516020614c7a83398151915281565b6104596104eb36600461412d565b610df4565b6102a16104fe366004613cc9565b60fd6020526000908152604090205481565b610312610ed1565b6102fd610526366004614249565b610edf565b6102a160fc5481565b6102c76105423660046141bc565b610f1e565b6102fd610555366004613dba565b610f49565b61012e5461042e906001600160a01b031681565b6102a1600081565b6102fd610584366004613eda565b610fd2565b6102fd610597366004613cc9565b6110a9565b6102fd6105aa366004614284565b6110e6565b6102a16105bd3660046141a4565b600090815260c9602052604090205490565b6102a1600080516020614c3a83398151915281565b6102fd6105f2366004614216565b611125565b6102fd6106053660046141bc565b611166565b6102fd610618366004613e5d565b61118c565b6102fd61062b366004613f10565b61123c565b6102c761063e366004613ce3565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b6102fd61067a366004613dfb565b6112f8565b61012e546102c790600160a01b900460ff1681565b6102a16106a2366004614249565b61137f565b6102fd6106b5366004614031565b611431565b60006001600160a01b03831661072b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b600061075e82611470565b92915050565b6000610771848484611495565b90505b9392505050565b610793600080516020614c5a83398151915233610f1e565b6107f75760405162461bcd60e51b815260206004820152602f60248201527f45524331313535426173653a206d7573742068617665206d657461646174612060448201526e726f6c6520746f207365742055524960881b6064820152608401610722565b61083682828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061150292505050565b5050565b60606067805461084990614a9c565b80601f016020809104026020016040519081016040528092919081815260200182805461087590614a9c565b80156108c25780601f10610897576101008083540402835291602001916108c2565b820191906000526020600020905b8154815290600101906020018083116108a557829003601f168201915b50505050509050919050565b61012f80546108dc90614a9c565b80601f016020809104026020016040519081016040528092919081815260200182805461090890614a9c565b80156109555780601f1061092a57610100808354040283529160200191610955565b820191906000526020600020905b81548152906001019060200180831161093857829003601f168201915b505050505081565b610975600080516020614c7a83398151915233610f1e565b6109915760405162461bcd60e51b8152600401610722906146c4565b6109ac83838360405180602001604052806000815250611515565b505050565b6109c9600080516020614c5a83398151915233610f1e565b6109e55760405162461bcd60e51b81526004016107229061490f565b6109ac61012f8383613a23565b610a0a600080516020614c5a83398151915233610f1e565b610a265760405162461bcd60e51b81526004016107229061490f565b61012e8054911515600160a01b0260ff60a01b19909216919091179055565b6001600160a01b038516331480610a615750610a61853361063e565b610ac85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610722565b610ad585858585856115ed565b5050505050565b600082815260976020526040902060010154610af88133611801565b6109ac8383611865565b6108368282336118eb565b6001600160a01b0381163314610b7d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610722565b61083682826119de565b60608151835114610bec5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610722565b600083516001600160401b03811115610c1557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c3e578160200160208202803683370190505b50905060005b8451811015610ce057610ca5858281518110610c7057634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610c9857634e487b7160e01b600052603260045260246000fd5b60200260200101516106ba565b828281518110610cc557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610cd981614b03565b9050610c44565b509392505050565b600061075e82611a45565b6001600160a01b038216600090815260fd602052604081205480610d1b576000915050610774565b600090815260fb6020908152604080832087845260030182528083206001600160a01b038616845290915290205490509392505050565b610d6a600080516020614c7a83398151915233610f1e565b610d865760405162461bcd60e51b815260040161072290614835565b610ad58585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092019190915250611b8092505050565b6060816001600160401b03811115610e1c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e45578160200160208202803683370190505b50905060005b82811015610eca5760c96000858584818110610e7757634e487b7160e01b600052603260045260246000fd5b90506020020135815260200190815260200160002054828281518110610ead57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610ec281614b03565b915050610e4b565b5092915050565b61013080546108dc90614a9c565b610ef7600080516020614c3a83398151915233610f1e565b610f135760405162461bcd60e51b81526004016107229061467a565b6109ac8383836118eb565b60009182526097602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600082815261012d60205260409020546001600160a01b03163314610fb05760405162461bcd60e51b815260206004820181905260248201527f5772617070656445524331313535546f6b656e3a206e6f7420777261707065726044820152606401610722565b610fcc8484848460405180602001604052806000815250611d3a565b50505050565b336001600160a01b038316141561103d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610722565b3360008181526066602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6110c1600080516020614c3a83398151915233610f1e565b6110dd5760405162461bcd60e51b81526004016107229061467a565b61083681611e64565b6110fe600080516020614c3a83398151915233610f1e565b61111a5760405162461bcd60e51b81526004016107229061467a565b6109ac838383611f33565b61113d600080516020614c5a83398151915233610f1e565b6111595760405162461bcd60e51b81526004016107229061490f565b6109ac6101308383613a23565b6000828152609760205260409020600101546111828133611801565b6109ac83836119de565b6111a4600080516020614c7a83398151915233610f1e565b6111c05760405162461bcd60e51b8152600401610722906146c4565b610ad58585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808902828101820190935288825290935088925087918291850190849080828437600092018290525060408051602081019091529081529250612047915050565b600054610100900460ff1680611255575060005460ff16155b6112715760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015611293576000805461ffff19166101011790555b6112d98b8b8b8b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508d92508c91508b90508a8a6121be565b80156112eb576000805461ff00191690555b5050505050505050505050565b6001600160a01b0385163314806113145750611314853361063e565b6113725760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610722565b610ad58585858585611d3a565b6001600160a01b038216600090815260fd6020526040812054806113a7576000915050610774565b600081815260fb602090815260408083208884526002810183528184206001600160a01b038816855290925290912054600160801b9061141d9061140e6113ee888b6106ba565b60008b815260018701602052604090205461140991906149e4565b612292565b6114189190614977565b612300565b61142791906149d0565b9695505050505050565b611449600080516020614c7a83398151915233610f1e565b6114655760405162461bcd60e51b815260040161072290614835565b6109ac838383612352565b60006001600160e01b03198216637965db0b60e01b148061075e575061075e8261245f565b6001600160a01b038216600090815260fd6020526040812054806114bd576000915050610774565b600081815260fb602090815260408083208884526003810183528184206001600160a01b0388168552909252909120546114f887878761137f565b6114279190614a42565b8051610836906067906020840190613aa3565b6001600160a01b03841661153b5760405162461bcd60e51b8152600401610722906148ce565b3361155b8160008761154c886124af565b611555886124af565b87612508565b60008481526065602090815260408083206001600160a01b03891684529091528120805485929061158d9084906149b8565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610ad581600087878787612516565b815183511461160e5760405162461bcd60e51b815260040161072290614886565b6001600160a01b0384166116345760405162461bcd60e51b815260040161072290614715565b33611643818787878787612508565b60005b845181101561179357600085828151811061167157634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061169d57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156116ee5760405162461bcd60e51b8152600401610722906147eb565b6116f88282614a42565b6065600085815260200190815260200160002060008c6001600160a01b03166001600160a01b0316815260200190815260200160002081905550816065600085815260200190815260200160002060008b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461177891906149b8565b925050819055505050508061178c90614b03565b9050611646565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117e392919061456b565b60405180910390a46117f981878787878761269a565b505050505050565b61180b8282610f1e565b61083657611823816001600160a01b03166014612764565b61182e836020612764565b60405160200161183f9291906143fc565b60408051601f198184030181529082905262461bcd60e51b825261072291600401614590565b61186f8282610f1e565b6108365760008281526097602090815260408083206001600160a01b03851684529091529020805460ff191660011790556118a73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006118f8848484611495565b90508015610fcc576001600160a01b038316600090815260fd6020526040902054806119365760405162461bcd60e51b8152600401610722906145eb565b600081815260fb602090815260408083208884526003810183528184206001600160a01b038816855290925282208054919285926119759084906149b8565b92505081905550846001600160a01b0316846001600160a01b0316877f56f5c15e9cca112839303eda856edf8986e092fc839520408e38e9e662b8d27e866040516119c291815260200190565b60405180910390a46117f96001600160a01b0386168585612945565b6119e88282610f1e565b156108365760008281526097602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081815261012d60205260409020546001600160a01b031680611b7b5761012e54600090611a7c906001600160a01b03166129a8565b90506000611a8984612a40565b9050600061012f82604051602001611aa2929190614356565b6040516020818303038152906040529050600061013083604051602001611aca929190614356565b60408051601f19818403018152908290526101315463be88368d60e01b83529092506001600160a01b0386169163be88368d91611b179130918b918891889160ff90911690600401614509565b600060405180830381600087803b158015611b3157600080fd5b505af1158015611b45573d6000803e3d6000fd5b505050600087815261012d6020526040902080546001600160a01b0319166001600160a01b039690961695909517909455505050505b919050565b6001600160a01b038316611ba65760405162461bcd60e51b8152600401610722906147a8565b8051825114611bc75760405162461bcd60e51b815260040161072290614886565b6000339050611bea81856000868660405180602001604052806000815250612508565b60005b8351811015611cdb576000848281518110611c1857634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110611c4457634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611c955760405162461bcd60e51b815260040161072290614636565b611c9f8282614a42565b60009384526065602090815260408086206001600160a01b038c1687529091529093209290925550819050611cd381614b03565b915050611bed565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d2c92919061456b565b60405180910390a450505050565b6001600160a01b038416611d605760405162461bcd60e51b815260040161072290614715565b33611d7081878761154c886124af565b60008481526065602090815260408083206001600160a01b038a16845290915290205483811015611db35760405162461bcd60e51b8152600401610722906147eb565b611dbd8482614a42565b60008681526065602090815260408083206001600160a01b038c81168552925280832093909355881681529081208054869290611dfb9084906149b8565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611e5b828888888888612516565b50505050505050565b6001600160a01b038116600090815260fd602052604081205415611edb5760405162461bcd60e51b815260206004820152602860248201527f455243313135354469766964656e64546f6b656e3a20616c726561647920726560448201526719da5cdd195c995960c21b6064820152608401610722565b60fc8054906000611eeb83614b03565b909155505060fc54600081815260fb6020908152604080832080546001600160a01b039097166001600160a01b03199097168717905594825260fd9052929092208290555090565b600083815260c9602052604090205480611f4c57600080fd5b60008211611f5957600080fd5b6001600160a01b038316600090815260fd602052604090205480611f8f5760405162461bcd60e51b8152600401610722906145eb565b600081815260fb6020526040902082611fac600160801b866149e4565b611fb691906149d0565b600087815260018301602052604081208054909190611fd69084906149b8565b90915550611ff190506001600160a01b038616333087612b61565b846001600160a01b0316336001600160a01b0316877f8e19c486d7cf157228582812303b4763c49b90104252be0a955a3efb25f46ada8760405161203791815260200190565b60405180910390a4505050505050565b6001600160a01b03841661206d5760405162461bcd60e51b8152600401610722906148ce565b815183511461208e5760405162461bcd60e51b815260040161072290614886565b3361209e81600087878787612508565b60005b8451811015612156578381815181106120ca57634e487b7160e01b600052603260045260246000fd5b6020026020010151606560008784815181106120f657634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b03168152602001908152602001600020600082825461213e91906149b8565b9091555081905061214e81614b03565b9150506120a1565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516121a792919061456b565b60405180910390a4610ad58160008787878761269a565b600054610100900460ff16806121d7575060005460ff16155b6121f35760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612215576000805461ffff19166101011790555b6122558a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b9992505050565b61225e87612c18565b61226b8686868686612d6b565b6122748a612e3d565b8015612286576000805461ff00191690555b50505050505050505050565b60006001600160ff1b038211156122fc5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610722565b5090565b6000808212156122fc5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610722565b6001600160a01b0383166123785760405162461bcd60e51b8152600401610722906147a8565b336123a781856000612389876124af565b612392876124af565b60405180602001604052806000815250612508565b60008381526065602090815260408083206001600160a01b0388168452909152902054828110156123ea5760405162461bcd60e51b815260040161072290614636565b6123f48382614a42565b60008581526065602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b60006001600160e01b03198216636cdb3d1360e11b148061249057506001600160e01b031982166303a24d0760e21b145b8061075e57506301ffc9a760e01b6001600160e01b031983161461075e565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106124f757634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6117f9868686868686612ed9565b6001600160a01b0384163b1515801561253a5750612538868686868686613075565b155b156117f95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061257390899089908890889088906004016144cf565b602060405180830381600087803b15801561258d57600080fd5b505af19250505080156125bd575060408051601f3d908101601f191682019092526125ba918101906141fa565b60015b61266a576125c9614b74565b806308c379a0141561260357506125de614b8c565b806125e95750612605565b8060405162461bcd60e51b81526004016107229190614590565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610722565b6001600160e01b0319811663f23a6e6160e01b14611e5b5760405162461bcd60e51b8152600401610722906145a3565b6001600160a01b0384163b156117f95760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906126de9089908990889088908890600401614471565b602060405180830381600087803b1580156126f857600080fd5b505af1925050508015612728575060408051601f3d908101601f19168201909252612725918101906141fa565b60015b612734576125c9614b74565b6001600160e01b0319811663bc197c8160e01b14611e5b5760405162461bcd60e51b8152600401610722906145a3565b606060006127738360026149e4565b61277e9060026149b8565b6001600160401b038111156127a357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127cd576020820181803683370190505b509050600360fc1b816000815181106127f657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061283357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006128578460026149e4565b6128629060016149b8565b90505b60018111156128f6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106128a457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106128c857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936128ef81614a85565b9050612865565b5083156107745760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610722565b6040516001600160a01b0383166024820152604481018290526109ac90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613090565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b038116611b7b5760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610722565b606081612a645750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612a8e5780612a7881614b03565b9150612a879050600a836149d0565b9150612a68565b6000816001600160401b03811115612ab657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ae0576020820181803683370190505b5090505b8415612b5957612af5600183614a42565b9150612b02600a86614b1e565b612b0d9060306149b8565b60f81b818381518110612b3057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612b52600a866149d0565b9450612ae4565b949350505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fcc9085906323b872dd60e01b90608401612971565b600054610100900460ff1680612bb2575060005460ff16155b612bce5760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612bf0576000805461ffff19166101011790555b612bf982613162565b612c02836131d2565b80156109ac576000805461ff0019169055505050565b600054610100900460ff1680612c31575060005460ff16155b612c4d5760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612c6f576000805461ffff19166101011790555b815160fc5560005b8251811015612d5557828181518110612ca057634e487b7160e01b600052603260045260246000fd5b602002602001015160fb6000836001612cb991906149b8565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055612cf28160016149b8565b60fd6000858481518110612d1657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080612d4d90614b03565b915050612c77565b508015610836576000805461ff00191690555050565b600054610100900460ff1680612d84575060005460ff16155b612da05760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612dc2576000805461ffff19166101011790555b61012e8054861515600160a01b026001600160a81b03199091166001600160a01b038916171790558351612dfe9061012f906020870190613aa3565b508251612e1390610130906020860190613aa3565b50610131805460ff191660ff841617905580156117f9576000805461ff0019169055505050505050565b600054610100900460ff1680612e56575060005460ff16155b612e725760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015612e94576000805461ffff19166101011790555b612eac600080516020614c3a83398151915283613289565b612ec4600080516020614c3a83398151915280613293565b8015610836576000805461ff00191690555050565b612ee78686868686866132de565b6001600160a01b038516612f595761012e54600160a01b900460ff1615612f595760005b8351811015612f5757612f44848281518110612f3757634e487b7160e01b600052603260045260246000fd5b6020026020010151611a45565b5080612f4f81614b03565b915050612f0b565b505b60005b8351811015611e5b57600061012d6000868481518110612f8c57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518252810191909152604001600020546001600160a01b031690508015613062576000819050806001600160a01b031663a6d49dca8989888781518110612fee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561304857600080fd5b505af115801561305c573d6000803e3d6000fd5b50505050505b508061306d81614b03565b915050612f5c565b6000613085878787878787613673565b979650505050505050565b60006130e5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166136b19092919063ffffffff16565b8051909150156109ac57808060200190518101906131039190614188565b6109ac5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610722565b600054610100900460ff168061317b575060005460ff16155b6131975760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff161580156131b9576000805461ffff19166101011790555b6131c16136c0565b6131c96136c0565b612ec48261372c565b600054610100900460ff16806131eb575060005460ff16155b6132075760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613229576000805461ffff19166101011790555b613241600080516020614c5a83398151915283613289565b613259600080516020614c7a83398151915283613289565b613271600080516020614c5a83398151915280613293565b612ec4600080516020614c7a83398151915280613293565b6108368282611865565b600082815260976020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6132ec86868686868661378c565b6001600160a01b0385166134065760005b835181101561340057600084828151811061332857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061335457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc5481116133ea57600081815260fb60209081526040808320868452600181019092529091205461339c906114099085906149e4565b600085815260028301602090815260408083206001600160a01b038e168452909152812080549091906133d0908490614a03565b909155508291506133e2905081614b03565b915050613365565b50505080806133f890614b03565b9150506132fd565b506117f9565b6001600160a01b03841661351a5760005b835181101561340057600084828151811061344257634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061346e57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc54811161350457600081815260fb6020908152604080832086845260018101909252909120546134b6906114099085906149e4565b600085815260028301602090815260408083206001600160a01b038f168452909152812080549091906134ea908490614977565b909155508291506134fc905081614b03565b91505061347f565b505050808061351290614b03565b915050613417565b60005b8351811015611e5b57600084828151811061354857634e487b7160e01b600052603260045260246000fd5b60200260200101519050600084838151811061357457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000600190505b60fc54811161365d57600081815260fb60209081526040808320868452600181019092528220549091906135be906114099086906149e4565b90508082600201600087815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546136089190614977565b9091555050600085815260028301602090815260408083206001600160a01b038e16845290915281208054839290613641908490614a03565b925050819055505050808061365590614b03565b915050613585565b505050808061366b90614b03565b91505061351d565b600083815261012d60205260408120546001600160a01b031680156136a7576001600160a01b038881169116149050611427565b6000915050611427565b606061077184846000856138d2565b600054610100900460ff16806136d9575060005460ff16155b6136f55760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613717576000805461ffff19166101011790555b8015613729576000805461ff00191690555b50565b600054610100900460ff1680613745575060005460ff16155b6137615760405162461bcd60e51b81526004016107229061475a565b600054610100900460ff16158015613783576000805461ffff19166101011790555b612ec482611502565b6001600160a01b03851661382f5760005b8351811015613400578281815181106137c657634e487b7160e01b600052603260045260246000fd5b602002602001015160c960008684815181106137f257634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600082825461381791906149b8565b9091555081905061382781614b03565b91505061379d565b6001600160a01b0384166117f95760005b8351811015611e5b5782818151811061386957634e487b7160e01b600052603260045260246000fd5b602002602001015160c9600086848151811061389557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060008282546138ba9190614a42565b909155508190506138ca81614b03565b915050613840565b6060824710156139335760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610722565b843b6139815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610722565b600080866001600160a01b0316858760405161399d919061433a565b60006040518083038185875af1925050503d80600081146139da576040519150601f19603f3d011682016040523d82523d6000602084013e6139df565b606091505b5091509150613085828286606083156139f9575081610774565b825115613a095782518084602001fd5b8160405162461bcd60e51b81526004016107229190614590565b828054613a2f90614a9c565b90600052602060002090601f016020900481019282613a515760008555613a97565b82601f10613a6a5782800160ff19823516178555613a97565b82800160010185558215613a97579182015b82811115613a97578235825591602001919060010190613a7c565b506122fc929150613b17565b828054613aaf90614a9c565b90600052602060002090601f016020900481019282613ad15760008555613a97565b82601f10613aea57805160ff1916838001178555613a97565b82800160010185558215613a97579182015b82811115613a97578251825591602001919060010190613afc565b5b808211156122fc5760008155600101613b18565b80356001600160a01b0381168114611b7b57600080fd5b60008083601f840112613b54578182fd5b5081356001600160401b03811115613b6a578182fd5b6020830191508360208260051b8501011115613b8557600080fd5b9250929050565b600082601f830112613b9c578081fd5b81356020613ba982614954565b604051613bb68282614ad7565b8381528281019150858301600585901b87018401881015613bd5578586fd5b855b85811015613bf357813584529284019290840190600101613bd7565b5090979650505050505050565b8035611b7b81614c15565b600082601f830112613c1b578081fd5b81356001600160401b03811115613c3457613c34614b5e565b604051613c4b601f8301601f191660200182614ad7565b818152846020838601011115613c5f578283fd5b816020850160208301379081016020019190915292915050565b60008083601f840112613c8a578182fd5b5081356001600160401b03811115613ca0578182fd5b602083019150836020828501011115613b8557600080fd5b803560ff81168114611b7b57600080fd5b600060208284031215613cda578081fd5b61077482613b2c565b60008060408385031215613cf5578081fd5b613cfe83613b2c565b9150613d0c60208401613b2c565b90509250929050565b600080600080600060a08688031215613d2c578081fd5b613d3586613b2c565b9450613d4360208701613b2c565b935060408601356001600160401b0380821115613d5e578283fd5b613d6a89838a01613b8c565b94506060880135915080821115613d7f578283fd5b613d8b89838a01613b8c565b93506080880135915080821115613da0578283fd5b50613dad88828901613c0b565b9150509295509295909350565b60008060008060808587031215613dcf578384fd5b613dd885613b2c565b9350613de660208601613b2c565b93969395505050506040820135916060013590565b600080600080600060a08688031215613e12578081fd5b613e1b86613b2c565b9450613e2960208701613b2c565b9350604086013592506060860135915060808601356001600160401b03811115613e51578182fd5b613dad88828901613c0b565b600080600080600060608688031215613e74578283fd5b613e7d86613b2c565b945060208601356001600160401b0380821115613e98578485fd5b613ea489838a01613b43565b90965094506040880135915080821115613ebc578283fd5b50613ec988828901613b43565b969995985093965092949392505050565b60008060408385031215613eec578182fd5b613ef583613b2c565b91506020830135613f0581614c15565b809150509250929050565b6000806000806000806000806000806101008b8d031215613f2f578788fd5b613f388b613b2c565b995060208b01356001600160401b0380821115613f5357898afd5b613f5f8e838f01613c79565b909b50995060408d0135915080821115613f77578687fd5b613f838e838f01613b43565b9099509750879150613f9760608e01613b2c565b9650613fa560808e01613c00565b955060a08d0135915080821115613fba578485fd5b613fc68e838f01613c0b565b945060c08d0135915080821115613fdb578384fd5b50613fe88d828e01613c0b565b925050613ff760e08c01613cb8565b90509295989b9194979a5092959850565b6000806040838503121561401a578182fd5b61402383613b2c565b946020939093013593505050565b600080600060608486031215614045578081fd5b61404e84613b2c565b95602085013595506040909401359392505050565b60008060408385031215614075578182fd5b82356001600160401b038082111561408b578384fd5b818501915085601f83011261409e578384fd5b813560206140ab82614954565b6040516140b88282614ad7565b8381528281019150858301600585901b870184018b10156140d7578889fd5b8896505b84871015614100576140ec81613b2c565b8352600196909601959183019183016140db565b5096505086013592505080821115614116578283fd5b5061412385828601613b8c565b9150509250929050565b6000806020838503121561413f578182fd5b82356001600160401b03811115614154578283fd5b61416085828601613b43565b90969095509350505050565b60006020828403121561417d578081fd5b813561077481614c15565b600060208284031215614199578081fd5b815161077481614c15565b6000602082840312156141b5578081fd5b5035919050565b600080604083850312156141ce578182fd5b82359150613d0c60208401613b2c565b6000602082840312156141ef578081fd5b813561077481614c23565b60006020828403121561420b578081fd5b815161077481614c23565b60008060208385031215614228578182fd5b82356001600160401b0381111561423d578283fd5b61416085828601613c79565b60008060006060848603121561425d578081fd5b8335925061426d60208501613b2c565b915061427b60408501613b2c565b90509250925092565b600080600060608486031215614298578081fd5b833592506142a860208501613b2c565b9150604084013590509250925092565b6000815180845260208085019450808401835b838110156142e7578151875295820195908201906001016142cb565b509495945050505050565b6000815180845261430a816020860160208601614a59565b601f01601f19169290920160200192915050565b60008151614330818560208601614a59565b9290920192915050565b6000825161434c818460208701614a59565b9190910192915050565b600080845482600182811c91508083168061437257607f831692505b602080841082141561439257634e487b7160e01b87526022600452602487fd5b8180156143a657600181146143b7576143e3565b60ff198616895284890196506143e3565b60008b815260209020885b868110156143db5781548b8201529085019083016143c2565b505084890196505b5050505050506143f3818561431e565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614434816017850160208801614a59565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614465816028840160208801614a59565b01602801949350505050565b6001600160a01b0386811682528516602082015260a06040820181905260009061449d908301866142b8565b82810360608401526144af81866142b8565b905082810360808401526144c381856142f2565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613085908301846142f2565b60018060a01b038616815284602082015260a06040820152600061453060a08301866142f2565b828103606084015261454281866142f2565b91505060ff831660808301529695505050505050565b60208152600061077460208301846142b8565b60408152600061457e60408301856142b8565b82810360208401526143f381856142b8565b60208152600061077460208301846142f2565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135354469766964656e64546f6b656e3a20696e76616c696420646960408201526a3b34b232b7322a37b5b2b760a91b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602a908201527f46756e64696e674d756c7469746f6b656e3a206d7573742068617665206469766040820152696964656e6420726f6c6560b01b606082015260800190565b60208082526031908201527f45524331313535426173653a206d7573742068617665206d696e7465722d62756040820152701c9b995c881c9bdb19481d1bc81b5a5b9d607a1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526031908201527f45524331313535426173653a206d7573742068617665206d696e7465722d6275604082015270393732b9103937b632903a3790313ab93760791b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f5772617070656445524331313535546f6b656e3a206e6f206d6574616461746160408201526420726f6c6560d81b606082015260800190565b60006001600160401b0382111561496d5761496d614b5e565b5060051b60200190565b600080821280156001600160ff1b038490038513161561499957614999614b32565b600160ff1b83900384128116156149b2576149b2614b32565b50500190565b600082198211156149cb576149cb614b32565b500190565b6000826149df576149df614b48565b500490565b60008160001904831182151516156149fe576149fe614b32565b500290565b60008083128015600160ff1b850184121615614a2157614a21614b32565b6001600160ff1b0384018313811615614a3c57614a3c614b32565b50500390565b600082821015614a5457614a54614b32565b500390565b60005b83811015614a74578181015183820152602001614a5c565b83811115610fcc5750506000910152565b600081614a9457614a94614b32565b506000190190565b600181811c90821680614ab057607f821691505b60208210811415614ad157634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715614afc57614afc614b5e565b6040525050565b6000600019821415614b1757614b17614b32565b5060010190565b600082614b2d57614b2d614b48565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115614b8957600481823e5160e01c5b90565b600060443d1015614b9a5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715614bc957505050505090565b8285019150815181811115614be15750505050505090565b843d8701016020828501011115614bfb5750505050505090565b614c0a60208286010187614ad7565b509095945050505050565b801515811461372957600080fd5b6001600160e01b03198116811461372957600080fdfe1306abaae01ce00b9f91c50a35fbeecbc60f12b86cc685e2cf1f6baae86d17936bd6b5318a46e5fff572d5e4258a20774aab40cc35ac7680654b9081fcc82f80cfd53186d792f1ec9d0679afc2dc3ffc86fc31fe1e0f342b838eb6c3eade62b3a2646970667358221220abd08a8a0aa3a293fb57524fba8bda22bca5221d15c927edec647f3209adb6e564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accumulativeDividendOf(uint256,address,address)": {
        "details": "accumulativeDividendOf(_owner) = _withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner) = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude",
        "params": {
          "_owner": "The address of a token holder.",
          "dividendToken": "The token the dividend is in",
          "tokenID": "The token's ID."
        },
        "returns": {
          "_0": "The amount of dividend in wei that `_owner` has earned in total."
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "deployWrapper(uint256)": {
        "details": "If a wrapper already exists for this tokenID, does nothing and returns the address of the existing wrapper.",
        "params": {
          "tokenID": "The ID of the token to wrap"
        },
        "returns": {
          "wrapperAddress": "The address of the wrapper"
        }
      },
      "dividendOf(uint256,address,address)": {
        "params": {
          "_owner": "The address of a token holder.",
          "dividendToken": "The token the dividend is in",
          "tokenID": "The token's ID."
        },
        "returns": {
          "_0": "The amount of dividend in wei that `_owner` can withdraw."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "withdrawnDividendOf(uint256,address,address)": {
        "params": {
          "_owner": "The address of a token holder.",
          "dividendToken": "The token the dividend is in",
          "tokenID": "The token's ID."
        },
        "returns": {
          "_0": "The amount of dividend in wei that `_owner` has withdrawn."
        }
      },
      "wrapperTransfer(address,address,uint256,uint256)": {
        "details": "Only callable by a wrapper deployed by this contract.",
        "params": {
          "amount": "The amount to transfer",
          "from": "Source of transfer",
          "to": "Target of transfer",
          "tokenID": "The ERC-1155 token ID of the wrapper"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accumulativeDividendOf(uint256,address,address)": {
        "notice": "View the amount of dividend in wei that an address has earned in total."
      },
      "deployWrapper(uint256)": {
        "notice": "Deploys an ERC20Wrapper contract for the ERC-1155 tokens with ID `tokenID`."
      },
      "dividendOf(uint256,address,address)": {
        "notice": "View the amount of dividend in wei that an address can withdraw."
      },
      "dividendTokenDataList(uint256)": {
        "notice": "The list of tokens that can be distributed to token holders as dividend. 1-indexed."
      },
      "dividendTokenToDataID(address)": {
        "notice": "The dividend token address to its key in {dividendTokenDataList}"
      },
      "setDeployWrapperOnMint(bool)": {
        "notice": "Param setters (need metadata role)"
      },
      "withdrawnDividendOf(uint256,address,address)": {
        "notice": "View the amount of dividend in wei that an address has withdrawn."
      },
      "wrapperTransfer(address,address,uint256,uint256)": {
        "notice": "Called by an ERC20Wrapper contract to handle a transfer call."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 618,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 621,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3221,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3581,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14098,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14104,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 14106,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 15207,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_roles",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12965,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13303,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13357,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "dividendTokenDataList",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_uint256,t_struct(DividendTokenData)13346_storage)"
      },
      {
        "astId": 13359,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "dividendTokenDataListLength",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 13364,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "dividendTokenToDataID",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14060,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 16473,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "tokenIDToWrapper",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16475,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "wrapperTemplate",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 16477,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "deployWrapperOnMint",
        "offset": 20,
        "slot": "302",
        "type": "t_bool"
      },
      {
        "astId": 16479,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "baseName",
        "offset": 0,
        "slot": "303",
        "type": "t_string_storage"
      },
      {
        "astId": 16481,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "baseSymbol",
        "offset": 0,
        "slot": "304",
        "type": "t_string_storage"
      },
      {
        "astId": 16483,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "decimals",
        "offset": 0,
        "slot": "305",
        "type": "t_uint8"
      },
      {
        "astId": 16891,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 30580,
        "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
        "label": "__gap",
        "offset": 0,
        "slot": "350",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int256)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(DividendTokenData)13346_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC1155DividendToken.DividendTokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(DividendTokenData)13346_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DividendTokenData)13346_storage": {
        "encoding": "inplace",
        "label": "struct ERC1155DividendToken.DividendTokenData",
        "members": [
          {
            "astId": 13329,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "dividendToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13333,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "magnifiedDividendPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 13339,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "magnifiedDividendCorrections",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_int256))"
          },
          {
            "astId": 13345,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "withdrawnDividends",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/tokens/FundingMultitoken.sol:FundingMultitoken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}