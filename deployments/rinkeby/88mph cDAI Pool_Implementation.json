{
  "address": "0x0de73F6Ae62270fF46F070d662aBB44C8B7DD3A9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "EDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "EFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fundingID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        }
      ],
      "name": "EPayFundingInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "newDepositID",
          "type": "uint64"
        }
      ],
      "name": "ERolloverDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "paramName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "ESetParamAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "paramName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ESetParamUint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "ETopupDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "virtualTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "EWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MaxDepositPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MinDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositPeriodInSeconds",
          "type": "uint256"
        }
      ],
      "name": "calculateInterestAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "newFeeRate",
          "type": "uint256"
        }
      ],
      "name": "decreaseFeeForDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositNFT",
      "outputs": [
        {
          "internalType": "contract NFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeModel",
      "outputs": [
        {
          "internalType": "contract IFeeModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingMultitoken",
      "outputs": [
        {
          "internalType": "contract FundingMultitoken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "virtualTokenTotalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageRecordedIncomeIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "maturationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "fundingID",
              "type": "uint64"
            }
          ],
          "internalType": "struct DInterest.Deposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        }
      ],
      "name": "getFunding",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "depositID",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lastInterestPayoutTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "recordedMoneyMarketIncomeIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalPerToken",
              "type": "uint256"
            }
          ],
          "internalType": "struct DInterest.Funding",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_MaxDepositPeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_MinDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_moneyMarket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeModel",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestModel",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundingMultitoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mphMinter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestModel",
      "outputs": [
        {
          "internalType": "contract IInterestModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestOracle",
      "outputs": [
        {
          "internalType": "contract IInterestOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moneyMarket",
      "outputs": [
        {
          "internalType": "contract MoneyMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mphMinter",
      "outputs": [
        {
          "internalType": "contract MPHMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        }
      ],
      "name": "payInterestToFunders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        }
      ],
      "name": "rawSurplusOfDeposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isNegative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "surplusAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        }
      ],
      "name": "rolloverDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newDepositID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setDepositNFTBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setDepositNFTContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setFeeModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setInterestModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setInterestOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setMPHMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newValue",
          "type": "uint64"
        }
      ],
      "name": "setMaxDepositPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setMinDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "skimSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredDeposit",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "fundAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredFund",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "fundingID",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredPayInterestToFunders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredRolloverDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newDepositID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredTopupDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "virtualTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsorFeeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "v",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Sponsorable.Sponsorship",
          "name": "sponsorship",
          "type": "tuple"
        }
      ],
      "name": "sponsoredWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawnStablecoinAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stablecoin",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "surplus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isNegative",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "surplusAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "topupDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFeeOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFundedPrincipalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInterestOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositID",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "virtualTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawnStablecoinAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47dbee476cea55e045216a7471fc1d6146723cc68975f94d77232af0fa721733",
  "receipt": {
    "to": null,
    "from": "0x6FE2f50f7BC16264f51aC6fFd07C11984305b612",
    "contractAddress": "0x0de73F6Ae62270fF46F070d662aBB44C8B7DD3A9",
    "transactionIndex": 6,
    "gasUsed": "5079806",
    "logsBloom": "0x
    "blockHash": "0x086b1b914b86a44e409163bffb8de1880ab80ffeac51d3ff0edf9becdb4533ef",
    "transactionHash": "0x47dbee476cea55e045216a7471fc1d6146723cc68975f94d77232af0fa721733",
    "logs": [],
    "blockNumber": 8812905,
    "cumulativeGasUsed": "9609426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "fbe95786a37438a01254e8361288bd45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"}],\"name\":\"EDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"EFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fundingID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"name\":\"EPayFundingInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"newDepositID\",\"type\":\"uint64\"}],\"name\":\"ERolloverDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ESetParamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ESetParamUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"ETopupDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"EWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxDepositPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"calculateInterestAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"decreaseFeeForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNFT\",\"outputs\":[{\"internalType\":\"contract NFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeModel\",\"outputs\":[{\"internalType\":\"contract IFeeModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingMultitoken\",\"outputs\":[{\"internalType\":\"contract FundingMultitoken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"virtualTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageRecordedIncomeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"}],\"internalType\":\"struct DInterest.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"}],\"name\":\"getFunding\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lastInterestPayoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"recordedMoneyMarketIncomeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalPerToken\",\"type\":\"uint256\"}],\"internalType\":\"struct DInterest.Funding\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_MaxDepositPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_MinDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_moneyMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundingMultitoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mphMinter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestModel\",\"outputs\":[{\"internalType\":\"contract IInterestModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestOracle\",\"outputs\":[{\"internalType\":\"contract IInterestOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyMarket\",\"outputs\":[{\"internalType\":\"contract MoneyMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mphMinter\",\"outputs\":[{\"internalType\":\"contract MPHMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"}],\"name\":\"payInterestToFunders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"}],\"name\":\"rawSurplusOfDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isNegative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"surplusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"}],\"name\":\"rolloverDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepositID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setDepositNFTBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setDepositNFTContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setFeeModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setInterestModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setInterestOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setMPHMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newValue\",\"type\":\"uint64\"}],\"name\":\"setMaxDepositPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"skimSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredDeposit\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fundAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredFund\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"fundingID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredPayInterestToFunders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredRolloverDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newDepositID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredTopupDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"virtualTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsorFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Sponsorable.Sponsorship\",\"name\":\"sponsorship\",\"type\":\"tuple\"}],\"name\":\"sponsoredWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnStablecoinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isNegative\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"surplusAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"topupDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundedPrincipalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInterestOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositID\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"virtualTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawnStablecoinAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zefram Lou\",\"details\":\"The contract to interact with for most actions\",\"kind\":\"dev\",\"methods\":{\"calculateInterestAmount(uint256,uint256)\":{\"params\":{\"depositAmount\":\"The deposit amount, in stablecoins\",\"depositPeriodInSeconds\":\"The deposit period, in seconds\"},\"returns\":{\"interestAmount\":\"The amount of fixed-rate interest (before fees)\"}},\"deposit(uint256,uint64)\":{\"details\":\"The ERC-721 NFT representing deposit ownership is given to msg.sender\",\"params\":{\"depositAmount\":\"The amount of deposit, in stablecoin\",\"maturationTimestamp\":\"The Unix timestamp of maturation, in seconds\"},\"returns\":{\"depositID\":\"The ID of the created deposit\",\"interestAmount\":\"The amount of fixed-rate interest\"}},\"depositsLength()\":{\"returns\":{\"_0\":\"deposits.length\"}},\"fund(uint64,uint256)\":{\"details\":\"The sender receives ERC-1155 multitokens (fundingMultitoken) representing their floating-rate bonds.\",\"params\":{\"depositID\":\"The deposit whose fixed-rate interest will be funded\",\"fundAmount\":\"The amount of fixed-rate interest to fund. If it exceeds surplusOfDeposit(depositID), it will be set to the surplus value instead.\",\"fundingID\":\"The ID of the fundingMultitoken the sender received\"}},\"fundingListLength()\":{\"returns\":{\"_0\":\"fundingList.length\"}},\"getDeposit(uint64)\":{\"params\":{\"depositID\":\"The ID of the deposit\"},\"returns\":{\"_0\":\"The deposit struct\"}},\"getFunding(uint64)\":{\"params\":{\"fundingID\":\"The ID of the floating-rate bond\"},\"returns\":{\"_0\":\"The Funding struct\"}},\"initialize(uint64,uint256,address,address,address,address,address,address,address,address)\":{\"params\":{\"_MaxDepositPeriod\":\"The maximum deposit period, in seconds\",\"_MinDepositAmount\":\"The minimum deposit amount, in stablecoins\",\"_depositNFT\":\"Address of the NFT representing ownership of deposits (owner must be set to this DInterest contract)\",\"_feeModel\":\"Address of the FeeModel contract that determines how fees are charged\",\"_fundingMultitoken\":\"Address of the ERC1155 multitoken representing ownership of fundings (this DInterest contract must have the minter-burner role)\",\"_interestModel\":\"Address of the InterestModel contract that determines how much interest to offer\",\"_interestOracle\":\"Address of the InterestOracle contract that provides the average interest rate\",\"_moneyMarket\":\"Address of MoneyMarket that's used for generating interest (owner must be set to this DInterest contract)\",\"_mphMinter\":\"Address of the contract for handling minting MPH to users\",\"_stablecoin\":\"Address of the stablecoin used to store funds\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payInterestToFunders(uint64)\":{\"params\":{\"fundingID\":\"The ID of the floating-rate bond\"},\"returns\":{\"interestAmount\":\"The amount of interest distributed, in stablecoins\"}},\"rawSurplusOfDeposit(uint64)\":{\"params\":{\"depositID\":\"The ID of the deposit\"},\"returns\":{\"isNegative\":\"True if the surplus is negative, false otherwise\",\"surplusAmount\":\"The absolute value of the surplus, in stablecoins\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescue(address,address)\":{\"details\":\"Need to implement {_authorizeRescue} to do access-control for this function.\",\"params\":{\"target\":\"The address to send the tokens to\",\"token\":\"The ERC20 token to rescue\"}},\"rolloverDeposit(uint64,uint64)\":{\"params\":{\"depositID\":\"The deposit to roll over\",\"maturationTimestamp\":\"The Unix timestamp of the new deposit, in seconds\"},\"returns\":{\"newDepositID\":\"The ID of the new deposit\"}},\"surplus()\":{\"returns\":{\"isNegative\":\"True if the surplus is negative, false otherwise\",\"surplusAmount\":\"The absolute value of the surplus, in stablecoins\"}},\"topupDeposit(uint64,uint256)\":{\"details\":\"The interest rate for the topped up funds will be the current oracle rate.\",\"params\":{\"depositAmount\":\"The amount to top up, in stablecoin\",\"depositID\":\"The deposit to top up\"},\"returns\":{\"interestAmount\":\"The amount of interest that will be earned by the topped up funds at maturation\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint64,uint256,bool)\":{\"details\":\"Virtual tokens behave like zero coupon bonds, after maturation withdrawing 1 virtual token yields 1 stablecoin. The total supply is given by deposit.virtualTokenTotalSupply\",\"params\":{\"depositID\":\"the deposit to withdraw from\",\"early\":\"True if intend to withdraw before maturation, false otherwise\",\"virtualTokenAmount\":\"the amount of virtual tokens to withdraw\"},\"returns\":{\"withdrawnStablecoinAmount\":\"the amount of stablecoins withdrawn\"}}},\"stateVariables\":{\"EXTRA_PRECISION\":{\"details\":\"used for sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex\"},\"MaxDepositPeriod\":{\"details\":\"Maximum deposit period, in seconds\"},\"MinDepositAmount\":{\"details\":\"Minimum deposit amount, in stablecoins\"},\"ULTRA_PRECISION\":{\"details\":\"used for funding.principalPerToken\"}},\"title\":\"DeLorean Interest -- It's coming back from the future!\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateInterestAmount(uint256,uint256)\":{\"notice\":\"Computes the amount of fixed-rate interest (before fees) that will be given to a deposit of `depositAmount` stablecoins that matures in `depositPeriodInSeconds` seconds.\"},\"deposit(uint256,uint64)\":{\"notice\":\"Create a deposit using `depositAmount` stablecoin that matures at timestamp `maturationTimestamp`.\"},\"depositsLength()\":{\"notice\":\"Returns the total number of deposits.\"},\"fund(uint64,uint256)\":{\"notice\":\"Funds the fixed-rate interest of the deposit with ID `depositID`. In exchange, the funder receives the future floating-rate interest generated by the portion of the deposit whose interest was funded.\"},\"fundingListLength()\":{\"notice\":\"Returns the total number of floating-rate bonds.\"},\"getDeposit(uint64)\":{\"notice\":\"Returns the Deposit struct associated with the deposit with ID `depositID`.\"},\"getFunding(uint64)\":{\"notice\":\"Returns the Funding struct associated with the floating-rate bond with ID `fundingID`.\"},\"payInterestToFunders(uint64)\":{\"notice\":\"Distributes the floating-rate interest accrued by a deposit to the floating-rate bond holders.\"},\"rawSurplusOfDeposit(uint64)\":{\"notice\":\"Computes the raw surplus of a deposit, which is the current value of the deposit in the money market minus the amount owed (deposit + interest + fee). The deposit's funding status is not considered here, meaning even if a deposit's fixed-rate interest is fully funded, it likely will still have a non-zero surplus.\"},\"rescue(address,address)\":{\"notice\":\"Rescues ERC20 tokens sent to the contract in error.\"},\"rolloverDeposit(uint64,uint64)\":{\"notice\":\"Withdraw all funds from deposit with ID `depositID` and use them to create a new deposit that matures at time `maturationTimestamp`\"},\"setFeeModel(address)\":{\"notice\":\"Param setters (only callable by the owner)\"},\"sponsoredDeposit(uint256,uint64,(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32))\":{\"notice\":\"Sponsored action functions\"},\"surplus()\":{\"notice\":\"Computes the pool's overall surplus, which is the value of its holdings in the `moneyMarket` minus the amount owed to depositors, funders, and the fee beneficiary.\"},\"topupDeposit(uint64,uint256)\":{\"notice\":\"Add `depositAmount` stablecoin to the existing deposit with ID `depositID`.\"},\"withdraw(uint64,uint256,bool)\":{\"notice\":\"Withdraws funds from the deposit with ID `depositID`.\"}},\"notice\":\"The main pool contract for fixed-rate deposits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DInterest.sol\":\"DInterest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4dc6dad1fc53f05013cffc92c2c39ec795bfca13776488d68b9f8cedd1464dd3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xd841c561258151c3c22f05feb68c702fc414b112606bd72b848e8a65af128c30\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa22cd3d499a04af4dbcc1b15877b69b611004ff02a2ab121e42226a6b6a88ab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x9c2d7425f3343ea340d6ea67e9d90109d4d846bb013c2572096ec88c9e74946b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x8d4a0f2b5b760b5e2c19ed3c108d83897a4dfd5bfed97a93867918df19191e5e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        _approve(account, _msgSender(), currentAllowance - amount);\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf843e6be146e6ea9334ae506376a517968aeee7807fdcbc10a8e13bcdaebf546\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Upgradeable).interfaceId\\n            || interfaceId == type(IERC721MetadataUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2ab92ebd3f4d4d85f30b39bd678ec3489e00aadd0a432c7a0ffa98adc2799004\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x33620beff0655c5e728a72fff76fb6ce2dc32fc6b61eb8e435b12ed1adf31525\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9ef7f2874f4a491f253a81eb4c5b9a7b6467a287aa0c32ac3dd684260a3cd7ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721URIStorage_init_unchained();\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal initializer {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2635a6f67529b35307754379ae59fcdf274286e73f220f1bff67038a0acf1a13\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x64581a092c059ab0cb74f473545e379b8a88f36a6a57f805515ef8c6ae061847\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract MulticallUpgradeable is Initializable {\\n    function __Multicall_init() internal initializer {\\n        __Multicall_init_unchained();\\n    }\\n\\n    function __Multicall_init_unchained() internal initializer {\\n    }\\n    /**\\n    * @dev Receives and executes a batch of function calls on this contract.\\n    */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint i = 0; i < data.length; i++) {\\n            results[i] = _functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9486e7997aa571a043ddfc2bc0826dc48b0ea37dd02d2452db275e84c8eabd12\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x97ae7d1909acff532e532ac63455c5222dae87c2737aefdce3db9684fd8ab93f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xc683c1c91d9e029d6a58c35dbd83762805fe8eb328e2530e3628adf72d63167d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n        } else if (signature.length == 64) {\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let vs := mload(add(signature, 0x40))\\n                r := mload(add(signature, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x2b7a01bbc90040fd4a48bc143ac5a192da3b9bfc559ac08a78eaca40bf49e436\",\"license\":\"MIT\"},\"contracts/DInterest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"./libs/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    MulticallUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/MulticallUpgradeable.sol\\\";\\nimport {MoneyMarket} from \\\"./moneymarkets/MoneyMarket.sol\\\";\\nimport {IFeeModel} from \\\"./models/fee/IFeeModel.sol\\\";\\nimport {IInterestModel} from \\\"./models/interest/IInterestModel.sol\\\";\\nimport {NFT} from \\\"./tokens/NFT.sol\\\";\\nimport {FundingMultitoken} from \\\"./tokens/FundingMultitoken.sol\\\";\\nimport {MPHMinter} from \\\"./rewards/MPHMinter.sol\\\";\\nimport {IInterestOracle} from \\\"./models/interest-oracle/IInterestOracle.sol\\\";\\nimport {DecMath} from \\\"./libs/DecMath.sol\\\";\\nimport {Rescuable} from \\\"./libs/Rescuable.sol\\\";\\nimport {Sponsorable} from \\\"./libs/Sponsorable.sol\\\";\\nimport {console} from \\\"hardhat/console.sol\\\";\\n\\n/**\\n    @title DeLorean Interest -- It's coming back from the future!\\n    @author Zefram Lou\\n    @notice The main pool contract for fixed-rate deposits\\n    @dev The contract to interact with for most actions\\n */\\ncontract DInterest is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    Rescuable,\\n    MulticallUpgradeable,\\n    Sponsorable\\n{\\n    using SafeERC20 for ERC20;\\n    using AddressUpgradeable for address;\\n    using DecMath for uint256;\\n\\n    // Constants\\n    uint256 internal constant PRECISION = 10**18;\\n    /**\\n        @dev used for sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex\\n     */\\n    uint256 internal constant EXTRA_PRECISION = 10**27;\\n    /**\\n        @dev used for funding.principalPerToken\\n     */\\n    uint256 internal constant ULTRA_PRECISION = 2**128;\\n\\n    // User deposit data\\n    // Each deposit has an ID used in the depositNFT, which is equal to its index in `deposits` plus 1\\n    struct Deposit {\\n        uint256 virtualTokenTotalSupply; // depositAmount + interestAmount, behaves like a zero coupon bond\\n        uint256 interestRate; // interestAmount = interestRate * depositAmount\\n        uint256 feeRate; // feeAmount = feeRate * depositAmount\\n        uint256 averageRecordedIncomeIndex; // Average income index at time of deposit, used for computing deposit surplus\\n        uint64 maturationTimestamp; // Unix timestamp after which the deposit may be withdrawn, in seconds\\n        uint64 fundingID; // The ID of the associated Funding struct. 0 if not funded.\\n    }\\n    Deposit[] internal deposits;\\n\\n    // Funding data\\n    // Each funding has an ID used in the fundingMultitoken, which is equal to its index in `fundingList` plus 1\\n    struct Funding {\\n        uint64 depositID; // The ID of the associated Deposit struct.\\n        uint64 lastInterestPayoutTimestamp; // Unix timestamp of the most recent interest payout, in seconds\\n        uint256 recordedMoneyMarketIncomeIndex; // the income index at the last update (creation or withdrawal)\\n        uint256 principalPerToken; // The amount of stablecoins that's earning interest for you per funding token you own. Scaled to 18 decimals regardless of stablecoin decimals.\\n    }\\n    Funding[] internal fundingList;\\n    // the sum of (recordedFundedPrincipalAmount / recordedMoneyMarketIncomeIndex) of all fundings\\n    uint256 public sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex;\\n\\n    // Params\\n    /**\\n        @dev Maximum deposit period, in seconds\\n     */\\n    uint64 public MaxDepositPeriod;\\n    /**\\n        @dev Minimum deposit amount, in stablecoins\\n     */\\n    uint256 public MinDepositAmount;\\n\\n    // Global variables\\n    uint256 public totalDeposit;\\n    uint256 public totalInterestOwed;\\n    uint256 public totalFeeOwed;\\n    uint256 public totalFundedPrincipalAmount;\\n\\n    // External smart contracts\\n    MoneyMarket public moneyMarket;\\n    ERC20 public stablecoin;\\n    IFeeModel public feeModel;\\n    IInterestModel public interestModel;\\n    IInterestOracle public interestOracle;\\n    NFT public depositNFT;\\n    FundingMultitoken public fundingMultitoken;\\n    MPHMinter public mphMinter;\\n\\n    // Events\\n    event EDeposit(\\n        address indexed sender,\\n        uint256 indexed depositID,\\n        uint256 depositAmount,\\n        uint256 interestAmount,\\n        uint256 feeAmount,\\n        uint64 maturationTimestamp\\n    );\\n    event ETopupDeposit(\\n        address indexed sender,\\n        uint64 indexed depositID,\\n        uint256 depositAmount,\\n        uint256 interestAmount,\\n        uint256 feeAmount\\n    );\\n    event ERolloverDeposit(\\n        address indexed sender,\\n        uint64 indexed depositID,\\n        uint64 indexed newDepositID\\n    );\\n    event EWithdraw(\\n        address indexed sender,\\n        uint256 indexed depositID,\\n        bool indexed early,\\n        uint256 virtualTokenAmount,\\n        uint256 feeAmount\\n    );\\n    event EFund(\\n        address indexed sender,\\n        uint64 indexed fundingID,\\n        uint256 fundAmount,\\n        uint256 tokenAmount\\n    );\\n    event EPayFundingInterest(\\n        uint256 indexed fundingID,\\n        uint256 interestAmount,\\n        uint256 refundAmount\\n    );\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n    event ESetParamUint(\\n        address indexed sender,\\n        string indexed paramName,\\n        uint256 newValue\\n    );\\n\\n    function __DInterest_init(\\n        uint64 _MaxDepositPeriod,\\n        uint256 _MinDepositAmount,\\n        address _moneyMarket,\\n        address _stablecoin,\\n        address _feeModel,\\n        address _interestModel,\\n        address _interestOracle,\\n        address _depositNFT,\\n        address _fundingMultitoken,\\n        address _mphMinter\\n    ) internal initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n\\n        moneyMarket = MoneyMarket(_moneyMarket);\\n        stablecoin = ERC20(_stablecoin);\\n        feeModel = IFeeModel(_feeModel);\\n        interestModel = IInterestModel(_interestModel);\\n        interestOracle = IInterestOracle(_interestOracle);\\n        depositNFT = NFT(_depositNFT);\\n        fundingMultitoken = FundingMultitoken(_fundingMultitoken);\\n        mphMinter = MPHMinter(_mphMinter);\\n        MaxDepositPeriod = _MaxDepositPeriod;\\n        MinDepositAmount = _MinDepositAmount;\\n    }\\n\\n    /**\\n        @param _MaxDepositPeriod The maximum deposit period, in seconds\\n        @param _MinDepositAmount The minimum deposit amount, in stablecoins\\n        @param _moneyMarket Address of MoneyMarket that's used for generating interest (owner must be set to this DInterest contract)\\n        @param _stablecoin Address of the stablecoin used to store funds\\n        @param _feeModel Address of the FeeModel contract that determines how fees are charged\\n        @param _interestModel Address of the InterestModel contract that determines how much interest to offer\\n        @param _interestOracle Address of the InterestOracle contract that provides the average interest rate\\n        @param _depositNFT Address of the NFT representing ownership of deposits (owner must be set to this DInterest contract)\\n        @param _fundingMultitoken Address of the ERC1155 multitoken representing ownership of fundings (this DInterest contract must have the minter-burner role)\\n        @param _mphMinter Address of the contract for handling minting MPH to users\\n     */\\n    function initialize(\\n        uint64 _MaxDepositPeriod,\\n        uint256 _MinDepositAmount,\\n        address _moneyMarket,\\n        address _stablecoin,\\n        address _feeModel,\\n        address _interestModel,\\n        address _interestOracle,\\n        address _depositNFT,\\n        address _fundingMultitoken,\\n        address _mphMinter\\n    ) external virtual initializer {\\n        __DInterest_init(\\n            _MaxDepositPeriod,\\n            _MinDepositAmount,\\n            _moneyMarket,\\n            _stablecoin,\\n            _feeModel,\\n            _interestModel,\\n            _interestOracle,\\n            _depositNFT,\\n            _fundingMultitoken,\\n            _mphMinter\\n        );\\n    }\\n\\n    /**\\n        Public action functions\\n     */\\n\\n    /**\\n        @notice Create a deposit using `depositAmount` stablecoin that matures at timestamp `maturationTimestamp`.\\n        @dev The ERC-721 NFT representing deposit ownership is given to msg.sender\\n        @param depositAmount The amount of deposit, in stablecoin\\n        @param maturationTimestamp The Unix timestamp of maturation, in seconds\\n        @return depositID The ID of the created deposit\\n        @return interestAmount The amount of fixed-rate interest\\n     */\\n    function deposit(uint256 depositAmount, uint64 maturationTimestamp)\\n        external\\n        nonReentrant\\n        returns (uint64 depositID, uint256 interestAmount)\\n    {\\n        return _deposit(msg.sender, depositAmount, maturationTimestamp, false);\\n    }\\n\\n    /**\\n        @notice Add `depositAmount` stablecoin to the existing deposit with ID `depositID`.\\n        @dev The interest rate for the topped up funds will be the current oracle rate.\\n        @param depositID The deposit to top up\\n        @param depositAmount The amount to top up, in stablecoin\\n        @return interestAmount The amount of interest that will be earned by the topped up funds at maturation\\n     */\\n    function topupDeposit(uint64 depositID, uint256 depositAmount)\\n        external\\n        nonReentrant\\n        returns (uint256 interestAmount)\\n    {\\n        return _topupDeposit(msg.sender, depositID, depositAmount);\\n    }\\n\\n    /**\\n        @notice Withdraw all funds from deposit with ID `depositID` and use them\\n                to create a new deposit that matures at time `maturationTimestamp`\\n        @param depositID The deposit to roll over\\n        @param maturationTimestamp The Unix timestamp of the new deposit, in seconds\\n        @return newDepositID The ID of the new deposit\\n     */\\n    function rolloverDeposit(uint64 depositID, uint64 maturationTimestamp)\\n        external\\n        nonReentrant\\n        returns (uint256 newDepositID, uint256 interestAmount)\\n    {\\n        return _rolloverDeposit(msg.sender, depositID, maturationTimestamp);\\n    }\\n\\n    /**\\n        @notice Withdraws funds from the deposit with ID `depositID`.\\n        @dev Virtual tokens behave like zero coupon bonds, after maturation withdrawing 1 virtual token\\n             yields 1 stablecoin. The total supply is given by deposit.virtualTokenTotalSupply\\n        @param depositID the deposit to withdraw from\\n        @param virtualTokenAmount the amount of virtual tokens to withdraw\\n        @param early True if intend to withdraw before maturation, false otherwise\\n        @return withdrawnStablecoinAmount the amount of stablecoins withdrawn\\n     */\\n    function withdraw(\\n        uint64 depositID,\\n        uint256 virtualTokenAmount,\\n        bool early\\n    ) external nonReentrant returns (uint256 withdrawnStablecoinAmount) {\\n        return\\n            _withdraw(msg.sender, depositID, virtualTokenAmount, early, false);\\n    }\\n\\n    /**\\n        @notice Funds the fixed-rate interest of the deposit with ID `depositID`.\\n                In exchange, the funder receives the future floating-rate interest\\n                generated by the portion of the deposit whose interest was funded.\\n        @dev The sender receives ERC-1155 multitokens (fundingMultitoken) representing\\n             their floating-rate bonds.\\n        @param depositID The deposit whose fixed-rate interest will be funded\\n        @param fundAmount The amount of fixed-rate interest to fund.\\n                          If it exceeds surplusOfDeposit(depositID), it will be set to\\n                          the surplus value instead.\\n        @param fundingID The ID of the fundingMultitoken the sender received\\n     */\\n    function fund(uint64 depositID, uint256 fundAmount)\\n        external\\n        nonReentrant\\n        returns (uint64 fundingID)\\n    {\\n        return _fund(msg.sender, depositID, fundAmount);\\n    }\\n\\n    /**\\n        @notice Distributes the floating-rate interest accrued by a deposit to the\\n                floating-rate bond holders.\\n        @param fundingID The ID of the floating-rate bond\\n        @return interestAmount The amount of interest distributed, in stablecoins\\n     */\\n    function payInterestToFunders(uint64 fundingID)\\n        external\\n        nonReentrant\\n        returns (uint256 interestAmount)\\n    {\\n        return _payInterestToFunders(fundingID);\\n    }\\n\\n    /**\\n        Sponsored action functions\\n     */\\n\\n    function sponsoredDeposit(\\n        uint256 depositAmount,\\n        uint64 maturationTimestamp,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredDeposit.selector,\\n            abi.encode(depositAmount, maturationTimestamp)\\n        )\\n        returns (uint64 depositID, uint256 interestAmount)\\n    {\\n        return\\n            _deposit(\\n                sponsorship.sender,\\n                depositAmount,\\n                maturationTimestamp,\\n                false\\n            );\\n    }\\n\\n    function sponsoredTopupDeposit(\\n        uint64 depositID,\\n        uint256 depositAmount,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredTopupDeposit.selector,\\n            abi.encode(depositID, depositAmount)\\n        )\\n        returns (uint256 interestAmount)\\n    {\\n        return _topupDeposit(sponsorship.sender, depositID, depositAmount);\\n    }\\n\\n    function sponsoredRolloverDeposit(\\n        uint64 depositID,\\n        uint64 maturationTimestamp,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredRolloverDeposit.selector,\\n            abi.encode(depositID, maturationTimestamp)\\n        )\\n        returns (uint256 newDepositID, uint256 interestAmount)\\n    {\\n        return\\n            _rolloverDeposit(\\n                sponsorship.sender,\\n                depositID,\\n                maturationTimestamp\\n            );\\n    }\\n\\n    function sponsoredWithdraw(\\n        uint64 depositID,\\n        uint256 virtualTokenAmount,\\n        bool early,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredWithdraw.selector,\\n            abi.encode(depositID, virtualTokenAmount, early)\\n        )\\n        returns (uint256 withdrawnStablecoinAmount)\\n    {\\n        return\\n            _withdraw(\\n                sponsorship.sender,\\n                depositID,\\n                virtualTokenAmount,\\n                early,\\n                false\\n            );\\n    }\\n\\n    function sponsoredFund(\\n        uint64 depositID,\\n        uint256 fundAmount,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredFund.selector,\\n            abi.encode(depositID, fundAmount)\\n        )\\n        returns (uint64 fundingID)\\n    {\\n        return _fund(sponsorship.sender, depositID, fundAmount);\\n    }\\n\\n    function sponsoredPayInterestToFunders(\\n        uint64 fundingID,\\n        Sponsorship calldata sponsorship\\n    )\\n        external\\n        nonReentrant\\n        sponsored(\\n            sponsorship,\\n            this.sponsoredPayInterestToFunders.selector,\\n            abi.encode(fundingID)\\n        )\\n        returns (uint256 interestAmount)\\n    {\\n        return _payInterestToFunders(fundingID);\\n    }\\n\\n    /**\\n        Public getter functions\\n     */\\n\\n    /**\\n        @notice Computes the amount of fixed-rate interest (before fees) that\\n                will be given to a deposit of `depositAmount` stablecoins that\\n                matures in `depositPeriodInSeconds` seconds.\\n        @param depositAmount The deposit amount, in stablecoins\\n        @param depositPeriodInSeconds The deposit period, in seconds\\n        @return interestAmount The amount of fixed-rate interest (before fees)\\n     */\\n    function calculateInterestAmount(\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds\\n    ) public virtual returns (uint256 interestAmount) {\\n        (, uint256 moneyMarketInterestRatePerSecond) =\\n            interestOracle.updateAndQuery();\\n        (bool surplusIsNegative, uint256 surplusAmount) = surplus();\\n\\n        return\\n            interestModel.calculateInterestAmount(\\n                depositAmount,\\n                depositPeriodInSeconds,\\n                moneyMarketInterestRatePerSecond,\\n                surplusIsNegative,\\n                surplusAmount\\n            );\\n    }\\n\\n    /**\\n        @notice Computes the pool's overall surplus, which is the value of its holdings\\n                in the `moneyMarket` minus the amount owed to depositors, funders, and\\n                the fee beneficiary.\\n        @return isNegative True if the surplus is negative, false otherwise\\n        @return surplusAmount The absolute value of the surplus, in stablecoins\\n     */\\n    function surplus()\\n        public\\n        virtual\\n        returns (bool isNegative, uint256 surplusAmount)\\n    {\\n        // compute totalInterestOwedToFunders\\n        uint256 currentValue =\\n            (moneyMarket.incomeIndex() *\\n                sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex) /\\n                EXTRA_PRECISION;\\n        uint256 initialValue = totalFundedPrincipalAmount;\\n        uint256 totalInterestOwedToFunders;\\n        if (currentValue > initialValue) {\\n            totalInterestOwedToFunders = currentValue - initialValue;\\n        }\\n\\n        // compute surplus\\n        uint256 totalValue = moneyMarket.totalValue();\\n        uint256 totalOwed =\\n            totalDeposit +\\n                totalInterestOwed +\\n                totalFeeOwed +\\n                totalInterestOwedToFunders;\\n        if (totalValue >= totalOwed) {\\n            // Locked value more than owed deposits, positive surplus\\n            isNegative = false;\\n            surplusAmount = totalValue - totalOwed;\\n        } else {\\n            // Locked value less than owed deposits, negative surplus\\n            isNegative = true;\\n            surplusAmount = totalOwed - totalValue;\\n        }\\n    }\\n\\n    /**\\n        @notice Computes the raw surplus of a deposit, which is the current value of the\\n                deposit in the money market minus the amount owed (deposit + interest + fee).\\n                The deposit's funding status is not considered here, meaning even if a deposit's\\n                fixed-rate interest is fully funded, it likely will still have a non-zero surplus.\\n        @param depositID The ID of the deposit\\n        @return isNegative True if the surplus is negative, false otherwise\\n        @return surplusAmount The absolute value of the surplus, in stablecoins\\n     */\\n    function rawSurplusOfDeposit(uint64 depositID)\\n        public\\n        virtual\\n        returns (bool isNegative, uint256 surplusAmount)\\n    {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n        uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\\n        uint256 depositTokenTotalSupply = depositEntry.virtualTokenTotalSupply;\\n        uint256 depositAmount =\\n            depositTokenTotalSupply.decdiv(\\n                depositEntry.interestRate + PRECISION\\n            );\\n        uint256 interestAmount = depositTokenTotalSupply - depositAmount;\\n        uint256 feeAmount = depositAmount.decmul(depositEntry.feeRate);\\n        uint256 currentDepositValue =\\n            (depositAmount * currentMoneyMarketIncomeIndex) /\\n                depositEntry.averageRecordedIncomeIndex;\\n        uint256 owed = depositAmount + interestAmount + feeAmount;\\n        if (currentDepositValue >= owed) {\\n            // Locked value more than owed deposits, positive surplus\\n            isNegative = false;\\n            surplusAmount = currentDepositValue - owed;\\n        } else {\\n            // Locked value less than owed deposits, negative surplus\\n            isNegative = true;\\n            surplusAmount = owed - currentDepositValue;\\n        }\\n    }\\n\\n    /**\\n        @notice Returns the total number of deposits.\\n        @return deposits.length\\n     */\\n    function depositsLength() external view returns (uint256) {\\n        return deposits.length;\\n    }\\n\\n    /**\\n        @notice Returns the total number of floating-rate bonds.\\n        @return fundingList.length\\n     */\\n    function fundingListLength() external view returns (uint256) {\\n        return fundingList.length;\\n    }\\n\\n    /**\\n        @notice Returns the Deposit struct associated with the deposit with ID\\n                `depositID`.\\n        @param depositID The ID of the deposit\\n        @return The deposit struct\\n     */\\n    function getDeposit(uint64 depositID)\\n        external\\n        view\\n        returns (Deposit memory)\\n    {\\n        return deposits[depositID - 1];\\n    }\\n\\n    /**\\n        @notice Returns the Funding struct associated with the floating-rate bond with ID\\n                `fundingID`.\\n        @param fundingID The ID of the floating-rate bond\\n        @return The Funding struct\\n     */\\n    function getFunding(uint64 fundingID)\\n        external\\n        view\\n        returns (Funding memory)\\n    {\\n        return fundingList[fundingID - 1];\\n    }\\n\\n    /**\\n        Internal action functions\\n     */\\n\\n    /**\\n        @dev See {deposit}\\n     */\\n    function _deposit(\\n        address sender,\\n        uint256 depositAmount,\\n        uint64 maturationTimestamp,\\n        bool rollover\\n    ) internal virtual returns (uint64 depositID, uint256 interestAmount) {\\n        (depositID, interestAmount) = _depositRecordData(\\n            sender,\\n            depositAmount,\\n            maturationTimestamp\\n        );\\n        _depositTransferFunds(sender, depositAmount, rollover);\\n    }\\n\\n    function _depositRecordData(\\n        address sender,\\n        uint256 depositAmount,\\n        uint64 maturationTimestamp\\n    ) internal virtual returns (uint64 depositID, uint256 interestAmount) {\\n        // Ensure input is valid\\n        require(depositAmount >= MinDepositAmount, \\\"DInterest: BAD_AMOUNT\\\");\\n        uint256 depositPeriod = maturationTimestamp - block.timestamp;\\n        require(depositPeriod <= MaxDepositPeriod, \\\"DInterest: BAD_TIME\\\");\\n\\n        // Calculate interest\\n        interestAmount = calculateInterestAmount(depositAmount, depositPeriod);\\n        require(interestAmount > 0, \\\"DInterest: BAD_INTEREST\\\");\\n\\n        // Calculate fee\\n        uint256 feeAmount =\\n            feeModel.getInterestFeeAmount(address(this), interestAmount);\\n        interestAmount -= feeAmount;\\n\\n        // Record deposit data\\n        deposits.push(\\n            Deposit({\\n                virtualTokenTotalSupply: depositAmount + interestAmount,\\n                interestRate: interestAmount.decdiv(depositAmount),\\n                feeRate: feeAmount.decdiv(depositAmount),\\n                maturationTimestamp: maturationTimestamp,\\n                fundingID: 0,\\n                averageRecordedIncomeIndex: moneyMarket.incomeIndex()\\n            })\\n        );\\n        require(deposits.length <= type(uint64).max, \\\"DInterest: OVERFLOW\\\");\\n        depositID = uint64(deposits.length);\\n\\n        // Update global values\\n        totalDeposit += depositAmount;\\n        totalInterestOwed += interestAmount;\\n        totalFeeOwed += feeAmount;\\n\\n        // Mint depositNFT\\n        depositNFT.mint(sender, depositID);\\n\\n        // Emit event\\n        emit EDeposit(\\n            sender,\\n            depositID,\\n            depositAmount,\\n            interestAmount,\\n            feeAmount,\\n            maturationTimestamp\\n        );\\n\\n        // Vest MPH to sender\\n        mphMinter.createVestForDeposit(sender, depositID);\\n    }\\n\\n    function _depositTransferFunds(\\n        address sender,\\n        uint256 depositAmount,\\n        bool rollover\\n    ) internal virtual {\\n        // Only transfer funds from sender if it's not a rollover\\n        // because if it is the funds are already in the contract\\n        if (!rollover) {\\n            // Transfer `depositAmount` stablecoin to DInterest\\n            stablecoin.safeTransferFrom(sender, address(this), depositAmount);\\n\\n            // Lend `depositAmount` stablecoin to money market\\n            stablecoin.safeApprove(address(moneyMarket), depositAmount);\\n            moneyMarket.deposit(depositAmount);\\n        }\\n    }\\n\\n    /**\\n        @dev See {topupDeposit}\\n     */\\n    function _topupDeposit(\\n        address sender,\\n        uint64 depositID,\\n        uint256 depositAmount\\n    ) internal virtual returns (uint256 interestAmount) {\\n        interestAmount = _topupDepositRecordData(\\n            sender,\\n            depositID,\\n            depositAmount\\n        );\\n        _topupDepositTransferFunds(sender, depositAmount);\\n    }\\n\\n    function _topupDepositRecordData(\\n        address sender,\\n        uint64 depositID,\\n        uint256 depositAmount\\n    ) internal virtual returns (uint256 interestAmount) {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n        require(\\n            depositNFT.ownerOf(depositID) == sender,\\n            \\\"DInterest: NOT_OWNER\\\"\\n        );\\n\\n        // underflow check prevents topups after maturation\\n        uint256 depositPeriod =\\n            depositEntry.maturationTimestamp - block.timestamp;\\n\\n        // Calculate interest\\n        interestAmount = calculateInterestAmount(depositAmount, depositPeriod);\\n        require(interestAmount > 0, \\\"DInterest: BAD_INTEREST\\\");\\n\\n        // Calculate fee\\n        uint256 feeAmount =\\n            feeModel.getInterestFeeAmount(address(this), interestAmount);\\n        interestAmount -= feeAmount;\\n\\n        // Update deposit struct\\n        uint256 interestRate = depositEntry.interestRate;\\n        uint256 currentDepositAmount =\\n            depositEntry.virtualTokenTotalSupply.decdiv(\\n                interestRate + PRECISION\\n            );\\n        depositEntry.virtualTokenTotalSupply += depositAmount + interestAmount;\\n        depositEntry.interestRate =\\n            (PRECISION * interestAmount + currentDepositAmount * interestRate) /\\n            (depositAmount + currentDepositAmount);\\n        depositEntry.feeRate =\\n            (PRECISION *\\n                feeAmount +\\n                currentDepositAmount *\\n                depositEntry.feeRate) /\\n            (depositAmount + currentDepositAmount);\\n        uint256 sumOfRecordedDepositAmountDivRecordedIncomeIndex =\\n            (currentDepositAmount * EXTRA_PRECISION) /\\n                depositEntry.averageRecordedIncomeIndex +\\n                (depositAmount * EXTRA_PRECISION) /\\n                moneyMarket.incomeIndex();\\n        depositEntry.averageRecordedIncomeIndex =\\n            ((depositAmount + currentDepositAmount) * EXTRA_PRECISION) /\\n            sumOfRecordedDepositAmountDivRecordedIncomeIndex;\\n\\n        // Update global values\\n        totalDeposit += depositAmount;\\n        totalInterestOwed += interestAmount;\\n        totalFeeOwed += feeAmount;\\n\\n        // Emit event\\n        emit ETopupDeposit(\\n            sender,\\n            depositID,\\n            depositAmount,\\n            interestAmount,\\n            feeAmount\\n        );\\n\\n        // Update vest\\n        mphMinter.updateVestForDeposit(\\n            depositID,\\n            currentDepositAmount,\\n            depositAmount\\n        );\\n    }\\n\\n    function _topupDepositTransferFunds(address sender, uint256 depositAmount)\\n        internal\\n        virtual\\n    {\\n        // Transfer `depositAmount` stablecoin to DInterest\\n        stablecoin.safeTransferFrom(sender, address(this), depositAmount);\\n\\n        // Lend `depositAmount` stablecoin to money market\\n        stablecoin.safeApprove(address(moneyMarket), depositAmount);\\n        moneyMarket.deposit(depositAmount);\\n    }\\n\\n    /**\\n        @dev See {rolloverDeposit}\\n     */\\n    function _rolloverDeposit(\\n        address sender,\\n        uint64 depositID,\\n        uint64 maturationTimestamp\\n    ) internal virtual returns (uint64 newDepositID, uint256 interestAmount) {\\n        // withdraw from existing deposit\\n        uint256 withdrawnStablecoinAmount =\\n            _withdraw(sender, depositID, type(uint256).max, false, true);\\n\\n        // deposit funds into a new deposit\\n        (newDepositID, interestAmount) = _deposit(\\n            sender,\\n            withdrawnStablecoinAmount,\\n            maturationTimestamp,\\n            true\\n        );\\n\\n        emit ERolloverDeposit(sender, depositID, newDepositID);\\n    }\\n\\n    /**\\n        @dev See {withdraw}\\n        @param rollover True if being called from {_rolloverDeposit}, false otherwise\\n     */\\n    function _withdraw(\\n        address sender,\\n        uint64 depositID,\\n        uint256 virtualTokenAmount,\\n        bool early,\\n        bool rollover\\n    ) internal virtual returns (uint256 withdrawnStablecoinAmount) {\\n        (\\n            uint256 withdrawAmount,\\n            uint256 feeAmount,\\n            uint256 fundingInterestAmount,\\n            uint256 refundAmount\\n        ) = _withdrawRecordData(sender, depositID, virtualTokenAmount, early);\\n        return\\n            _withdrawTransferFunds(\\n                sender,\\n                _getDeposit(depositID).fundingID,\\n                withdrawAmount,\\n                feeAmount,\\n                fundingInterestAmount,\\n                refundAmount,\\n                rollover\\n            );\\n    }\\n\\n    function _withdrawRecordData(\\n        address sender,\\n        uint64 depositID,\\n        uint256 virtualTokenAmount,\\n        bool early\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256 withdrawAmount,\\n            uint256 feeAmount,\\n            uint256 fundingInterestAmount,\\n            uint256 refundAmount\\n        )\\n    {\\n        // Verify input\\n        require(virtualTokenAmount > 0, \\\"DInterest: BAD_AMOUNT\\\");\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n        if (early) {\\n            require(\\n                block.timestamp < depositEntry.maturationTimestamp,\\n                \\\"DInterest: MATURE\\\"\\n            );\\n        } else {\\n            require(\\n                block.timestamp >= depositEntry.maturationTimestamp,\\n                \\\"DInterest: IMMATURE\\\"\\n            );\\n        }\\n        require(\\n            depositNFT.ownerOf(depositID) == sender,\\n            \\\"DInterest: NOT_OWNER\\\"\\n        );\\n\\n        // Check if withdrawing all funds\\n        {\\n            uint256 virtualTokenTotalSupply =\\n                depositEntry.virtualTokenTotalSupply;\\n            if (virtualTokenAmount > virtualTokenTotalSupply) {\\n                virtualTokenAmount = virtualTokenTotalSupply;\\n            }\\n        }\\n\\n        // Compute token amounts\\n        uint256 interestRate = depositEntry.interestRate;\\n        uint256 feeRate = depositEntry.feeRate;\\n        uint256 depositAmount =\\n            virtualTokenAmount.decdiv(interestRate + PRECISION);\\n        {\\n            uint256 interestAmount =\\n                early ? 0 : virtualTokenAmount - depositAmount;\\n            withdrawAmount = depositAmount + interestAmount;\\n        }\\n        if (early) {\\n            // apply fee to withdrawAmount\\n            uint256 earlyWithdrawFee =\\n                feeModel.getEarlyWithdrawFeeAmount(\\n                    address(this),\\n                    depositID,\\n                    withdrawAmount\\n                );\\n            feeAmount = earlyWithdrawFee;\\n            withdrawAmount -= earlyWithdrawFee;\\n        } else {\\n            feeAmount = depositAmount.decmul(feeRate);\\n        }\\n\\n        // Update global values\\n        totalDeposit -= depositAmount;\\n        totalInterestOwed -= virtualTokenAmount - depositAmount;\\n        totalFeeOwed -= depositAmount.decmul(feeRate);\\n\\n        // If deposit was funded, compute funding interest payout\\n        uint64 fundingID = depositEntry.fundingID;\\n        if (fundingID > 0) {\\n            Funding storage funding = _getFunding(fundingID);\\n\\n            // Compute funded deposit amount before withdrawal\\n            uint256 recordedFundedPrincipalAmount =\\n                (fundingMultitoken.totalSupply(fundingID) *\\n                    funding.principalPerToken) / ULTRA_PRECISION;\\n\\n            // Shrink funding principal per token value\\n            {\\n                uint256 totalPrincipal =\\n                    _depositVirtualTokenToPrincipal(\\n                        depositID,\\n                        depositEntry.virtualTokenTotalSupply\\n                    );\\n                uint256 totalPrincipalDecrease =\\n                    virtualTokenAmount + depositAmount.decmul(feeRate);\\n                if (\\n                    totalPrincipal <=\\n                    totalPrincipalDecrease + recordedFundedPrincipalAmount\\n                ) {\\n                    // Not enough unfunded principal, need to decrease funding principal per token value\\n                    funding.principalPerToken =\\n                        (funding.principalPerToken *\\n                            (totalPrincipal - totalPrincipalDecrease)) /\\n                        recordedFundedPrincipalAmount;\\n                }\\n            }\\n\\n            // Compute interest payout + refund\\n            // and update relevant state\\n            (\\n                fundingInterestAmount,\\n                refundAmount\\n            ) = _computeAndUpdateFundingInterestAfterWithdraw(\\n                fundingID,\\n                recordedFundedPrincipalAmount,\\n                early\\n            );\\n        }\\n\\n        // Update vest\\n        {\\n            uint256 depositAmountBeforeWithdrawal =\\n                _getDeposit(depositID).virtualTokenTotalSupply.decdiv(\\n                    interestRate + PRECISION\\n                );\\n            mphMinter.updateVestForDeposit(\\n                depositID,\\n                depositAmountBeforeWithdrawal,\\n                0\\n            );\\n        }\\n\\n        // Burn `virtualTokenAmount` deposit virtual tokens\\n        _getDeposit(depositID).virtualTokenTotalSupply -= virtualTokenAmount;\\n\\n        // Emit event\\n        emit EWithdraw(sender, depositID, early, virtualTokenAmount, feeAmount);\\n    }\\n\\n    function _withdrawTransferFunds(\\n        address sender,\\n        uint64 fundingID,\\n        uint256 withdrawAmount,\\n        uint256 feeAmount,\\n        uint256 fundingInterestAmount,\\n        uint256 refundAmount,\\n        bool rollover\\n    ) internal virtual returns (uint256 withdrawnStablecoinAmount) {\\n        // Withdraw funds from money market\\n        // Withdraws principal together with funding interest to save gas\\n        if (rollover) {\\n            // Rollover mode, don't withdraw `withdrawAmount` from moneyMarket\\n\\n            // We do this because feePlusFundingInterest might\\n            // be slightly less due to rounding\\n            uint256 feePlusFundingInterest =\\n                moneyMarket.withdraw(feeAmount + fundingInterestAmount);\\n            if (feePlusFundingInterest >= feeAmount + fundingInterestAmount) {\\n                // enough to pay everything, if there's extra give to feeAmount\\n                feeAmount = feePlusFundingInterest - fundingInterestAmount;\\n            } else if (feePlusFundingInterest >= feeAmount) {\\n                // enough to pay fee, give remainder to fundingInterestAmount\\n                fundingInterestAmount = feePlusFundingInterest - feeAmount;\\n            } else {\\n                // not enough to pay fee, give everything to fee\\n                feeAmount = feePlusFundingInterest;\\n                fundingInterestAmount = 0;\\n            }\\n\\n            // we're keeping the withdrawal amount in the money market\\n            withdrawnStablecoinAmount = withdrawAmount;\\n        } else {\\n            uint256 actualWithdrawnAmount =\\n                moneyMarket.withdraw(\\n                    withdrawAmount + feeAmount + fundingInterestAmount\\n                );\\n\\n            // We do this because `actualWithdrawnAmount` might\\n            // be slightly less due to rounding\\n            withdrawnStablecoinAmount = withdrawAmount;\\n            if (\\n                actualWithdrawnAmount >=\\n                withdrawAmount + feeAmount + fundingInterestAmount\\n            ) {\\n                // enough to pay everything, if there's extra give to feeAmount\\n                feeAmount =\\n                    actualWithdrawnAmount -\\n                    withdrawAmount -\\n                    fundingInterestAmount;\\n            } else if (actualWithdrawnAmount >= withdrawAmount + feeAmount) {\\n                // enough to pay withdrawal + fee + remainder\\n                // give remainder to funding interest\\n                fundingInterestAmount =\\n                    actualWithdrawnAmount -\\n                    withdrawAmount -\\n                    feeAmount;\\n            } else if (actualWithdrawnAmount >= withdrawAmount) {\\n                // enough to pay withdrawal + remainder\\n                // give remainder to fee\\n                feeAmount = actualWithdrawnAmount - withdrawAmount;\\n            } else {\\n                // not enough to pay withdrawal\\n                // give everything to withdrawal\\n                withdrawnStablecoinAmount = actualWithdrawnAmount;\\n            }\\n\\n            if (withdrawnStablecoinAmount > 0) {\\n                stablecoin.safeTransfer(sender, withdrawnStablecoinAmount);\\n            }\\n        }\\n\\n        // Send `feeAmount` stablecoin to feeModel beneficiary\\n        if (feeAmount > 0) {\\n            stablecoin.safeTransfer(feeModel.beneficiary(), feeAmount);\\n        }\\n\\n        // Distribute `fundingInterestAmount` stablecoins to funders\\n        if (fundingInterestAmount > 0) {\\n            stablecoin.safeApprove(\\n                address(fundingMultitoken),\\n                fundingInterestAmount\\n            );\\n            fundingMultitoken.distributeDividends(\\n                fundingID,\\n                address(stablecoin),\\n                fundingInterestAmount\\n            );\\n            // Mint funder rewards\\n            if (fundingInterestAmount >= refundAmount) {\\n                _distributeFundingRewards(\\n                    fundingID,\\n                    fundingInterestAmount - refundAmount\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n        @dev See {fund}\\n     */\\n    function _fund(\\n        address sender,\\n        uint64 depositID,\\n        uint256 fundAmount\\n    ) internal virtual returns (uint64 fundingID) {\\n        uint256 actualFundAmount;\\n        (fundingID, actualFundAmount) = _fundRecordData(\\n            sender,\\n            depositID,\\n            fundAmount\\n        );\\n        _fundTransferFunds(sender, actualFundAmount);\\n    }\\n\\n    function _fundRecordData(\\n        address sender,\\n        uint64 depositID,\\n        uint256 fundAmount\\n    ) internal virtual returns (uint64 fundingID, uint256 actualFundAmount) {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n\\n        (bool isNegative, uint256 surplusMagnitude) = surplus();\\n        require(isNegative, \\\"DInterest: NO_DEBT\\\");\\n\\n        (isNegative, surplusMagnitude) = rawSurplusOfDeposit(depositID);\\n        require(isNegative, \\\"DInterest: NO_DEBT\\\");\\n        if (fundAmount > surplusMagnitude) {\\n            fundAmount = surplusMagnitude;\\n        }\\n\\n        // Create funding struct if one doesn't exist\\n        uint256 incomeIndex = moneyMarket.incomeIndex();\\n        require(incomeIndex > 0, \\\"DInterest: BAD_INDEX\\\");\\n        uint256 totalPrincipal =\\n            _depositVirtualTokenToPrincipal(\\n                depositID,\\n                depositEntry.virtualTokenTotalSupply\\n            );\\n        uint256 totalPrincipalToFund;\\n        fundingID = depositEntry.fundingID;\\n        uint256 mintTokenAmount;\\n        if (fundingID == 0 || _getFunding(fundingID).principalPerToken == 0) {\\n            // The first funder, create struct\\n            require(block.timestamp <= type(uint64).max, \\\"DInterest: OVERFLOW\\\");\\n            fundingList.push(\\n                Funding({\\n                    depositID: depositID,\\n                    lastInterestPayoutTimestamp: uint64(block.timestamp),\\n                    recordedMoneyMarketIncomeIndex: incomeIndex,\\n                    principalPerToken: ULTRA_PRECISION\\n                })\\n            );\\n            require(\\n                fundingList.length <= type(uint64).max,\\n                \\\"DInterest: OVERFLOW\\\"\\n            );\\n            fundingID = uint64(fundingList.length);\\n            depositEntry.fundingID = fundingID;\\n            totalPrincipalToFund =\\n                (totalPrincipal * fundAmount) /\\n                surplusMagnitude;\\n            mintTokenAmount = totalPrincipalToFund;\\n        } else {\\n            // Not the first funder\\n            // Trigger interest payment for existing funders\\n            _payInterestToFunders(fundingID);\\n\\n            // Compute amount of principal to fund\\n            uint256 principalPerToken =\\n                _getFunding(fundingID).principalPerToken;\\n            uint256 unfundedPrincipalAmount =\\n                totalPrincipal -\\n                    (fundingMultitoken.totalSupply(fundingID) *\\n                        principalPerToken) /\\n                    ULTRA_PRECISION;\\n            surplusMagnitude =\\n                (surplusMagnitude * unfundedPrincipalAmount) /\\n                totalPrincipal;\\n            if (fundAmount > surplusMagnitude) {\\n                fundAmount = surplusMagnitude;\\n            }\\n            totalPrincipalToFund =\\n                (unfundedPrincipalAmount * fundAmount) /\\n                surplusMagnitude;\\n            mintTokenAmount =\\n                (totalPrincipalToFund * ULTRA_PRECISION) /\\n                principalPerToken;\\n        }\\n        // Mint funding multitoken\\n        fundingMultitoken.mint(sender, fundingID, mintTokenAmount);\\n\\n        // Update relevant values\\n        sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex +=\\n            (totalPrincipalToFund * EXTRA_PRECISION) /\\n            incomeIndex;\\n        totalFundedPrincipalAmount += totalPrincipalToFund;\\n\\n        // Emit event\\n        emit EFund(sender, fundingID, fundAmount, mintTokenAmount);\\n\\n        actualFundAmount = fundAmount;\\n    }\\n\\n    function _fundTransferFunds(address sender, uint256 fundAmount)\\n        internal\\n        virtual\\n    {\\n        // Transfer `fundAmount` stablecoins from sender\\n        stablecoin.safeTransferFrom(sender, address(this), fundAmount);\\n\\n        // Deposit `fundAmount` stablecoins into moneyMarket\\n        stablecoin.safeApprove(address(moneyMarket), fundAmount);\\n        moneyMarket.deposit(fundAmount);\\n    }\\n\\n    /**\\n        @dev See {payInterestToFunders}\\n     */\\n    function _payInterestToFunders(uint64 fundingID)\\n        internal\\n        virtual\\n        returns (uint256 interestAmount)\\n    {\\n        Funding storage f = _getFunding(fundingID);\\n        {\\n            uint256 recordedMoneyMarketIncomeIndex =\\n                f.recordedMoneyMarketIncomeIndex;\\n            uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\\n            uint256 fundingTokenTotalSupply =\\n                fundingMultitoken.totalSupply(fundingID);\\n            uint256 recordedFundedPrincipalAmount =\\n                (fundingTokenTotalSupply * f.principalPerToken) /\\n                    ULTRA_PRECISION;\\n\\n            // Update funding values\\n            sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex =\\n                sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex +\\n                (recordedFundedPrincipalAmount * EXTRA_PRECISION) /\\n                currentMoneyMarketIncomeIndex -\\n                (recordedFundedPrincipalAmount * EXTRA_PRECISION) /\\n                recordedMoneyMarketIncomeIndex;\\n            f.recordedMoneyMarketIncomeIndex = currentMoneyMarketIncomeIndex;\\n\\n            // Compute interest to funders\\n            interestAmount =\\n                (recordedFundedPrincipalAmount *\\n                    currentMoneyMarketIncomeIndex) /\\n                recordedMoneyMarketIncomeIndex -\\n                recordedFundedPrincipalAmount;\\n        }\\n\\n        // Distribute interest to funders\\n        if (interestAmount > 0) {\\n            interestAmount = moneyMarket.withdraw(interestAmount);\\n            if (interestAmount > 0) {\\n                stablecoin.safeApprove(\\n                    address(fundingMultitoken),\\n                    interestAmount\\n                );\\n                fundingMultitoken.distributeDividends(\\n                    fundingID,\\n                    address(stablecoin),\\n                    interestAmount\\n                );\\n\\n                _distributeFundingRewards(fundingID, interestAmount);\\n            }\\n        }\\n\\n        emit EPayFundingInterest(fundingID, interestAmount, 0);\\n    }\\n\\n    /**\\n        @dev Mints MPH rewards to the holders of an FRB. If past the deposit maturation,\\n             only mint proportional to the time from the last distribution to the maturation.\\n        @param fundingID The ID of the funding\\n        @param rawInterestAmount The interest being distributed\\n     */\\n    function _distributeFundingRewards(\\n        uint64 fundingID,\\n        uint256 rawInterestAmount\\n    ) internal {\\n        Funding storage f = _getFunding(fundingID);\\n\\n        // Mint funder rewards\\n        uint256 maturationTimestamp =\\n            _getDeposit(f.depositID).maturationTimestamp;\\n        if (block.timestamp > maturationTimestamp) {\\n            // past maturation, only mint proportionally to maturation - last payout\\n            uint256 lastInterestPayoutTimestamp = f.lastInterestPayoutTimestamp;\\n            if (lastInterestPayoutTimestamp < maturationTimestamp) {\\n                uint256 effectiveInterestAmount =\\n                    (rawInterestAmount *\\n                        (maturationTimestamp - lastInterestPayoutTimestamp)) /\\n                        (block.timestamp - lastInterestPayoutTimestamp);\\n                mphMinter.distributeFundingRewards(\\n                    fundingID,\\n                    effectiveInterestAmount\\n                );\\n            }\\n        } else {\\n            // before maturation, mint full amount\\n            mphMinter.distributeFundingRewards(fundingID, rawInterestAmount);\\n        }\\n        // update last payout timestamp\\n        require(block.timestamp <= type(uint64).max, \\\"DInterest: OVERFLOW\\\");\\n        f.lastInterestPayoutTimestamp = uint64(block.timestamp);\\n    }\\n\\n    /**\\n        @dev Used in {_withdraw}. Computes the amount of interest to distribute\\n             to the deposit's floating-rate bond holders. Also updates the Funding\\n             struct associated with the floating-rate bond.\\n        @param fundingID The ID of the floating-rate bond\\n        @param recordedFundedPrincipalAmount The amount of principal funded before the withdrawal\\n        @param early True if withdrawing before maturation, false otherwise\\n        @return fundingInterestAmount The amount of interest to distribute to the floating-rate bond holders, plus the refund amount\\n        @return refundAmount The amount of refund caused by an early withdraw\\n     */\\n    function _computeAndUpdateFundingInterestAfterWithdraw(\\n        uint64 fundingID,\\n        uint256 recordedFundedPrincipalAmount,\\n        bool early\\n    )\\n        internal\\n        virtual\\n        returns (uint256 fundingInterestAmount, uint256 refundAmount)\\n    {\\n        Funding storage f = _getFunding(fundingID);\\n        uint256 currentFundedPrincipalAmount =\\n            (fundingMultitoken.totalSupply(fundingID) * f.principalPerToken) /\\n                ULTRA_PRECISION;\\n\\n        // Update funding values\\n        {\\n            uint256 recordedMoneyMarketIncomeIndex =\\n                f.recordedMoneyMarketIncomeIndex;\\n            uint256 currentMoneyMarketIncomeIndex = moneyMarket.incomeIndex();\\n            require(currentMoneyMarketIncomeIndex > 0, \\\"DInterest: BAD_INDEX\\\");\\n            uint256 currentFundedPrincipalAmountDivRecordedIncomeIndex =\\n                (currentFundedPrincipalAmount * EXTRA_PRECISION) /\\n                    currentMoneyMarketIncomeIndex;\\n            uint256 recordedFundedPrincipalAmountDivRecordedIncomeIndex =\\n                (recordedFundedPrincipalAmount * EXTRA_PRECISION) /\\n                    recordedMoneyMarketIncomeIndex;\\n            if (\\n                sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex +\\n                    currentFundedPrincipalAmountDivRecordedIncomeIndex >=\\n                recordedFundedPrincipalAmountDivRecordedIncomeIndex\\n            ) {\\n                sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex =\\n                    sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex +\\n                    currentFundedPrincipalAmountDivRecordedIncomeIndex -\\n                    recordedFundedPrincipalAmountDivRecordedIncomeIndex;\\n            } else {\\n                sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex = 0;\\n            }\\n\\n            f.recordedMoneyMarketIncomeIndex = currentMoneyMarketIncomeIndex;\\n            totalFundedPrincipalAmount -=\\n                recordedFundedPrincipalAmount -\\n                currentFundedPrincipalAmount;\\n\\n            // Compute interest to funders\\n            fundingInterestAmount =\\n                (recordedFundedPrincipalAmount *\\n                    currentMoneyMarketIncomeIndex) /\\n                recordedMoneyMarketIncomeIndex -\\n                recordedFundedPrincipalAmount;\\n        }\\n\\n        // Add refund to interestAmount\\n        if (early) {\\n            Deposit storage depositEntry = _getDeposit(f.depositID);\\n            uint256 interestRate = depositEntry.interestRate;\\n            uint256 feeRate = depositEntry.feeRate;\\n            (, uint256 moneyMarketInterestRatePerSecond) =\\n                interestOracle.updateAndQuery();\\n            refundAmount =\\n                (((recordedFundedPrincipalAmount -\\n                    currentFundedPrincipalAmount) * PRECISION)\\n                    .decmul(moneyMarketInterestRatePerSecond) *\\n                    (depositEntry.maturationTimestamp - block.timestamp)) /\\n                PRECISION;\\n            uint256 maxRefundAmount =\\n                (recordedFundedPrincipalAmount - currentFundedPrincipalAmount)\\n                    .decdiv(PRECISION + interestRate + feeRate)\\n                    .decmul(interestRate + feeRate);\\n            refundAmount = refundAmount <= maxRefundAmount\\n                ? refundAmount\\n                : maxRefundAmount;\\n            fundingInterestAmount += refundAmount;\\n        }\\n\\n        emit EPayFundingInterest(\\n            fundingID,\\n            fundingInterestAmount,\\n            refundAmount\\n        );\\n    }\\n\\n    /**\\n        Internal getter functions\\n     */\\n\\n    /**\\n        @dev See {getDeposit}\\n     */\\n    function _getDeposit(uint64 depositID)\\n        internal\\n        view\\n        returns (Deposit storage)\\n    {\\n        return deposits[depositID - 1];\\n    }\\n\\n    /**\\n        @dev See {getFunding}\\n     */\\n    function _getFunding(uint64 fundingID)\\n        internal\\n        view\\n        returns (Funding storage)\\n    {\\n        return fundingList[fundingID - 1];\\n    }\\n\\n    /**\\n        @dev Converts a virtual token value into the corresponding principal value.\\n             Principal refers to deposit + full interest + fee.\\n        @param depositID The ID of the deposit of the virtual tokens\\n        @param virtualTokenAmount The virtual token value\\n        @return The corresponding principal value\\n     */\\n    function _depositVirtualTokenToPrincipal(\\n        uint64 depositID,\\n        uint256 virtualTokenAmount\\n    ) internal view virtual returns (uint256) {\\n        Deposit storage depositEntry = _getDeposit(depositID);\\n        uint256 depositInterestRate = depositEntry.interestRate;\\n        return\\n            virtualTokenAmount.decdiv(depositInterestRate + PRECISION).decmul(\\n                depositInterestRate + depositEntry.feeRate + PRECISION\\n            );\\n    }\\n\\n    /**\\n        @dev See {Rescuable._authorizeRescue}\\n     */\\n    function _authorizeRescue(\\n        address, /*token*/\\n        address /*target*/\\n    ) internal view override {\\n        require(msg.sender == owner(), \\\"DInterest: NOT_OWNER\\\");\\n    }\\n\\n    /**\\n        Param setters (only callable by the owner)\\n     */\\n    function setFeeModel(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: NOT_CONTRACT\\\");\\n        feeModel = IFeeModel(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"feeModel\\\", newValue);\\n    }\\n\\n    function setInterestModel(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: NOT_CONTRACT\\\");\\n        interestModel = IInterestModel(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"interestModel\\\", newValue);\\n    }\\n\\n    function setInterestOracle(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: NOT_CONTRACT\\\");\\n        interestOracle = IInterestOracle(newValue);\\n        require(\\n            interestOracle.moneyMarket() == moneyMarket,\\n            \\\"DInterest: BAD_ORACLE\\\"\\n        );\\n        emit ESetParamAddress(msg.sender, \\\"interestOracle\\\", newValue);\\n    }\\n\\n    function setRewards(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: NOT_CONTRACT\\\");\\n        moneyMarket.setRewards(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"moneyMarket.rewards\\\", newValue);\\n    }\\n\\n    function setMPHMinter(address newValue) external onlyOwner {\\n        require(newValue.isContract(), \\\"DInterest: NOT_CONTRACT\\\");\\n        mphMinter = MPHMinter(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"mphMinter\\\", newValue);\\n    }\\n\\n    function setMaxDepositPeriod(uint64 newValue) external onlyOwner {\\n        require(newValue > 0, \\\"DInterest: BAD_VAL\\\");\\n        MaxDepositPeriod = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MaxDepositPeriod\\\", uint256(newValue));\\n    }\\n\\n    function setMinDepositAmount(uint256 newValue) external onlyOwner {\\n        require(newValue > 0, \\\"DInterest: BAD_VAL\\\");\\n        MinDepositAmount = newValue;\\n        emit ESetParamUint(msg.sender, \\\"MinDepositAmount\\\", newValue);\\n    }\\n\\n    function setDepositNFTBaseURI(string calldata newURI) external onlyOwner {\\n        depositNFT.setBaseURI(newURI);\\n    }\\n\\n    function setDepositNFTContractURI(string calldata newURI)\\n        external\\n        onlyOwner\\n    {\\n        depositNFT.setContractURI(newURI);\\n    }\\n\\n    function skimSurplus(address recipient) external onlyOwner {\\n        (bool isNegative, uint256 surplusMagnitude) = surplus();\\n        if (!isNegative) {\\n            surplusMagnitude = moneyMarket.withdraw(surplusMagnitude);\\n            stablecoin.safeTransfer(recipient, surplusMagnitude);\\n        }\\n    }\\n\\n    function decreaseFeeForDeposit(uint64 depositID, uint256 newFeeRate)\\n        external\\n        onlyOwner\\n    {\\n        Deposit storage depositStorage = _getDeposit(depositID);\\n        uint256 feeRate = depositStorage.feeRate;\\n        uint256 interestRate = depositStorage.interestRate;\\n        uint256 virtualTokenTotalSupply =\\n            depositStorage.virtualTokenTotalSupply;\\n        require(newFeeRate < feeRate, \\\"DInterest: BAD_VAL\\\");\\n        uint256 depositAmount =\\n            virtualTokenTotalSupply.decdiv(interestRate + PRECISION);\\n\\n        // update fee rate\\n        depositStorage.feeRate = newFeeRate;\\n\\n        // update interest rate\\n        // fee reduction is allocated to interest\\n        uint256 reducedFeeAmount = depositAmount.decmul(feeRate - newFeeRate);\\n        depositStorage.interestRate =\\n            interestRate +\\n            reducedFeeAmount.decdiv(depositAmount);\\n\\n        // update global amounts\\n        totalInterestOwed += reducedFeeAmount;\\n        totalFeeOwed -= reducedFeeAmount;\\n    }\\n\\n    uint256[33] private __gap;\\n}\\n\",\"keccak256\":\"0x151df7903e8a168a39013e9fc4d26b7b71eb84a391d4a07a20dbec4ad756b0fd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/DecMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\n// Decimal math library\\nlibrary DecMath {\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    function decmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISION;\\n    }\\n\\n    function decdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISION) / b;\\n    }\\n}\\n\",\"keccak256\":\"0x830cccda720ec3797259ec651073e91c889e7e3aeec81e034c793ca9d106eb8b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {ERC1155Upgradeable} from \\\"./ERC1155Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n    @notice An extension of ERC1155 that provides access-controlled minting and burning,\\n            as well as a total supply getter for each token ID.\\n */\\nabstract contract ERC1155Base is ERC1155Upgradeable, AccessControlUpgradeable {\\n    bytes32 public constant MINTER_BURNER_ROLE =\\n        keccak256(\\\"MINTER_BURNER_ROLE\\\");\\n    bytes32 public constant METADATA_ROLE = keccak256(\\\"METADATA_ROLE\\\");\\n    bytes internal constant NULL_BYTES = bytes(\\\"\\\");\\n\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    function __ERC1155Base_init(address admin, string memory uri)\\n        internal\\n        initializer\\n    {\\n        __ERC1155_init(uri);\\n        __ERC1155Base_init_unchained(admin);\\n    }\\n\\n    function __ERC1155Base_init_unchained(address admin) internal initializer {\\n        // admin is granted metadata role and minter-burner role\\n        // metadata role is managed by itself\\n        // minter-burner role is managed by itself\\n        _setupRole(METADATA_ROLE, admin);\\n        _setupRole(MINTER_BURNER_ROLE, admin);\\n        _setRoleAdmin(METADATA_ROLE, METADATA_ROLE);\\n        _setRoleAdmin(MINTER_BURNER_ROLE, MINTER_BURNER_ROLE);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to mint\\\"\\n        );\\n\\n        _mint(to, id, amount, NULL_BYTES);\\n    }\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to mint\\\"\\n        );\\n\\n        _mintBatch(to, ids, amounts, NULL_BYTES);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to burn\\\"\\n        );\\n\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external {\\n        require(\\n            hasRole(MINTER_BURNER_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have minter-burner role to burn\\\"\\n        );\\n\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    function setURI(string calldata newuri) external {\\n        require(\\n            hasRole(METADATA_ROLE, _msgSender()),\\n            \\\"ERC1155Base: must have metadata role to set URI\\\"\\n        );\\n\\n        _setURI(newuri);\\n    }\\n\\n    function totalSupply(uint256 id) public view returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    function totalSupplyBatch(uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory totalSupplies)\\n    {\\n        totalSupplies = new uint256[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            totalSupplies[i] = _totalSupply[ids[i]];\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        } else if (to == address(0)) {\\n            // Burn\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x663322e9f7ae782e1b2f98cfd1432a55eee80e6b0111593a880bd86a0e70027f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/ERC1155DividendToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    SafeCastUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\nimport {ERC1155Base} from \\\"./ERC1155Base.sol\\\";\\n\\n/**\\n    @notice An extension of ERC1155Base that allows distributing dividends to all holders\\n            of an token ID. Also supports multiple dividend tokens.\\n */\\nabstract contract ERC1155DividendToken is ERC1155Base {\\n    using SafeERC20 for IERC20;\\n    using SafeCastUpgradeable for uint256;\\n    using SafeCastUpgradeable for int256;\\n\\n    struct DividendTokenData {\\n        address dividendToken;\\n        mapping(uint256 => uint256) magnifiedDividendPerShare;\\n        // About dividendCorrection:\\n        // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\n        //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\n        // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\n        //   `dividendOf(_user)` should not be changed,\\n        //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\n        // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\n        //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\n        //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\n        //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\n        // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\n        mapping(uint256 => mapping(address => int256)) magnifiedDividendCorrections;\\n        mapping(uint256 => mapping(address => uint256)) withdrawnDividends;\\n    }\\n\\n    // With `magnitude`, we can properly distribute dividends even if the amount of received target is small.\\n    // For more discussion about choosing the value of `magnitude`,\\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\n    uint256 internal constant magnitude = 2**128;\\n\\n    /**\\n        @notice The list of tokens that can be distributed to token holders as dividend. 1-indexed.\\n     */\\n    mapping(uint256 => DividendTokenData) public dividendTokenDataList;\\n    uint256 public dividendTokenDataListLength;\\n    /**\\n        @notice The dividend token address to its key in {dividendTokenDataList}\\n     */\\n    mapping(address => uint256) public dividendTokenToDataID;\\n\\n    /// @dev This event MUST emit when target is distributed to token holders.\\n    /// @param from The address which sends target to this contract.\\n    /// @param weiAmount The amount of distributed target in wei.\\n    event DividendsDistributed(\\n        uint256 indexed tokenID,\\n        address indexed from,\\n        address indexed dividendToken,\\n        uint256 weiAmount\\n    );\\n\\n    /// @dev This event MUST emit when an address withdraws their dividend.\\n    /// @param to The address which withdraws target from this contract.\\n    /// @param weiAmount The amount of withdrawn target in wei.\\n    event DividendWithdrawn(\\n        uint256 indexed tokenID,\\n        address indexed to,\\n        address indexed dividendToken,\\n        uint256 weiAmount\\n    );\\n\\n    function __ERC1155DividendToken_init(\\n        address[] memory dividendTokens,\\n        address admin,\\n        string memory uri\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __ERC1155DividendToken_init_unchained(dividendTokens);\\n    }\\n\\n    function __ERC1155DividendToken_init_unchained(\\n        address[] memory dividendTokens\\n    ) internal initializer {\\n        dividendTokenDataListLength = dividendTokens.length;\\n        for (uint256 i = 0; i < dividendTokens.length; i++) {\\n            dividendTokenDataList[i + 1].dividendToken = dividendTokens[i];\\n            dividendTokenToDataID[dividendTokens[i]] = i + 1;\\n        }\\n    }\\n\\n    /**\\n        Public getters\\n     */\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function dividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        return _withdrawableDividendOf(tokenID, dividendToken, _owner);\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\\n    function withdrawnDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return data.withdrawnDividends[tokenID][_owner];\\n    }\\n\\n    /// @notice View the amount of dividend in wei that an address has earned in total.\\n    /// @dev accumulativeDividendOf(_owner) = _withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\\n    function accumulativeDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) public view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return\\n            ((data.magnifiedDividendPerShare[tokenID] *\\n                balanceOf(_owner, tokenID))\\n                .toInt256() +\\n                data.magnifiedDividendCorrections[tokenID][_owner])\\n                .toUint256() / magnitude;\\n    }\\n\\n    /**\\n        Internal functions\\n     */\\n\\n    /// @notice View the amount of dividend in wei that an address can withdraw.\\n    /// @param tokenID The token's ID.\\n    /// @param dividendToken The token the dividend is in\\n    /// @param _owner The address of a token holder.\\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\\n    function _withdrawableDividendOf(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address _owner\\n    ) internal view returns (uint256) {\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        if (dividendTokenDataID == 0) {\\n            return 0;\\n        }\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n        return\\n            accumulativeDividendOf(tokenID, dividendToken, _owner) -\\n            data.withdrawnDividends[tokenID][_owner];\\n    }\\n\\n    /// @notice Distributes target to token holders as dividends.\\n    /// @dev It reverts if the total supply of tokens is 0.\\n    /// It emits the `DividendsDistributed` event if the amount of received target is greater than 0.\\n    /// About undistributed target tokens:\\n    ///   In each distribution, there is a small amount of target not distributed,\\n    ///     the magnified amount of which is\\n    ///     `(amount * magnitude) % totalSupply()`.\\n    ///   With a well-chosen `magnitude`, the amount of undistributed target\\n    ///     (de-magnified) in a distribution can be less than 1 wei.\\n    ///   We can actually keep track of the undistributed target in a distribution\\n    ///     and try to distribute it in the next distribution,\\n    ///     but keeping track of such data on-chain costs much more than\\n    ///     the saved target, so we don't do that.\\n    function _distributeDividends(\\n        uint256 tokenID,\\n        address dividendToken,\\n        uint256 amount\\n    ) internal {\\n        uint256 tokenTotalSupply = totalSupply(tokenID);\\n        require(tokenTotalSupply > 0);\\n        require(amount > 0);\\n\\n        uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n        require(\\n            dividendTokenDataID != 0,\\n            \\\"ERC1155DividendToken: invalid dividendToken\\\"\\n        );\\n        DividendTokenData storage data =\\n            dividendTokenDataList[dividendTokenDataID];\\n\\n        data.magnifiedDividendPerShare[tokenID] +=\\n            (amount * magnitude) /\\n            tokenTotalSupply;\\n\\n        IERC20(dividendToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        emit DividendsDistributed(tokenID, msg.sender, dividendToken, amount);\\n    }\\n\\n    /// @notice Withdraws the target distributed to the sender.\\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn target is greater than 0.\\n    function _withdrawDividend(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address user\\n    ) internal {\\n        uint256 _withdrawableDividend =\\n            _withdrawableDividendOf(tokenID, dividendToken, user);\\n        if (_withdrawableDividend > 0) {\\n            uint256 dividendTokenDataID = dividendTokenToDataID[dividendToken];\\n            require(\\n                dividendTokenDataID != 0,\\n                \\\"ERC1155DividendToken: invalid dividendToken\\\"\\n            );\\n            DividendTokenData storage data =\\n                dividendTokenDataList[dividendTokenDataID];\\n            data.withdrawnDividends[tokenID][user] += _withdrawableDividend;\\n            emit DividendWithdrawn(\\n                tokenID,\\n                user,\\n                dividendToken,\\n                _withdrawableDividend\\n            );\\n            IERC20(dividendToken).safeTransfer(user, _withdrawableDividend);\\n        }\\n    }\\n\\n    function _registerDividendToken(address dividendToken)\\n        internal\\n        returns (uint256 newDividendTokenDataID)\\n    {\\n        require(\\n            dividendTokenToDataID[dividendToken] == 0,\\n            \\\"ERC1155DividendToken: already registered\\\"\\n        );\\n        dividendTokenDataListLength++;\\n        newDividendTokenDataID = dividendTokenDataListLength;\\n        dividendTokenDataList[newDividendTokenDataID]\\n            .dividendToken = dividendToken;\\n        dividendTokenToDataID[dividendToken] = newDividendTokenDataID;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Base) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        to\\n                    ] -= (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                        amount)\\n                        .toInt256();\\n                }\\n            }\\n        } else if (to == address(0)) {\\n            // Burn\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        from\\n                    ] += (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                        amount)\\n                        .toInt256();\\n                }\\n            }\\n        } else {\\n            // Transfer\\n            for (uint256 i = 0; i < ids.length; i++) {\\n                uint256 tokenID = ids[i];\\n                uint256 amount = amounts[i];\\n\\n                for (uint256 j = 1; j <= dividendTokenDataListLength; j++) {\\n                    DividendTokenData storage dividendTokenData =\\n                        dividendTokenDataList[j];\\n                    int256 _magCorrection =\\n                        (dividendTokenData.magnifiedDividendPerShare[tokenID] *\\n                            amount)\\n                            .toInt256();\\n                    // Retain the rewards\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        from\\n                    ] += _magCorrection;\\n                    dividendTokenData.magnifiedDividendCorrections[tokenID][\\n                        to\\n                    ] -= _magCorrection;\\n                }\\n            }\\n        }\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xfc1894d240c7f6a47c0a726a220958c9dcbd08004d8ca36aff889508c78da398\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {\\n    IERC1155Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport {\\n    IERC1155ReceiverUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport {\\n    IERC1155MetadataURIUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport {\\n    ERC165Upgradeable,\\n    IERC165Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            _msgSender() != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            from,\\n            to,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(\\n                fromBalance >= amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            address(0),\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            \\\"\\\"\\n        );\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(\\n            accountBalance >= amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(\\n                accountBalance >= amount,\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n        @dev Override this to return true to skip checking to.onERC1155Received during\\n             single transfers.\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (\\n            to.isContract() &&\\n            !_shouldSkipSafeTransferAcceptanceCheck(\\n                operator,\\n                from,\\n                to,\\n                id,\\n                amount,\\n                data\\n            )\\n        ) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155ReceiverUpgradeable(to)\\n                        .onERC1155BatchReceived\\n                        .selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x4af510c3f1262f73b11f97c887609f860e020bb3e74a333d3895f79f5c222362\",\"license\":\"MIT\"},\"contracts/libs/ERC20Wrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {WrappedERC1155Token} from \\\"./WrappedERC1155Token.sol\\\";\\n\\n/**\\n    @notice An ERC-20 wrapper for a particular tokenID of an ERC-1155 token\\n */\\ncontract ERC20Wrapper is Initializable, IERC20 {\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    WrappedERC1155Token public parentMultitoken;\\n    uint256 public tokenID;\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    function initialize(\\n        address _parentMultitoken,\\n        uint256 _tokenID,\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external virtual initializer {\\n        parentMultitoken = WrappedERC1155Token(_parentMultitoken);\\n        tokenID = _tokenID;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return parentMultitoken.totalSupply(tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return parentMultitoken.balanceOf(account, tokenID);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n        external\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20Wrapper: transfer amount exceeds allowance\\\"\\n        );\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20Wrapper: decreased allowance below zero\\\"\\n        );\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n        @dev Only callable by the parentMultitoken. Emits a transfer event when the parent token\\n             is transferred.\\n     */\\n    function emitTransferEvent(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(\\n            msg.sender == address(parentMultitoken),\\n            \\\"ERC20Wrapper: not parent\\\"\\n        );\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        parentMultitoken.wrapperTransfer(\\n            msg.sender,\\n            recipient,\\n            tokenID,\\n            amount\\n        );\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(\\n            owner != address(0),\\n            \\\"ERC20Wrapper: approve from the zero address\\\"\\n        );\\n        require(\\n            spender != address(0),\\n            \\\"ERC20Wrapper: approve to the zero address\\\"\\n        );\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x60b6f884ed3f32eb9beaad6e4f2236a45e4d22a8b5f11ffd2d1bd4565372594b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/Rescuable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Inherit this to allow for rescuing ERC20 tokens sent to the contract in error.\\n */\\nabstract contract Rescuable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n        @notice Rescues ERC20 tokens sent to the contract in error.\\n        @dev Need to implement {_authorizeRescue} to do access-control for this function.\\n        @param token The ERC20 token to rescue\\n        @param target The address to send the tokens to\\n     */\\n    function rescue(address token, address target) external virtual {\\n        // make sure we're not stealing funds or something\\n        _authorizeRescue(token, target);\\n\\n        // transfer token to target\\n        IERC20 tokenContract = IERC20(token);\\n        tokenContract.safeTransfer(\\n            target,\\n            tokenContract.balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n        @dev Should revert if the rescue call should be stopped.\\n        @param token The ERC20 token to rescue\\n        @param target The address to send the tokens to\\n     */\\n    function _authorizeRescue(address token, address target) internal virtual;\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7a1dbe5e95306080b91665e84c6d00237e4b5354f04d67757d863cd33c952380\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n        @dev Modified from openzeppelin. Instead of reverting when the allowance is non-zero and value\\n        is non-zero, we first set the allowance to 0 and then call approve(spender, value).\\n        This provides support for non-standard tokens such as USDT that revert in this scenario. \\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((token.allowance(address(this), spender)) > 0) {\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, 0)\\n            );\\n        }\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata =\\n            address(token).functionCall(\\n                data,\\n                \\\"SafeERC20: low-level call failed\\\"\\n            );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c1ef68247c12919ad44823f36b0aea8b2c82b2185584a472afe59438e0059f4\",\"license\":\"MIT\"},\"contracts/libs/Sponsorable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {SafeERC20} from \\\"./SafeERC20.sol\\\";\\n\\n/**\\n    @notice Add support for meta-txs that use ERC20 tokens to pay for gas\\n */\\nabstract contract Sponsorable {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n        @dev Using uint256 for all numbers since this struct won't ever be in storage. This saves gas.\\n        @param sender The user who made the meta-tx\\n        @param sponsor The account that should receive the sponsor fee\\n        @param sponsorFeeToken The ERC20 token address the sponsor fee is paid in\\n        @param sponsorFeeAmount The amount of sponsor fee to transfer from `sender` to `sponsor`\\n        @param nonce The signature nonce used for preventing replay attacks. Should equal accountNonce[sender].\\n        @param deadline The timestamp after which the signature is invalid\\n        @param v ECDSA signature component: Parity of the `y` coordinate of point `R`\\n        @param r ECDSA signature component: x-coordinate of `R`\\n        @param s ECDSA signature component: `s` value of the signature\\n     */\\n    struct Sponsorship {\\n        address sender;\\n        address sponsor;\\n        address sponsorFeeToken;\\n        uint256 sponsorFeeAmount;\\n        uint256 nonce;\\n        uint256 deadline;\\n        uint256 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    mapping(address => uint256) public accountNonce;\\n\\n    /**\\n        @dev Use this for functions that should support meta-txs.\\n        @param sponsorship The sponsorship information\\n        @param funcSignature The function signature (selector) of the function being called\\n        @param encodedParams The parameters of the function, encoded using abi.encode()\\n     */\\n    modifier sponsored(\\n        Sponsorship memory sponsorship,\\n        bytes4 funcSignature,\\n        bytes memory encodedParams\\n    ) {\\n        _validateSponsorship(sponsorship, funcSignature, encodedParams);\\n        _paySponsor(\\n            sponsorship.sender,\\n            sponsorship.sponsor,\\n            sponsorship.sponsorFeeToken,\\n            sponsorship.sponsorFeeAmount\\n        );\\n        _;\\n    }\\n\\n    /**\\n        @dev Validates the signature of a meta-tx sponsorship, reverts if the signature is invalid.\\n        @param sponsorship The sponsorship information\\n        @param funcSignature The function signature (selector) of the function being called\\n        @param encodedParams The parameters of the function, encoded using abi.encode()\\n     */\\n    function _validateSponsorship(\\n        Sponsorship memory sponsorship,\\n        bytes4 funcSignature,\\n        bytes memory encodedParams\\n    ) internal virtual {\\n        require(\\n            sponsorship.nonce == accountNonce[sponsorship.sender],\\n            \\\"Sponsorable: BAD_NONCE\\\"\\n        );\\n        require(\\n            block.timestamp <= sponsorship.deadline,\\n            \\\"Sponsorable: SIG_DEAD\\\"\\n        );\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(\\n                        abi.encodePacked(\\n                            abi.encode(\\n                                chainId,\\n                                address(this),\\n                                sponsorship.sponsor,\\n                                sponsorship.sponsorFeeToken,\\n                                sponsorship.sponsorFeeAmount,\\n                                sponsorship.nonce,\\n                                sponsorship.deadline,\\n                                funcSignature\\n                            ),\\n                            encodedParams\\n                        )\\n                    )\\n                )\\n            );\\n\\n        address recoveredAddress =\\n            ECDSA.recover(\\n                digest,\\n                uint8(sponsorship.v),\\n                sponsorship.r,\\n                sponsorship.s\\n            );\\n        require(\\n            recoveredAddress != address(0) &&\\n                recoveredAddress == sponsorship.sender,\\n            \\\"Sponsorable: BAD_SIG\\\"\\n        );\\n\\n        // update nonce\\n        accountNonce[sponsorship.sender] = sponsorship.nonce + 1;\\n    }\\n\\n    /**\\n        @dev Transfers `sponsorFeeAmount` of ERC20 token `sponsorFeeToken` from `sender` to `sponsor`.\\n        @param sender The user who made the meta-tx\\n        @param sponsor The account that should receive the sponsor fee\\n        @param sponsorFeeToken The ERC20 token address the sponsor fee is paid in\\n        @param sponsorFeeAmount The amount of sponsor fee to transfer from `sender` to `sponsor`\\n     */\\n    function _paySponsor(\\n        address sender,\\n        address sponsor,\\n        address sponsorFeeToken,\\n        uint256 sponsorFeeAmount\\n    ) internal virtual {\\n        if (sponsorFeeAmount == 0) {\\n            return;\\n        }\\n\\n        IERC20 token = IERC20(sponsorFeeToken);\\n\\n        // transfer tokens from sender\\n        token.safeTransferFrom(sender, address(this), sponsorFeeAmount);\\n\\n        // transfer tokens to sponsor\\n        token.safeTransfer(sponsor, sponsorFeeAmount);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xec0182d5a00a558e469cbfb3dea0ee76a5fa77d4dc8061bf4789ca8d02037720\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/WrappedERC1155Token.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    ClonesUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport {\\n    StringsUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {ERC1155Upgradeable} from \\\"./ERC1155Upgradeable.sol\\\";\\nimport {ERC1155Base} from \\\"./ERC1155Base.sol\\\";\\nimport {ERC20Wrapper} from \\\"./ERC20Wrapper.sol\\\";\\n\\n/**\\n    @notice An ERC-1155 multitoken where each ID is wrapped in an ERC-20 interface\\n */\\nabstract contract WrappedERC1155Token is ERC1155Base {\\n    using ClonesUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    mapping(uint256 => address) public tokenIDToWrapper;\\n    address public wrapperTemplate;\\n    bool public deployWrapperOnMint;\\n    string public baseName;\\n    string public baseSymbol;\\n    uint8 public decimals;\\n\\n    function __WrappedERC1155Token_init(\\n        address admin,\\n        string memory uri,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __WrappedERC1155Token_init_unchained(\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n    }\\n\\n    function __WrappedERC1155Token_init_unchained(\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        wrapperTemplate = _wrapperTemplate;\\n        deployWrapperOnMint = _deployWrapperOnMint;\\n        baseName = _baseName;\\n        baseSymbol = _baseSymbol;\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n        @notice Called by an ERC20Wrapper contract to handle a transfer call.\\n        @dev Only callable by a wrapper deployed by this contract.\\n        @param from Source of transfer\\n        @param to Target of transfer\\n        @param tokenID The ERC-1155 token ID of the wrapper\\n        @param amount The amount to transfer\\n     */\\n    function wrapperTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenID,\\n        uint256 amount\\n    ) external {\\n        require(\\n            msg.sender == tokenIDToWrapper[tokenID],\\n            \\\"WrappedERC1155Token: not wrapper\\\"\\n        );\\n        _safeTransferFrom(from, to, tokenID, amount, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n        @notice Deploys an ERC20Wrapper contract for the ERC-1155 tokens with ID `tokenID`.\\n        @dev If a wrapper already exists for this tokenID, does nothing and returns the address\\n             of the existing wrapper.\\n        @param tokenID The ID of the token to wrap\\n        @return wrapperAddress The address of the wrapper\\n     */\\n    function deployWrapper(uint256 tokenID)\\n        external\\n        returns (address wrapperAddress)\\n    {\\n        return _deployWrapper(tokenID);\\n    }\\n\\n    /**\\n        @dev See {deployWrapper}\\n     */\\n    function _deployWrapper(uint256 tokenID)\\n        internal\\n        returns (address wrapperAddress)\\n    {\\n        wrapperAddress = tokenIDToWrapper[tokenID];\\n        if (wrapperAddress == address(0)) {\\n            // deploy wrapper\\n            ERC20Wrapper wrapper = ERC20Wrapper(wrapperTemplate.clone());\\n            string memory tokenIDString = tokenID.toString();\\n            string memory name =\\n                string(abi.encodePacked(baseName, tokenIDString));\\n            string memory symbol =\\n                string(abi.encodePacked(baseSymbol, tokenIDString));\\n            wrapper.initialize(address(this), tokenID, name, symbol, decimals);\\n            tokenIDToWrapper[tokenID] = address(wrapper);\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            // Mint\\n            if (deployWrapperOnMint) {\\n                for (uint256 i = 0; i < ids.length; i++) {\\n                    _deployWrapper(ids[i]);\\n                }\\n            }\\n        }\\n\\n        // Emit transfer event in wrapper\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            address wrapperAddress = tokenIDToWrapper[ids[i]];\\n            if (wrapperAddress != address(0)) {\\n                ERC20Wrapper wrapper = ERC20Wrapper(wrapperAddress);\\n                wrapper.emitTransferEvent(from, to, amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @dev See {ERC1155Upgradeable._shouldSkipSafeTransferAcceptanceCheck}\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Upgradeable) returns (bool) {\\n        address wrapperAddress = tokenIDToWrapper[id];\\n        if (wrapperAddress != address(0)) {\\n            // has wrapper, check if operator is the wrapper\\n            return operator == wrapperAddress;\\n        } else {\\n            // no wrapper, should do safety checks\\n            return false;\\n        }\\n    }\\n\\n    /**\\n        Param setters (need metadata role)\\n     */\\n    function setDeployWrapperOnMint(bool newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        deployWrapperOnMint = newValue;\\n    }\\n\\n    function setBaseName(string calldata newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        baseName = newValue;\\n    }\\n\\n    function setBaseSymbol(string calldata newValue) external {\\n        require(\\n            hasRole(METADATA_ROLE, msg.sender),\\n            \\\"WrappedERC1155Token: no metadata role\\\"\\n        );\\n        baseSymbol = newValue;\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xafaa1521698e4ec67ac1a37521736f3f8536e55fa4bb278a4441f419060a1a6d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/models/fee/IFeeModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\ninterface IFeeModel {\\n    function beneficiary() external view returns (address payable);\\n\\n    function getInterestFeeAmount(address pool, uint256 interestAmount)\\n        external\\n        view\\n        returns (uint256 feeAmount);\\n\\n    function getEarlyWithdrawFeeAmount(\\n        address pool,\\n        uint64 depositID,\\n        uint256 withdrawnDepositAmount\\n    ) external view returns (uint256 feeAmount);\\n}\\n\",\"keccak256\":\"0xe58d4e0e42103eb63c01bbfff816385ca3d8370fc6a3024726cd04f0d6e69e03\",\"license\":\"GPL-3.0-or-later\"},\"contracts/models/interest-oracle/IInterestOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {MoneyMarket} from \\\"../../moneymarkets/MoneyMarket.sol\\\";\\n\\ninterface IInterestOracle {\\n    function updateAndQuery() external returns (bool updated, uint256 value);\\n\\n    function query() external view returns (uint256 value);\\n\\n    function moneyMarket() external view returns (MoneyMarket);\\n}\\n\",\"keccak256\":\"0x441756ec2715aac1d7b1dcc2eb78648b0fcba88170bec540f68287f7edc366cf\",\"license\":\"GPL-3.0-or-later\"},\"contracts/models/interest/IInterestModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\ninterface IInterestModel {\\n    function calculateInterestAmount(\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds,\\n        uint256 moneyMarketInterestRatePerSecond,\\n        bool surplusIsNegative,\\n        uint256 surplusAmount\\n    ) external view returns (uint256 interestAmount);\\n}\\n\",\"keccak256\":\"0xbdb2b0d689338683188ff2f54e4b77bd7f6a4ef284e0c15c88fedb4a07caca78\",\"license\":\"GPL-3.0-or-later\"},\"contracts/moneymarkets/MoneyMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Rescuable} from \\\"../libs/Rescuable.sol\\\";\\n\\n// Interface for money market protocols (Compound, Aave, etc.)\\nabstract contract MoneyMarket is\\n    Rescuable,\\n    OwnableUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    bytes32 internal constant RESCUER_ROLE = keccak256(\\\"RESCUER_ROLE\\\");\\n\\n    function __MoneyMarket_init(address rescuer) internal initializer {\\n        __Ownable_init();\\n        __AccessControl_init();\\n\\n        // RESCUER_ROLE is managed by itself\\n        _setupRole(RESCUER_ROLE, rescuer);\\n        _setRoleAdmin(RESCUER_ROLE, RESCUER_ROLE);\\n    }\\n\\n    function deposit(uint256 amount) external virtual;\\n\\n    function withdraw(uint256 amountInUnderlying)\\n        external\\n        virtual\\n        returns (uint256 actualAmountWithdrawn);\\n\\n    function totalValue() external virtual returns (uint256); // The total value locked in the money market, in terms of the underlying stablecoin\\n\\n    function incomeIndex() external virtual returns (uint256); // Used for calculating the interest generated (e.g. cDai's price for the Compound market)\\n\\n    function stablecoin() external view virtual returns (ERC20);\\n\\n    function claimRewards() external virtual; // Claims farmed tokens (e.g. COMP, CRV) and sends it to the rewards pool\\n\\n    function setRewards(address newValue) external virtual;\\n\\n    /**\\n        @dev See {Rescuable._authorizeRescue}\\n     */\\n    function _authorizeRescue(\\n        address, /*token*/\\n        address /*target*/\\n    ) internal view virtual override {\\n        require(hasRole(RESCUER_ROLE, msg.sender), \\\"MoneyMarket: not rescuer\\\");\\n    }\\n\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n}\\n\",\"keccak256\":\"0x8611933289a63279aaee835ac6d3b6f35d1bfdc6e86c6faa84d37fa7bd97569b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/rewards/MPHMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {Vesting02} from \\\"./Vesting02.sol\\\";\\nimport {FundingMultitoken} from \\\"../tokens/FundingMultitoken.sol\\\";\\nimport {DecMath} from \\\"../libs/DecMath.sol\\\";\\nimport {DInterest} from \\\"../DInterest.sol\\\";\\nimport {MPHToken} from \\\"./MPHToken.sol\\\";\\n\\ncontract MPHMinter is AccessControlUpgradeable {\\n    using AddressUpgradeable for address;\\n    using DecMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n    bytes32 public constant WHITELISTER_ROLE = keccak256(\\\"WHITELISTER_ROLE\\\");\\n    bytes32 public constant WHITELISTED_POOL_ROLE =\\n        keccak256(\\\"WHITELISTED_POOL_ROLE\\\");\\n\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n    event ESetParamUint(\\n        address indexed sender,\\n        string indexed paramName,\\n        address pool,\\n        uint256 newValue\\n    );\\n    event MintDepositorReward(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 depositorReward\\n    );\\n    event MintFunderReward(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 funderReward\\n    );\\n\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's depositor reward.\\n                Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    mapping(address => uint256) public poolDepositorRewardMintMultiplier;\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's funder reward.\\n                Unit is MPH-wei per depositToken-wei. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    mapping(address => uint256) public poolFunderRewardMultiplier;\\n    /**\\n        @notice Multiplier used for calculating dev reward\\n     */\\n    uint256 public devRewardMultiplier;\\n    /**\\n        @notice Multiplier used for calculating gov reward\\n     */\\n    uint256 public govRewardMultiplier;\\n\\n    /**\\n        External contracts\\n     */\\n    MPHToken public mph;\\n    address public govTreasury;\\n    address public devWallet;\\n    Vesting02 public vesting02;\\n\\n    function __MPHMinter_init(\\n        address _mph,\\n        address _govTreasury,\\n        address _devWallet,\\n        address _vesting02,\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) internal initializer {\\n        __AccessControl_init();\\n        __MPHMinter_init_unchained(\\n            _mph,\\n            _govTreasury,\\n            _devWallet,\\n            _vesting02,\\n            _devRewardMultiplier,\\n            _govRewardMultiplier\\n        );\\n    }\\n\\n    function __MPHMinter_init_unchained(\\n        address _mph,\\n        address _govTreasury,\\n        address _devWallet,\\n        address _vesting02,\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // only accounts with the whitelister role can whitelist pools\\n        _setRoleAdmin(WHITELISTED_POOL_ROLE, WHITELISTER_ROLE);\\n\\n        mph = MPHToken(_mph);\\n        govTreasury = _govTreasury;\\n        devWallet = _devWallet;\\n        vesting02 = Vesting02(_vesting02);\\n        devRewardMultiplier = _devRewardMultiplier;\\n        govRewardMultiplier = _govRewardMultiplier;\\n    }\\n\\n    function initialize(\\n        address _mph,\\n        address _govTreasury,\\n        address _devWallet,\\n        address _vesting02,\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) external initializer {\\n        __MPHMinter_init(\\n            _mph,\\n            _govTreasury,\\n            _devWallet,\\n            _vesting02,\\n            _devRewardMultiplier,\\n            _govRewardMultiplier\\n        );\\n    }\\n\\n    function createVestForDeposit(address account, uint64 depositID)\\n        external\\n        onlyRole(WHITELISTED_POOL_ROLE)\\n    {\\n        vesting02.createVestForDeposit(\\n            account,\\n            msg.sender,\\n            depositID,\\n            poolDepositorRewardMintMultiplier[msg.sender]\\n        );\\n    }\\n\\n    function updateVestForDeposit(\\n        uint64 depositID,\\n        uint256 currentDepositAmount,\\n        uint256 depositAmount\\n    ) external onlyRole(WHITELISTED_POOL_ROLE) {\\n        vesting02.updateVestForDeposit(\\n            msg.sender,\\n            depositID,\\n            currentDepositAmount,\\n            depositAmount,\\n            poolDepositorRewardMintMultiplier[msg.sender]\\n        );\\n    }\\n\\n    function mintVested(address account, uint256 amount)\\n        external\\n        returns (uint256 mintedAmount)\\n    {\\n        require(msg.sender == address(vesting02), \\\"MPHMinter: not vesting02\\\");\\n        if (mph.owner() != address(this)) {\\n            // not the owner of the MPH token, cannot mint\\n            return 0;\\n        }\\n        if (amount > 0) {\\n            mph.ownerMint(account, amount);\\n        }\\n        uint256 devReward = amount.decmul(devRewardMultiplier);\\n        if (devReward > 0) {\\n            mph.ownerMint(devWallet, devReward);\\n        }\\n        uint256 govReward = amount.decmul(govRewardMultiplier);\\n        if (govReward > 0) {\\n            mph.ownerMint(govTreasury, govReward);\\n        }\\n        return amount;\\n    }\\n\\n    function distributeFundingRewards(uint64 fundingID, uint256 interestAmount)\\n        external\\n        onlyRole(WHITELISTED_POOL_ROLE)\\n    {\\n        if (interestAmount == 0 || mph.owner() != address(this)) {\\n            return;\\n        }\\n        uint256 mintMPHAmount =\\n            interestAmount.decmul(poolFunderRewardMultiplier[msg.sender]);\\n        if (mintMPHAmount == 0) {\\n            return;\\n        }\\n        FundingMultitoken fundingMultitoken =\\n            DInterest(msg.sender).fundingMultitoken();\\n        mph.ownerMint(address(this), mintMPHAmount);\\n        mph.increaseAllowance(address(fundingMultitoken), mintMPHAmount);\\n        fundingMultitoken.distributeDividends(\\n            fundingID,\\n            address(mph),\\n            mintMPHAmount\\n        );\\n\\n        uint256 devReward = mintMPHAmount.decmul(devRewardMultiplier);\\n        if (devReward > 0) {\\n            mph.ownerMint(devWallet, devReward);\\n        }\\n        uint256 govReward = mintMPHAmount.decmul(govRewardMultiplier);\\n        if (govReward > 0) {\\n            mph.ownerMint(govTreasury, govReward);\\n        }\\n    }\\n\\n    /**\\n        Param setters\\n     */\\n    function setPoolDepositorRewardMintMultiplier(\\n        address pool,\\n        uint256 newMultiplier\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(pool.isContract(), \\\"MPHMinter: pool not contract\\\");\\n        poolDepositorRewardMintMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolDepositorRewardMintMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n\\n    function setPoolFunderRewardMultiplier(address pool, uint256 newMultiplier)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(pool.isContract(), \\\"MPHMinter: pool not contract\\\");\\n        poolFunderRewardMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolFunderRewardMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n\\n    function setDevRewardMultiplier(uint256 newMultiplier)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newMultiplier <= PRECISION, \\\"MPHMinter: invalid multiplier\\\");\\n        devRewardMultiplier = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"devRewardMultiplier\\\",\\n            address(0),\\n            newMultiplier\\n        );\\n    }\\n\\n    function setGovRewardMultiplier(uint256 newMultiplier)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newMultiplier <= PRECISION, \\\"MPHMinter: invalid multiplier\\\");\\n        govRewardMultiplier = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"govRewardMultiplier\\\",\\n            address(0),\\n            newMultiplier\\n        );\\n    }\\n\\n    function setGovTreasury(address newValue)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        govTreasury = newValue;\\n        emit ESetParamAddress(msg.sender, \\\"govTreasury\\\", newValue);\\n    }\\n\\n    function setDevWallet(address newValue)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        devWallet = newValue;\\n        emit ESetParamAddress(msg.sender, \\\"devWallet\\\", newValue);\\n    }\\n\\n    function setMPHTokenOwner(address newValue)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newValue != address(0), \\\"MPHMinter: 0 address\\\");\\n        mph.transferOwnership(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"mphTokenOwner\\\", newValue);\\n    }\\n\\n    function setMPHTokenOwnerToZero() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        mph.renounceOwnership();\\n        emit ESetParamAddress(msg.sender, \\\"mphTokenOwner\\\", address(0));\\n    }\\n\\n    function setVesting02(address newValue)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(newValue.isContract(), \\\"MPHMinter: not contract\\\");\\n        vesting02 = Vesting02(newValue);\\n        emit ESetParamAddress(msg.sender, \\\"vesting02\\\", newValue);\\n    }\\n\\n    uint256[42] private __gap;\\n}\\n\",\"keccak256\":\"0x4aec207b5fa808737d7d1a86e19663c9bb2e76b026d55985a8b8b4dcd534b934\",\"license\":\"GPL-3.0-or-later\"},\"contracts/rewards/MPHToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {\\n    ERC20BurnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract MPHToken is\\n    ERC20Upgradeable,\\n    ERC20BurnableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    function initialize() external initializer {\\n        __Ownable_init();\\n        __ERC20Burnable_init();\\n        __ERC20_init(\\\"88mph.app\\\", \\\"MPH\\\");\\n    }\\n\\n    function ownerMint(address account, uint256 amount)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x28dc4f76ba6d34e3eb1788c01b0676b66c45e319534389cfdefe98100c02ab46\",\"license\":\"GPL-3.0-or-later\"},\"contracts/rewards/Vesting02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"../libs/SafeERC20.sol\\\";\\nimport {\\n    ERC721URIStorageUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    MathUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {MPHMinter} from \\\"./MPHMinter.sol\\\";\\nimport {DInterest} from \\\"../DInterest.sol\\\";\\nimport {DecMath} from \\\"../libs/DecMath.sol\\\";\\n\\ncontract Vesting02 is ERC721URIStorageUpgradeable, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using DecMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    struct Vest {\\n        address pool;\\n        uint64 depositID;\\n        uint64 lastUpdateTimestamp;\\n        uint256 accumulatedAmount;\\n        uint256 withdrawnAmount;\\n        uint256 vestAmountPerStablecoinPerSecond;\\n    }\\n    Vest[] public vestList;\\n    mapping(address => mapping(uint64 => uint64)) public depositIDToVestID;\\n\\n    MPHMinter public mphMinter;\\n    IERC20 public token;\\n    string internal _contractURI;\\n    string internal __baseURI;\\n\\n    event ECreateVest(\\n        address indexed to,\\n        address indexed pool,\\n        uint64 depositID,\\n        uint64 vestID,\\n        uint256 vestAmountPerStablecoinPerSecond\\n    );\\n    event EUpdateVest(\\n        uint64 indexed vestID,\\n        address poolAddress,\\n        uint64 depositID,\\n        uint256 currentDepositAmount,\\n        uint256 depositAmount,\\n        uint256 vestAmountPerStablecoinPerSecond\\n    );\\n    event EWithdraw(\\n        address indexed sender,\\n        uint64 indexed vestID,\\n        uint256 withdrawnAmount\\n    );\\n    event ESetMPHMinter(address newValue);\\n    event EBoost(\\n        uint64 indexed vestID,\\n        uint256 vestAmountPerStablecoinPerSecond\\n    );\\n\\n    function initialize(\\n        address _token,\\n        string calldata tokenName,\\n        string calldata tokenSymbol\\n    ) external initializer {\\n        __Ownable_init();\\n        __ERC721_init(tokenName, tokenSymbol);\\n\\n        token = IERC20(_token);\\n    }\\n\\n    function setMPHMinter(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"Vesting02: 0 address\\\");\\n        mphMinter = MPHMinter(newValue);\\n        emit ESetMPHMinter(newValue);\\n    }\\n\\n    /**\\n        MPHMinter only functions\\n     */\\n\\n    function createVestForDeposit(\\n        address to,\\n        address pool,\\n        uint64 depositID,\\n        uint256 vestAmountPerStablecoinPerSecond\\n    ) external returns (uint64 vestID) {\\n        require(\\n            address(msg.sender) == address(mphMinter),\\n            \\\"Vesting02: not minter\\\"\\n        );\\n\\n        // create vest object\\n        require(block.timestamp <= type(uint64).max, \\\"Vesting02: OVERFLOW\\\");\\n        vestList.push(\\n            Vest({\\n                pool: pool,\\n                depositID: depositID,\\n                lastUpdateTimestamp: uint64(block.timestamp),\\n                accumulatedAmount: 0,\\n                withdrawnAmount: 0,\\n                vestAmountPerStablecoinPerSecond: vestAmountPerStablecoinPerSecond\\n            })\\n        );\\n        require(vestList.length <= type(uint64).max, \\\"Vesting02: OVERFLOW\\\");\\n        vestID = uint64(vestList.length); // 1-indexed\\n        depositIDToVestID[pool][depositID] = vestID;\\n\\n        // mint NFT\\n        _safeMint(to, vestID);\\n\\n        emit ECreateVest(\\n            to,\\n            pool,\\n            depositID,\\n            vestID,\\n            vestAmountPerStablecoinPerSecond\\n        );\\n    }\\n\\n    function updateVestForDeposit(\\n        address poolAddress,\\n        uint64 depositID,\\n        uint256 currentDepositAmount,\\n        uint256 depositAmount,\\n        uint256 vestAmountPerStablecoinPerSecond\\n    ) external {\\n        require(\\n            address(msg.sender) == address(mphMinter),\\n            \\\"Vesting02: not minter\\\"\\n        );\\n\\n        uint64 vestID = depositIDToVestID[poolAddress][depositID];\\n        Vest storage vestEntry = _getVest(vestID);\\n        DInterest pool = DInterest(poolAddress);\\n        DInterest.Deposit memory depositEntry =\\n            pool.getDeposit(vestEntry.depositID);\\n        uint256 currentTimestamp =\\n            MathUpgradeable.min(\\n                block.timestamp,\\n                depositEntry.maturationTimestamp\\n            );\\n        vestEntry.accumulatedAmount += (currentDepositAmount *\\n            (currentTimestamp - vestEntry.lastUpdateTimestamp))\\n            .decmul(vestEntry.vestAmountPerStablecoinPerSecond);\\n        require(block.timestamp <= type(uint64).max, \\\"Vesting02: OVERFLOW\\\");\\n        vestEntry.lastUpdateTimestamp = uint64(block.timestamp);\\n        vestEntry.vestAmountPerStablecoinPerSecond =\\n            (vestEntry.vestAmountPerStablecoinPerSecond *\\n                currentDepositAmount +\\n                vestAmountPerStablecoinPerSecond *\\n                depositAmount) /\\n            (currentDepositAmount + depositAmount);\\n\\n        emit EUpdateVest(\\n            vestID,\\n            poolAddress,\\n            depositID,\\n            currentDepositAmount,\\n            depositAmount,\\n            vestAmountPerStablecoinPerSecond\\n        );\\n    }\\n\\n    /**\\n        Public action functions\\n     */\\n\\n    function withdraw(uint64 vestID)\\n        external\\n        returns (uint256 withdrawnAmount)\\n    {\\n        require(ownerOf(vestID) == msg.sender, \\\"Vesting02: not owner\\\");\\n\\n        // compute withdrawable amount\\n        withdrawnAmount = _getVestWithdrawableAmount(vestID);\\n        if (withdrawnAmount == 0) {\\n            return 0;\\n        }\\n\\n        // update vest object\\n        Vest storage vestEntry = _getVest(vestID);\\n        vestEntry.withdrawnAmount += withdrawnAmount;\\n\\n        // mint tokens to vest recipient\\n        mphMinter.mintVested(msg.sender, withdrawnAmount);\\n\\n        emit EWithdraw(msg.sender, vestID, withdrawnAmount);\\n    }\\n\\n    /**\\n        Public getter functions\\n     */\\n\\n    function getVestWithdrawableAmount(uint64 vestID)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _getVestWithdrawableAmount(vestID);\\n    }\\n\\n    function _getVestWithdrawableAmount(uint64 vestID)\\n        internal\\n        view\\n        returns (uint256 withdrawableAmount)\\n    {\\n        // read vest data\\n        Vest memory vestEntry = _getVest(vestID);\\n        DInterest pool = DInterest(vestEntry.pool);\\n        DInterest.Deposit memory depositEntry =\\n            pool.getDeposit(vestEntry.depositID);\\n\\n        // compute vested amount\\n        uint256 currentTimestamp =\\n            MathUpgradeable.min(\\n                block.timestamp,\\n                depositEntry.maturationTimestamp\\n            );\\n        if (currentTimestamp < vestEntry.lastUpdateTimestamp) {\\n            return vestEntry.accumulatedAmount - vestEntry.withdrawnAmount;\\n        }\\n        uint256 depositAmount =\\n            depositEntry.virtualTokenTotalSupply.decdiv(\\n                PRECISION + depositEntry.interestRate\\n            );\\n        return\\n            vestEntry.accumulatedAmount +\\n            (depositAmount * (currentTimestamp - vestEntry.lastUpdateTimestamp))\\n                .decmul(vestEntry.vestAmountPerStablecoinPerSecond) -\\n            vestEntry.withdrawnAmount;\\n    }\\n\\n    function getVest(uint64 vestID) external view returns (Vest memory) {\\n        return _getVest(vestID);\\n    }\\n\\n    function _getVest(uint64 vestID) internal view returns (Vest storage) {\\n        return vestList[vestID - 1];\\n    }\\n\\n    function numVests() external view returns (uint256) {\\n        return vestList.length;\\n    }\\n\\n    /**\\n        NFT metadata\\n     */\\n\\n    function contractURI() external view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return __baseURI;\\n    }\\n\\n    function setContractURI(string calldata newURI) external onlyOwner {\\n        _contractURI = newURI;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string calldata newURI) external {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Vesting02: not token owner\\\");\\n        _setTokenURI(tokenId, newURI);\\n    }\\n\\n    /**\\n        Owner functions\\n     */\\n\\n    function setBaseURI(string calldata newURI) external onlyOwner {\\n        __baseURI = newURI;\\n    }\\n\\n    function boost(uint64 vestID, uint256 vestAmountPerStablecoinPerSecond)\\n        external\\n        onlyOwner\\n    {\\n        _getVest(vestID)\\n            .vestAmountPerStablecoinPerSecond = vestAmountPerStablecoinPerSecond;\\n        emit EBoost(vestID, vestAmountPerStablecoinPerSecond);\\n    }\\n\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x8629cf23569f44c4c158053e7ffdf0dc6dca70734faffa42afbd22d3fd0b7873\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/FundingMultitoken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {ERC1155Upgradeable} from \\\"../libs/ERC1155Upgradeable.sol\\\";\\nimport {ERC1155DividendToken} from \\\"../libs/ERC1155DividendToken.sol\\\";\\nimport {WrappedERC1155Token} from \\\"../libs/WrappedERC1155Token.sol\\\";\\n\\ncontract FundingMultitoken is ERC1155DividendToken, WrappedERC1155Token {\\n    bytes32 public constant DIVIDEND_ROLE = keccak256(\\\"DIVIDEND_ROLE\\\");\\n\\n    function __FundingMultitoken_init(\\n        address admin,\\n        string calldata uri,\\n        address[] memory dividendTokens,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) internal initializer {\\n        __ERC1155Base_init(admin, uri);\\n        __ERC1155DividendToken_init_unchained(dividendTokens);\\n        __WrappedERC1155Token_init_unchained(\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n        __FundingMultitoken_init_unchained(admin);\\n    }\\n\\n    function __FundingMultitoken_init_unchained(address admin)\\n        internal\\n        initializer\\n    {\\n        // DIVIDEND_ROLE is managed by itself\\n        _setupRole(DIVIDEND_ROLE, admin);\\n        _setRoleAdmin(DIVIDEND_ROLE, DIVIDEND_ROLE);\\n    }\\n\\n    function initialize(\\n        address admin,\\n        string calldata uri,\\n        address[] calldata dividendTokens,\\n        address _wrapperTemplate,\\n        bool _deployWrapperOnMint,\\n        string memory _baseName,\\n        string memory _baseSymbol,\\n        uint8 _decimals\\n    ) external virtual initializer {\\n        __FundingMultitoken_init(\\n            admin,\\n            uri,\\n            dividendTokens,\\n            _wrapperTemplate,\\n            _deployWrapperOnMint,\\n            _baseName,\\n            _baseSymbol,\\n            _decimals\\n        );\\n    }\\n\\n    function distributeDividends(\\n        uint256 tokenID,\\n        address dividendToken,\\n        uint256 amount\\n    ) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _distributeDividends(tokenID, dividendToken, amount);\\n    }\\n\\n    function withdrawDividend(uint256 tokenID, address dividendToken) external {\\n        _withdrawDividend(tokenID, dividendToken, msg.sender);\\n    }\\n\\n    function withdrawDividendFor(\\n        uint256 tokenID,\\n        address dividendToken,\\n        address user\\n    ) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _withdrawDividend(tokenID, dividendToken, user);\\n    }\\n\\n    function registerDividendToken(address dividendToken) external {\\n        require(\\n            hasRole(DIVIDEND_ROLE, _msgSender()),\\n            \\\"FundingMultitoken: must have dividend role\\\"\\n        );\\n        _registerDividendToken(dividendToken);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155DividendToken, WrappedERC1155Token) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n        @dev See {ERC1155Upgradeable._shouldSkipSafeTransferAcceptanceCheck}\\n     */\\n    function _shouldSkipSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        internal\\n        override(ERC1155Upgradeable, WrappedERC1155Token)\\n        returns (bool)\\n    {\\n        return\\n            WrappedERC1155Token._shouldSkipSafeTransferAcceptanceCheck(\\n                operator,\\n                from,\\n                to,\\n                id,\\n                amount,\\n                data\\n            );\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x152ab97dfe554e8809295073a6a6a1313bee0b18edfae83f995c86129ecd4867\",\"license\":\"GPL-3.0-or-later\"},\"contracts/tokens/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    ERC721URIStorageUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract NFT is ERC721URIStorageUpgradeable, OwnableUpgradeable {\\n    string internal _contractURI;\\n    string internal __baseURI;\\n\\n    function initialize(string calldata tokenName, string calldata tokenSymbol)\\n        external\\n        initializer\\n    {\\n        __Ownable_init();\\n        __ERC721_init(tokenName, tokenSymbol);\\n    }\\n\\n    function contractURI() external view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return __baseURI;\\n    }\\n\\n    function mint(address to, uint256 tokenId) external onlyOwner {\\n        _safeMint(to, tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n    function setContractURI(string calldata newURI) external onlyOwner {\\n        _contractURI = newURI;\\n    }\\n\\n    function setTokenURI(uint256 tokenId, string calldata newURI) external {\\n        require(ownerOf(tokenId) == msg.sender, \\\"NFT: not token owner\\\");\\n        _setTokenURI(tokenId, newURI);\\n    }\\n\\n    function setBaseURI(string calldata newURI) external onlyOwner {\\n        __baseURI = newURI;\\n    }\\n\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x6d0050d3b3e44fd32468a873006378622a3465107160a11e87114a0aa6e55be2\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615aeb80620000216000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80638f91a1df1161019d578063d372bc44116100e9578063ec38a862116100a2578063f28eae8c1161007c578063f28eae8c1461079b578063f2fde38b146107ae578063f6153ccd146107c1578063f8e1152a146107cb5761030c565b8063ec38a8621461076c578063f154240a1461077f578063f20b1c76146107885761030c565b8063d372bc4414610701578063d3f8d66714610714578063d6d75f511461071e578063e46bcf9814610732578063e676e86314610745578063e9cbd822146107585761030c565b8063ac165d7a11610156578063b4b1f22f11610130578063b4b1f22f146106a9578063bc135d75146106d1578063c016cfd6146106e4578063d2402b19146106f75761030c565b8063ac165d7a14610607578063ac9650d81461061b578063ae59a6b21461063b5761030c565b80638f91a1df146105935780639530d77e146105a657806397ee1144146105b95780639a372cc7146105cd578063a5a9504e146105e0578063a832806b146105f35761030c565b80634fdf5d1d1161025c5780636e3f5d52116102155780637f2b0e4e116101ef5780637f2b0e4e1461051657806386b8f9f1146105205780638da5cb5b146105785780638f168c93146105895761030c565b80636e3f5d52146104c9578063715018a6146104dc5780637d552ea6146104e45761030c565b80634fdf5d1d14610455578063593b150d146104685780635c53ba261461047b5780635dc05d7f1461048e578063678fd937146104a257806367e3c4d4146104b55761030c565b80631ee2e389116102c95780632808bf53116102a35780632808bf53146103f05780632a80cda3146104035780632fc082ff1461041657806347857296146104425761030c565b80631ee2e3891461039e5780632125b984146103b1578063259fc70f146103c45761030c565b806301f2249b1461031157806304e5f21d1461032657806308b856d714610343578063106cffe21461034c578063138885651461036c5780631e3648931461038b575b600080fd5b61032461031f366004615145565b6107de565b005b6103306101345481565b6040519081526020015b60405180910390f35b61012e54610330565b61033061035a366004615145565b60fb6020526000908152604090205481565b6103746108b3565b60408051921515835260208301919091520161033a565b610330610399366004615458565b610a69565b6103306103ac366004615584565b610aa9565b6103246103bf36600461526d565b610b6f565b610130546103d8906001600160401b031681565b6040516001600160401b03909116815260200161033a565b6103306103fe36600461542d565b610c02565b61032461041136600461535a565b610ca5565b61013a5461042a906001600160a01b031681565b6040516001600160a01b03909116815260200161033a565b610330610450366004615545565b610d4a565b61032461046336600461517d565b610d8e565b610324610476366004615145565b610e2d565b6103d8610489366004615458565b610f05565b61013c5461042a906001600160a01b031681565b6103246104b0366004615481565b610f3a565b61013b5461042a906001600160a01b031681565b6103246104d7366004615145565b610fc2565b61032461104d565b6104f76104f23660046153ab565b6110c1565b604080516001600160401b03909316835260208301919091520161033a565b61033061012f5481565b61053361052e366004615413565b611108565b60405161033a919060006080820190506001600160401b0380845116835280602085015116602084015250604083015160408301526060830151606083015292915050565b6065546001600160a01b031661042a565b6103306101335481565b6103246105a1366004615413565b6111b9565b6103306105b4366004615413565b611287565b6101385461042a906001600160a01b031681565b6103306105db3660046155d4565b6112c4565b6103246105ee366004615145565b61137e565b61013d5461042a906001600160a01b031681565b6101395461042a906001600160a01b031681565b61062e6106293660046151b5565b611404565b60405161033a91906156d4565b61064e610649366004615413565b611522565b60405161033a9190600060c0820190508251825260208301516020830152604083015160408301526060830151606083015260808301516001600160401b0380821660808501528060a08601511660a0850152505092915050565b6106bc6106b7366004615631565b61160d565b6040805192835260208301919091520161033a565b6103306106df36600461538a565b6116d7565b6103246106f236600461526d565b61180c565b6103306101315481565b61032461070f366004615458565b611869565b6103306101355481565b6101365461042a906001600160a01b031681565b610374610740366004615413565b611965565b6103d86107533660046155d4565b611ac2565b6101375461042a906001600160a01b031681565b61032461077a366004615145565b611b6d565b61012d54610330565b610324610796366004615145565b611c44565b6104f76107a93660046153d6565b611d98565b6103246107bc366004615145565b611e62565b6103306101325481565b6106bc6107d9366004615608565b611f4d565b6065546001600160a01b031633146108115760405162461bcd60e51b8152600401610808906157c5565b60405180910390fd5b6001600160a01b0381163b6108385760405162461bcd60e51b8152600401610808906158b8565b61013d80546001600160a01b0319166001600160a01b0383161790556040516836b83426b4b73a32b960b91b81526009015b6040519081900381206001600160a01b03831682529033907f64b03eb8356730cffd396927eec0e9b1e0599498960e022df3dae35791c17cf5906020015b60405180910390a350565b6000806000676765c793fa10079d601b1b61012f5461013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190615372565b61095b91906159b0565b6109659190615990565b610135549091506000818311156109835761098082846159cf565b90505b61013654604080516306a61f7560e51b815290516000926001600160a01b03169163d4c3eea091600480830192602092919082900301818787803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190615372565b9050600082610134546101335461013254610a1d9190615978565b610a279190615978565b610a319190615978565b9050808210610a4f5760009650610a4881836159cf565b9550610a60565b60019650610a5d82826159cf565b95505b50505050509091565b600060026001541415610a8e5760405162461bcd60e51b815260040161080890615881565b6002600155610a9e338484611f9d565b600180559392505050565b600060026001541415610ace5760405162461bcd60e51b815260040161080890615881565b6002600155610ae2368390038301836152c7565b604080516001600160401b03881660208201529081018690528415156060820152631ee2e38960e01b90608001604051602081830303815290604052610b29838383611fbd565b610b45836000015184602001518560400151866060015161221b565b610b5f610b556020870187615145565b8989896000612257565b6001805598975050505050505050565b6065546001600160a01b03163314610b995760405162461bcd60e51b8152600401610808906157c5565b61013b546040516355f804b360e01b81526001600160a01b03909116906355f804b390610bcc9085908590600401615735565b600060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050505050565b600060026001541415610c275760405162461bcd60e51b815260040161080890615881565b6002600155610c3b368390038301836152c7565b604080516001600160401b0386166020820152632808bf5360e01b9101604051602081830303815290604052610c72838383611fbd565b610c8e836000015184602001518560400151866060015161221b565b610c97866122ac565b600180559695505050505050565b6065546001600160a01b03163314610ccf5760405162461bcd60e51b8152600401610808906157c5565b60008111610cef5760405162461bcd60e51b815260040161080890615827565b6101318190556040516f135a5b91195c1bdcda5d105b5bdd5b9d60821b81526010016040519081900381208282529033907ff37f82a82443ce2d0a9a47ee78cef1a46975e3f33782fcb8caf315626b73a3d4906020016108a8565b600060026001541415610d6f5760405162461bcd60e51b815260040161080890615881565b6002600155610d82338585856000612257565b60018055949350505050565b610d988282612603565b6040516370a0823160e01b81523060048201528290610e289083906001600160a01b038416906370a082319060240160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190615372565b6001600160a01b0384169190612631565b505050565b6065546001600160a01b03163314610e575760405162461bcd60e51b8152600401610808906157c5565b600080610e626108b3565b9150915081610e285761013654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401602060405180830381600087803b158015610eb257600080fd5b505af1158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190615372565b61013754909150610e28906001600160a01b03168483612631565b600060026001541415610f2a5760405162461bcd60e51b815260040161080890615881565b6002600155610a9e338484612694565b600054610100900460ff1680610f53575060005460ff16155b610f6f5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015610f91576000805461ffff19166101011790555b610fa38b8b8b8b8b8b8b8b8b8b6126b9565b8015610fb5576000805461ff00191690555b5050505050505050505050565b6065546001600160a01b03163314610fec5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b6110135760405162461bcd60e51b8152600401610808906158b8565b61013980546001600160a01b0319166001600160a01b0383161790556040516c1a5b9d195c995cdd135bd9195b609a1b8152600d0161086a565b6065546001600160a01b031633146110775760405162461bcd60e51b8152600401610808906157c5565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600080600260015414156110e75760405162461bcd60e51b815260040161080890615881565b60026001556110f933858560006127e3565b60018055909590945092505050565b60408051608081018252600080825260208201819052918101829052606081019190915261012e61113a6001846159e6565b6001600160401b03168154811061116157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160401b038082168552600160401b9091041693830193909352600183015490820152600290910154606082015290505b919050565b6065546001600160a01b031633146111e35760405162461bcd60e51b8152600401610808906157c5565b6000816001600160401b03161161120c5760405162461bcd60e51b815260040161080890615827565b610130805467ffffffffffffffff19166001600160401b0383161790556040516f13585e11195c1bdcda5d14195c9a5bd960821b81526010016040519081900381206001600160401b03831682529033907ff37f82a82443ce2d0a9a47ee78cef1a46975e3f33782fcb8caf315626b73a3d4906020016108a8565b6000600260015414156112ac5760405162461bcd60e51b815260040161080890615881565b60026001556112ba826122ac565b6001805592915050565b6000600260015414156112e95760405162461bcd60e51b815260040161080890615881565b60026001556112fd368390038301836152c7565b604080516001600160401b0387166020820152908101859052639a372cc760e01b9060600160405160208183030381529060405261133c838383611fbd565b611358836000015184602001518560400151866060015161221b565b61136f6113686020870187615145565b8888611f9d565b60018055979650505050505050565b6065546001600160a01b031633146113a85760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b6113cf5760405162461bcd60e51b8152600401610808906158b8565b61013880546001600160a01b0319166001600160a01b03831617905560405167199959535bd9195b60c21b815260080161086a565b6060816001600160401b0381111561142c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561145f57816020015b606081526020019060019003908161144a5790505b50905060005b8281101561151b576114dd3085858481811061149157634e487b7160e01b600052603260045260246000fd5b90506020028101906114a391906158ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061280a92505050565b8282815181106114fd57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061151390615a3a565b915050611465565b5092915050565b61156d6040518060c001604052806000815260200160008152602001600081526020016000815260200160006001600160401b0316815260200160006001600160401b031681525090565b61012d61157b6001846159e6565b6001600160401b0316815481106115a257634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160c081018252600590930290910180548352600181015493830193909352600283015490820152600382015460608201526004909101546001600160401b038082166080840152600160401b9091041660a08201529050919050565b600080600260015414156116335760405162461bcd60e51b815260040161080890615881565b6002600155611647368490038401846152c7565b604080516001600160401b038881166020830152871681830152815180820383018152606090910190915263b4b1f22f60e01b90611686838383611fbd565b6116a2836000015184602001518560400151866060015161221b565b6116b96116b26020880188615145565b89896128f5565b600180556001600160401b0391909116999098509650505050505050565b61013a54604080516385b3a93160e01b8152815160009384936001600160a01b03909116926385b3a931926004808301939282900301818787803b15801561171e57600080fd5b505af1158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190615240565b9150506000806117646108b3565b6101395460405163684df1a760e11b8152600481018a905260248101899052604481018790528315156064820152608481018390529294509092506001600160a01b03169063d09be34e9060a40160206040518083038186803b1580156117ca57600080fd5b505afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190615372565b9695505050505050565b6065546001600160a01b031633146118365760405162461bcd60e51b8152600401610808906157c5565b61013b5460405163938e3d7b60e01b81526001600160a01b039091169063938e3d7b90610bcc9085908590600401615735565b6065546001600160a01b031633146118935760405162461bcd60e51b8152600401610808906157c5565b600061189e8361296c565b60028101546001820154825492935090918285106118ce5760405162461bcd60e51b815260040161080890615827565b60006118ec6118e5670de0b6b3a764000085615978565b83906129b8565b600286018790559050600061190b61190488876159cf565b83906129d7565b905061191781836129b8565b6119219085615978565b866001018190555080610133600082825461193c9190615978565b9250508190555080610134600082825461195691906159cf565b90915550505050505050505050565b60008060006119738461296c565b9050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190615372565b8254600184015491925090600090611a25906118e590670de0b6b3a764000090615978565b90506000611a3382846159cf565b90506000611a4e8660020154846129d790919063ffffffff16565b9050600086600301548685611a6391906159b0565b611a6d9190615990565b9050600082611a7c8587615978565b611a869190615978565b9050808210611aa45760009950611a9d81836159cf565b9850611ab5565b60019950611ab282826159cf565b98505b5050505050505050915091565b600060026001541415611ae75760405162461bcd60e51b815260040161080890615881565b6002600155611afb368390038301836152c7565b604080516001600160401b038716602082015290810185905263e676e86360e01b90606001604051602081830303815290604052611b3a838383611fbd565b611b56836000015184602001518560400151866060015161221b565b61136f611b666020870187615145565b8888612694565b6065546001600160a01b03163314611b975760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b611bbe5760405162461bcd60e51b8152600401610808906158b8565b6101365460405163761c543160e11b81526001600160a01b0383811660048301529091169063ec38a86290602401600060405180830381600087803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b5050505060405161086a90726d6f6e65794d61726b65742e7265776172647360681b815260130190565b6065546001600160a01b03163314611c6e5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b611c955760405162461bcd60e51b8152600401610808906158b8565b61013a80546001600160a01b0319166001600160a01b03838116918217909255610136546040805163d6d75f5160e01b81529051919093169263d6d75f51916004808301926020929190829003018186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190615161565b6001600160a01b031614611d795760405162461bcd60e51b815260206004820152601560248201527444496e7465726573743a204241445f4f5241434c4560581b6044820152606401610808565b6040516d696e7465726573744f7261636c6560901b8152600e0161086a565b60008060026001541415611dbe5760405162461bcd60e51b815260040161080890615881565b6002600155611dd2368490038401846152c7565b604051633ca3aba360e21b90611e0090889088906020019182526001600160401b0316602082015260400190565b604051602081830303815290604052611e1a838383611fbd565b611e36836000015184602001518560400151866060015161221b565b611e4f611e466020880188615145565b898960006127e3565b6001805590999098509650505050505050565b6065546001600160a01b03163314611e8c5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b038116611ef15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610808565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b60008060026001541415611f735760405162461bcd60e51b815260040161080890615881565b6002600155611f833385856128f5565b600180556001600160401b03919091169590945092505050565b6000611faa8484846129ec565b9050611fb68483612ea2565b9392505050565b82516001600160a01b0316600090815260fb60205260409020546080840151146120225760405162461bcd60e51b815260206004820152601660248201527553706f6e736f7261626c653a204241445f4e4f4e434560501b6044820152606401610808565b8260a0015142111561206e5760405162461bcd60e51b815260206004820152601560248201527414dc1bdb9cdbdc98589b194e8814d251d7d1115051605a1b6044820152606401610808565b6020808401516040808601516060808801516080808a015160a0808c01518751469a81018b905230988101989098526001600160a01b039889169588019590955296909416908501529383019390935260c082015260e08101919091526001600160e01b031984166101008201526000906101200160408051601f19818403018152908290526121029185906020016156a5565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c01604051602081830303815290604052805190602001209050600061217e828760c001518860e00151896101000151612f0c565b90506001600160a01b038116158015906121a4575085516001600160a01b038281169116145b6121e75760405162461bcd60e51b815260206004820152601460248201527353706f6e736f7261626c653a204241445f53494760601b6044820152606401610808565b60808601516121f7906001615978565b95516001600160a01b0316600090815260fb60205260409020959095555050505050565b8061222557612251565b8161223b6001600160a01b0382168630856130ac565b61224f6001600160a01b0382168584612631565b505b50505050565b600080600080600061226b8a8a8a8a6130e4565b935093509350935061229e8a6122808b61296c565b60040154600160401b90046001600160401b0316868686868c6136a8565b9a9950505050505050505050565b6000806122b883613a1e565b9050600081600101549050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561231657600080fd5b505af115801561232a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234e9190615372565b61013c5460405163bd85b03960e01b81526001600160401b03881660048201529192506000916001600160a01b039091169063bd85b0399060240160206040518083038186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190615372565b90506000600160801b8560020154836123f291906159b0565b6123fc9190615990565b905083612414676765c793fa10079d601b1b836159b0565b61241e9190615990565b83612434676765c793fa10079d601b1b846159b0565b61243e9190615990565b61012f5461244c9190615978565b61245691906159cf565b61012f5560018501839055808461246d85836159b0565b6124779190615990565b61248191906159cf565b95505050505060008211156125b95761013654604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401602060405180830381600087803b1580156124d757600080fd5b505af11580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250f9190615372565b915081156125b95761013c5461013754612536916001600160a01b03918216911684613a6a565b61013c54610137546040516316f6849d60e31b81526001600160401b03861660048201526001600160a01b0391821660248201526044810185905291169063b7b424e890606401600060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506125b98383613b53565b60408051838152600060208201526001600160401b038516917f8f0a3cf13ab42f1ec8d1e3df9aa7f0b3219995863af01088afec4c3fef43f79c910160405180910390a250919050565b6065546001600160a01b0316331461262d5760405162461bcd60e51b815260040161080890615853565b5050565b6040516001600160a01b038316602482015260448101829052610e2890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d08565b6000806126a2858585613dda565b90925090506126b18582612ea2565b509392505050565b600054610100900460ff16806126d2575060005460ff16155b6126ee5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015612710576000805461ffff19166101011790555b612718614368565b6127206143dc565b61013680546001600160a01b03199081166001600160a01b038c811691909117909255610137805482168b8416179055610138805482168a84161790556101398054821689841617905561013a8054821688841617905561013b8054821687841617905561013c8054821686841617905561013d8054909116918416919091179055610130805467ffffffffffffffff19166001600160401b038d161790556101318a90558015610fb5576000805461ff00191690555050505050505050505050565b6000806127f1868686614443565b90925090506128018686856148e9565b94509492505050565b6060823b6128695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610808565b600080846001600160a01b0316846040516128849190615689565b600060405180830381855af49150503d80600081146128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b50915091506128ec8282604051806060016040528060278152602001615a8f6027913961498a565b95945050505050565b600080600061290b868660001960006001612257565b905061291a86828660016127e3565b60405191945092506001600160401b0380851691908716906001600160a01b038916907fa1784acef38e256a50f87b9b937145b9d8294956f1f444d097b9f34217e7291490600090a450935093915050565b600061012d61297c6001846159e6565b6001600160401b0316815481106129a357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050919050565b6000816129cd670de0b6b3a7640000856159b0565b611fb69190615990565b6000670de0b6b3a76400006129cd83856159b0565b6000806129f88461296c565b61013b546040516331a9108f60e11b81526001600160401b03871660048201529192506001600160a01b0387811692911690636352211e9060240160206040518083038186803b158015612a4b57600080fd5b505afa158015612a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a839190615161565b6001600160a01b031614612aa95760405162461bcd60e51b815260040161080890615853565b6004810154600090612ac59042906001600160401b03166159cf565b9050612ad184826116d7565b925060008311612b1d5760405162461bcd60e51b815260206004820152601760248201527611125b9d195c995cdd0e8810905117d2539511549154d5604a1b6044820152606401610808565b6101385460405163cf27fa5960e01b8152306004820152602481018590526000916001600160a01b03169063cf27fa599060440160206040518083038186803b158015612b6957600080fd5b505afa158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190615372565b9050612bad81856159cf565b60018401549094506000612bd4612bcc670de0b6b3a764000084615978565b8654906129b8565b9050612be08688615978565b856000016000828254612bf39190615978565b90915550612c0390508188615978565b612c0d83836159b0565b612c1f88670de0b6b3a76400006159b0565b612c299190615978565b612c339190615990565b6001860155612c428188615978565b6002860154612c5190836159b0565b612c6385670de0b6b3a76400006159b0565b612c6d9190615978565b612c779190615990565b6002860155610136546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b158015612cc357600080fd5b505af1158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190615372565b612d10676765c793fa10079d601b1b8a6159b0565b612d1a9190615990565b6003870154612d34676765c793fa10079d601b1b856159b0565b612d3e9190615990565b612d489190615978565b905080676765c793fa10079d601b1b612d61848b615978565b612d6b91906159b0565b612d759190615990565b8660030181905550876101326000828254612d909190615978565b92505081905550866101336000828254612daa9190615978565b92505081905550836101346000828254612dc49190615978565b909155505060408051898152602081018990529081018590526001600160401b038a16906001600160a01b038c16907f3cfdfbe5c59b104993c5bb7a19605a181c358415effb11a8903c7168f3948f4f9060600160405180910390a361013d54604051634452179160e11b81526001600160401b038b16600482015260248101849052604481018a90526001600160a01b03909116906388a42f2290606401600060405180830381600087803b158015612e7d57600080fd5b505af1158015612e91573d6000803e3d6000fd5b505050505050505050509392505050565b61013754612ebb906001600160a01b03168330846130ac565b6101365461013754612eda916001600160a01b03918216911683613a6a565b6101365460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401610bcc565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612f895760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610808565b8360ff16601b1480612f9e57508360ff16601c145b612ff55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610808565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613049573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128ec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610808565b6040516001600160a01b03808516602483015283166044820152606481018290526122519085906323b872dd60e01b9060840161265d565b600080600080600086116131325760405162461bcd60e51b815260206004820152601560248201527411125b9d195c995cdd0e8810905117d05353d55395605a1b6044820152606401610808565b600061313d8861296c565b9050851561319a5760048101546001600160401b031642106131955760405162461bcd60e51b815260206004820152601160248201527044496e7465726573743a204d415455524560781b6044820152606401610808565b6131ed565b60048101546001600160401b03164210156131ed5760405162461bcd60e51b815260206004820152601360248201527244496e7465726573743a20494d4d415455524560681b6044820152606401610808565b61013b546040516331a9108f60e11b81526001600160401b038a1660048201526001600160a01b038b8116921690636352211e9060240160206040518083038186803b15801561323c57600080fd5b505afa158015613250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132749190615161565b6001600160a01b03161461329a5760405162461bcd60e51b815260040161080890615853565b8054808811156132a8578097505b506001810154600282015460006132d16132ca670de0b6b3a764000085615978565b8b906129b8565b90506000896132e9576132e4828c6159cf565b6132ec565b60005b90506132f88183615978565b98505088156133ab57610138546040516376dffb8f60e01b81523060048201526001600160401b038d166024820152604481018a90526000916001600160a01b0316906376dffb8f9060640160206040518083038186803b15801561335c57600080fd5b505afa158015613370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133949190615372565b97508790506133a3818a6159cf565b9850506133b8565b6133b581836129d7565b96505b8061013260008282546133cb91906159cf565b909155506133db9050818b6159cf565b61013360008282546133ed91906159cf565b909155506133fd905081836129d7565b610134600082825461340f91906159cf565b90915550506004840154600160401b90046001600160401b0316801561355f57600061343a82613a1e565b600281015461013c5460405163bd85b03960e01b81526001600160401b0386166004820152929350600092600160801b92916001600160a01b03169063bd85b0399060240160206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190615372565b6134d991906159b0565b6134e39190615990565b905060006134f58f89600001546149c3565b9050600061350386886129d7565b8f61350e9190615978565b905061351a8382615978565b821161354a578261352b82846159cf565b856002015461353a91906159b0565b6135449190615990565b60028501555b505061355783828e614a22565b909950975050505b6000613586613576670de0b6b3a764000087615978565b61357f8f61296c565b54906129b8565b905061013d60009054906101000a90046001600160a01b03166001600160a01b03166388a42f228e8360006040518463ffffffff1660e01b81526004016135eb939291906001600160401b039390931683526020830191909152604082015260600190565b600060405180830381600087803b15801561360557600080fd5b505af1158015613619573d6000803e3d6000fd5b50505050508a6136288d61296c565b80546000906136389084906159cf565b925050819055508915158c6001600160401b03168e6001600160a01b03167fc915235dea7625ad78e3b510156c53e55606173e23b24de4bfdb0c7b9952065f8e8c604051613690929190918252602082015260400190565b60405180910390a45050505050945094509450949050565b6000811561378b57610136546000906001600160a01b0316632e1a7d4d6136cf8789615978565b6040518263ffffffff1660e01b81526004016136ed91815260200190565b602060405180830381600087803b15801561370757600080fd5b505af115801561371b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373f9190615372565b905061374b8587615978565b81106137625761375b85826159cf565b9550613782565b85811061377a5761377386826159cf565b9450613782565b809550600094505b869150506138c2565b610136546000906001600160a01b0316632e1a7d4d866137ab898b615978565b6137b59190615978565b6040518263ffffffff1660e01b81526004016137d391815260200190565b602060405180830381600087803b1580156137ed57600080fd5b505af1158015613801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138259190615372565b8792509050846138358784615978565b61383f9190615978565b8110613861578461385088836159cf565b61385a91906159cf565b95506138a2565b61386b8688615978565b811061388d578561387c88836159cf565b61388691906159cf565b94506138a2565b86811061389e5761385a87826159cf565b8091505b81156138c057610137546138c0906001600160a01b03168a84612631565b505b841561395b5761013854604080516338af3eed60e01b8152905161395b926001600160a01b0316916338af3eed916004808301926020929190829003018186803b15801561390f57600080fd5b505afa158015613923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139479190615161565b610137546001600160a01b03169087612631565b8315613a135761013c5461013754613980916001600160a01b03918216911686613a6a565b61013c54610137546040516316f6849d60e31b81526001600160401b038a1660048201526001600160a01b0391821660248201526044810187905291169063b7b424e890606401600060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b50505050828410613a1357613a1387613a0e85876159cf565b613b53565b979650505050505050565b600061012e613a2e6001846159e6565b6001600160401b031681548110613a5557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302019050919050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015613ab557600080fd5b505afa158015613ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aed9190615372565b1115613b23576040516001600160a01b038316602482015260006044820152613b2390849063095ea7b360e01b9060640161265d565b6040516001600160a01b038316602482015260448101829052610e2890849063095ea7b360e01b9060640161265d565b6000613b5e83613a1e565b8054909150600090613b78906001600160401b031661296c565b600401546001600160401b0316905042811015613c4a578154600160401b90046001600160401b031681811015613c44576000613bb582426159cf565b613bbf83856159cf565b613bc990876159b0565b613bd39190615990565b61013d54604051634999011360e11b81526001600160401b0389166004820152602481018390529192506001600160a01b031690639332022690604401600060405180830381600087803b158015613c2a57600080fd5b505af1158015613c3e573d6000803e3d6000fd5b50505050505b50613cb9565b61013d54604051634999011360e11b81526001600160401b0386166004820152602481018590526001600160a01b0390911690639332022690604401600060405180830381600087803b158015613ca057600080fd5b505af1158015613cb4573d6000803e3d6000fd5b505050505b6001600160401b03421115613ce05760405162461bcd60e51b8152600401610808906157fa565b50805467ffffffffffffffff60401b1916600160401b426001600160401b0316021790555050565b6000613d5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614e509092919063ffffffff16565b805190915015610e285780806020019051810190613d7b9190615224565b610e285760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610808565b6000806000613de88561296c565b9050600080613df56108b3565b9150915081613e3b5760405162461bcd60e51b815260206004820152601260248201527111125b9d195c995cdd0e881393d7d111509560721b6044820152606401610808565b613e4487611965565b909250905081613e8b5760405162461bcd60e51b815260206004820152601260248201527111125b9d195c995cdd0e881393d7d111509560721b6044820152606401610808565b80861115613e97578095505b610136546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b158015613ede57600080fd5b505af1158015613ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f169190615372565b905060008111613f5f5760405162461bcd60e51b815260206004820152601460248201527308892dce8cae4cae6e87440848288be929c888ab60631b6044820152606401610808565b6000613f6f8986600001546149c3565b6004860154600160401b90046001600160401b031697509050600080881580613fa25750613f9c89613a1e565b60020154155b1561411b576001600160401b03421115613fce5760405162461bcd60e51b8152600401610808906157fa565b604080516080810182526001600160401b03808e16825242811660208301908152928201878152600160801b6060840190815261012e80546001810182556000829052945160039095027fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f8101805497518616600160401b026001600160801b0319909816968616969096179690961790945590517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e380850155517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e381909301929092555411156140cf5760405162461bcd60e51b8152600401610808906157fa565b61012e5460048801805467ffffffffffffffff60401b1916600160401b6001600160401b038416021790559850846141078b856159b0565b6141119190615990565b915081905061423f565b614124896122ac565b5060006141308a613a1e565b6002015461013c5460405163bd85b03960e01b81526001600160401b038d166004820152919250600091600160801b9184916001600160a01b039091169063bd85b0399060240160206040518083038186803b15801561418f57600080fd5b505afa1580156141a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c79190615372565b6141d191906159b0565b6141db9190615990565b6141e590866159cf565b9050846141f282896159b0565b6141fc9190615990565b9650868c111561420a57869b505b866142158d836159b0565b61421f9190615990565b935081614230600160801b866159b0565b61423a9190615990565b925050505b61013c54604051630ab714fb60e11b81526001600160a01b038e811660048301526001600160401b038c166024830152604482018490529091169063156e29f690606401600060405180830381600087803b15801561429d57600080fd5b505af11580156142b1573d6000803e3d6000fd5b5050505083676765c793fa10079d601b1b836142cd91906159b0565b6142d79190615990565b61012f60008282546142e99190615978565b925050819055508161013560008282546143039190615978565b9091555050604080518b8152602081018390526001600160401b038b16916001600160a01b038f16917e041ad888f8f0041ca5438a2a667df2a6a90adb28eaf8ec67152459058415ec910160405180910390a389975050505050505050935093915050565b600054610100900460ff1680614381575060005460ff16155b61439d5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff161580156143bf576000805461ffff19166101011790555b6143c7614e67565b80156143d9576000805461ff00191690555b50565b600054610100900460ff16806143f5575060005460ff16155b6144115760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614433576000805461ffff19166101011790555b61443b614ed6565b6143c7614f40565b600080610131548410156144915760405162461bcd60e51b815260206004820152601560248201527411125b9d195c995cdd0e8810905117d05353d55395605a1b6044820152606401610808565b60006144a6426001600160401b0386166159cf565b610130549091506001600160401b03168111156144fb5760405162461bcd60e51b815260206004820152601360248201527244496e7465726573743a204241445f54494d4560681b6044820152606401610808565b61450585826116d7565b9150600082116145515760405162461bcd60e51b815260206004820152601760248201527611125b9d195c995cdd0e8810905117d2539511549154d5604a1b6044820152606401610808565b6101385460405163cf27fa5960e01b8152306004820152602481018490526000916001600160a01b03169063cf27fa599060440160206040518083038186803b15801561459d57600080fd5b505afa1580156145b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d59190615372565b90506145e181846159cf565b925061012d6040518060c0016040528085896145fd9190615978565b815260200161460c868a6129b8565b815260200161461b848a6129b8565b8152610136546040805163010e130960e51b815290516020938401936001600160a01b03909316926321c2612092600480820193918290030181600087803b15801561466657600080fd5b505af115801561467a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061469e9190615372565b81526001600160401b038089166020808401919091526000604093840181905285546001818101885596825290829020855160059092020190815590840151948101949094559082015160028401556060820151600384015560808201516004909301805460a0909301518216600160401b026001600160801b0319909316938216939093179190911790915561012d54111561474d5760405162461bcd60e51b8152600401610808906157fa565b61012d8054905093508561013260008282546147699190615978565b925050819055508261013360008282546147839190615978565b9250508190555080610134600082825461479d9190615978565b909155505061013b546040516340c10f1960e01b81526001600160a01b0389811660048301526001600160401b0387166024830152909116906340c10f1990604401600060405180830381600087803b1580156147f957600080fd5b505af115801561480d573d6000803e3d6000fd5b505060408051898152602081018790529081018490526001600160401b038881166060830152871692506001600160a01b038a1691507f61431584ca96282c2c6748c4dabd382bc28bde7792a7fa3c3668927bedf4446f9060800160405180910390a361013d54604051631a3ee6b160e01b81526001600160a01b0389811660048301526001600160401b038716602483015290911690631a3ee6b190604401600060405180830381600087803b1580156148c757600080fd5b505af11580156148db573d6000803e3d6000fd5b505050505050935093915050565b80610e285761013754614907906001600160a01b03168430856130ac565b6101365461013754614926916001600160a01b03918216911684613a6a565b6101365460405163b6b55f2560e01b8152600481018490526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561496d57600080fd5b505af1158015614981573d6000803e3d6000fd5b50505050505050565b60608315614999575081611fb6565b8251156149a95782518084602001fd5b8160405162461bcd60e51b81526004016108089190615764565b6000806149cf8461296c565b90506000816001015490506128ec670de0b6b3a76400008360020154836149f69190615978565b614a009190615978565b614a1c614a15670de0b6b3a764000085615978565b87906129b8565b906129d7565b6000806000614a3086613a1e565b600281015461013c5460405163bd85b03960e01b81526001600160401b038a166004820152929350600092600160801b92916001600160a01b03169063bd85b0399060240160206040518083038186803b158015614a8d57600080fd5b505afa158015614aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ac59190615372565b614acf91906159b0565b614ad99190615990565b9050600082600101549050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b158015614b3757600080fd5b505af1158015614b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6f9190615372565b905060008111614bb85760405162461bcd60e51b815260206004820152601460248201527308892dce8cae4cae6e87440848288be929c888ab60631b6044820152606401610808565b600081614bd0676765c793fa10079d601b1b866159b0565b614bda9190615990565b9050600083614bf4676765c793fa10079d601b1b8c6159b0565b614bfe9190615990565b9050808261012f54614c109190615978565b10614c3857808261012f54614c259190615978565b614c2f91906159cf565b61012f55614c3f565b600061012f555b60018601839055614c50858b6159cf565b6101356000828254614c6291906159cf565b909155508a905084614c7485836159b0565b614c7e9190615990565b614c8891906159cf565b9750505050508415614e02578154600090614cab906001600160401b031661296c565b6001810154600282015461013a54604080516385b3a93160e01b81528151959650939492936000936001600160a01b03909316926385b3a9319260048084019391929182900301818787803b158015614d0357600080fd5b505af1158015614d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d3b9190615240565b6004860154909250670de0b6b3a76400009150614d629042906001600160401b03166159cf565b614d8583670de0b6b3a7640000898f614d7b91906159cf565b614a1c91906159b0565b614d8f91906159b0565b614d999190615990565b96506000614ddc614daa8486615978565b614a1c85614dc088670de0b6b3a7640000615978565b614dca9190615978565b898f614dd691906159cf565b906129b8565b905080881115614dec5780614dee565b875b9750614dfa888a615978565b985050505050505b60408051858152602081018590526001600160401b038916917f8f0a3cf13ab42f1ec8d1e3df9aa7f0b3219995863af01088afec4c3fef43f79c910160405180910390a25050935093915050565b6060614e5f8484600085614fee565b949350505050565b600054610100900460ff1680614e80575060005460ff16155b614e9c5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614ebe576000805461ffff19166101011790555b6001805580156143d9576000805461ff001916905550565b600054610100900460ff1680614eef575060005460ff16155b614f0b5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff161580156143c7576000805461ffff191661010117905580156143d9576000805461ff001916905550565b600054610100900460ff1680614f59575060005460ff16155b614f755760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614f97576000805461ffff19166101011790555b606580546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156143d9576000805461ff001916905550565b60608247101561504f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610808565b843b61509d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610808565b600080866001600160a01b031685876040516150b99190615689565b60006040518083038185875af1925050503d80600081146150f6576040519150601f19603f3d011682016040523d82523d6000602084013e6150fb565b606091505b5091509150613a1382828661498a565b80356111b481615a6b565b60006101208284031215615128578081fd5b50919050565b80356001600160401b03811681146111b457600080fd5b600060208284031215615156578081fd5b8135611fb681615a6b565b600060208284031215615172578081fd5b8151611fb681615a6b565b6000806040838503121561518f578081fd5b823561519a81615a6b565b915060208301356151aa81615a6b565b809150509250929050565b600080602083850312156151c7578182fd5b82356001600160401b03808211156151dd578384fd5b818501915085601f8301126151f0578384fd5b8135818111156151fe578485fd5b8660208260051b8501011115615212578485fd5b60209290920196919550909350505050565b600060208284031215615235578081fd5b8151611fb681615a80565b60008060408385031215615252578182fd5b825161525d81615a80565b6020939093015192949293505050565b6000806020838503121561527f578182fd5b82356001600160401b0380821115615295578384fd5b818501915085601f8301126152a8578384fd5b8135818111156152b6578485fd5b866020828501011115615212578485fd5b60006101208083850312156152da578182fd5b6152e38161593a565b90506152ee8361510b565b81526152fc6020840161510b565b602082015261530d6040840161510b565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b60006020828403121561536b578081fd5b5035919050565b600060208284031215615383578081fd5b5051919050565b6000806040838503121561539c578182fd5b50508035926020909101359150565b600080604083850312156153bd578182fd5b823591506153cd6020840161512e565b90509250929050565b600080600061016084860312156153eb578081fd5b833592506153fb6020850161512e565b915061540a8560408601615116565b90509250925092565b600060208284031215615424578081fd5b611fb68261512e565b6000806101408385031215615440578182fd5b6154498361512e565b91506153cd8460208501615116565b6000806040838503121561546a578182fd5b6154738361512e565b946020939093013593505050565b6000806000806000806000806000806101408b8d0312156154a0578788fd5b6154a98b61512e565b995060208b0135985060408b01356154c081615a6b565b975060608b01356154d081615a6b565b965060808b01356154e081615a6b565b955060a08b01356154f081615a6b565b945060c08b013561550081615a6b565b935060e08b013561551081615a6b565b92506101008b013561552181615a6b565b91506101208b013561553281615a6b565b809150509295989b9194979a5092959850565b600080600060608486031215615559578081fd5b6155628461512e565b925060208401359150604084013561557981615a80565b809150509250925092565b600080600080610180858703121561559a578182fd5b6155a38561512e565b93506020850135925060408501356155ba81615a80565b91506155c98660608701615116565b905092959194509250565b600080600061016084860312156155e9578081fd5b6155f28461512e565b92506020840135915061540a8560408601615116565b6000806040838503121561561a578182fd5b6156238361512e565b91506153cd6020840161512e565b60008060006101608486031215615646578081fd5b61564f8461512e565b92506153fb6020850161512e565b60008151808452615675816020860160208601615a0e565b601f01601f19169290920160200192915050565b6000825161569b818460208701615a0e565b9190910192915050565b600083516156b7818460208801615a0e565b8351908301906156cb818360208801615a0e565b01949350505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561572857603f1988860301845261571685835161565d565b945092850192908501906001016156fa565b5092979650505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252611fb6602083018461565d565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527244496e7465726573743a204f564552464c4f5760681b604082015260600190565b60208082526012908201527111125b9d195c995cdd0e8810905117d5905360721b604082015260600190565b6020808252601490820152732224b73a32b932b9ba1d102727aa2fa7aba722a960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526017908201527f44496e7465726573743a204e4f545f434f4e5452414354000000000000000000604082015260600190565b6000808335601e19843603018112615905578283fd5b8301803591506001600160401b0382111561591e578283fd5b60200191503681900382131561593357600080fd5b9250929050565b604051601f8201601f191681016001600160401b038111828210171561597057634e487b7160e01b600052604160045260246000fd5b604052919050565b6000821982111561598b5761598b615a55565b500190565b6000826159ab57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156159ca576159ca615a55565b500290565b6000828210156159e1576159e1615a55565b500390565b60006001600160401b0383811690831681811015615a0657615a06615a55565b039392505050565b60005b83811015615a29578181015183820152602001615a11565b838111156122515750506000910152565b6000600019821415615a4e57615a4e615a55565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146143d957600080fd5b80151581146143d957600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d2e7f25aa9a806a6c002abfad15cb8dcc38b1ce57055a5ca22de9412516adf9b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80638f91a1df1161019d578063d372bc44116100e9578063ec38a862116100a2578063f28eae8c1161007c578063f28eae8c1461079b578063f2fde38b146107ae578063f6153ccd146107c1578063f8e1152a146107cb5761030c565b8063ec38a8621461076c578063f154240a1461077f578063f20b1c76146107885761030c565b8063d372bc4414610701578063d3f8d66714610714578063d6d75f511461071e578063e46bcf9814610732578063e676e86314610745578063e9cbd822146107585761030c565b8063ac165d7a11610156578063b4b1f22f11610130578063b4b1f22f146106a9578063bc135d75146106d1578063c016cfd6146106e4578063d2402b19146106f75761030c565b8063ac165d7a14610607578063ac9650d81461061b578063ae59a6b21461063b5761030c565b80638f91a1df146105935780639530d77e146105a657806397ee1144146105b95780639a372cc7146105cd578063a5a9504e146105e0578063a832806b146105f35761030c565b80634fdf5d1d1161025c5780636e3f5d52116102155780637f2b0e4e116101ef5780637f2b0e4e1461051657806386b8f9f1146105205780638da5cb5b146105785780638f168c93146105895761030c565b80636e3f5d52146104c9578063715018a6146104dc5780637d552ea6146104e45761030c565b80634fdf5d1d14610455578063593b150d146104685780635c53ba261461047b5780635dc05d7f1461048e578063678fd937146104a257806367e3c4d4146104b55761030c565b80631ee2e389116102c95780632808bf53116102a35780632808bf53146103f05780632a80cda3146104035780632fc082ff1461041657806347857296146104425761030c565b80631ee2e3891461039e5780632125b984146103b1578063259fc70f146103c45761030c565b806301f2249b1461031157806304e5f21d1461032657806308b856d714610343578063106cffe21461034c578063138885651461036c5780631e3648931461038b575b600080fd5b61032461031f366004615145565b6107de565b005b6103306101345481565b6040519081526020015b60405180910390f35b61012e54610330565b61033061035a366004615145565b60fb6020526000908152604090205481565b6103746108b3565b60408051921515835260208301919091520161033a565b610330610399366004615458565b610a69565b6103306103ac366004615584565b610aa9565b6103246103bf36600461526d565b610b6f565b610130546103d8906001600160401b031681565b6040516001600160401b03909116815260200161033a565b6103306103fe36600461542d565b610c02565b61032461041136600461535a565b610ca5565b61013a5461042a906001600160a01b031681565b6040516001600160a01b03909116815260200161033a565b610330610450366004615545565b610d4a565b61032461046336600461517d565b610d8e565b610324610476366004615145565b610e2d565b6103d8610489366004615458565b610f05565b61013c5461042a906001600160a01b031681565b6103246104b0366004615481565b610f3a565b61013b5461042a906001600160a01b031681565b6103246104d7366004615145565b610fc2565b61032461104d565b6104f76104f23660046153ab565b6110c1565b604080516001600160401b03909316835260208301919091520161033a565b61033061012f5481565b61053361052e366004615413565b611108565b60405161033a919060006080820190506001600160401b0380845116835280602085015116602084015250604083015160408301526060830151606083015292915050565b6065546001600160a01b031661042a565b6103306101335481565b6103246105a1366004615413565b6111b9565b6103306105b4366004615413565b611287565b6101385461042a906001600160a01b031681565b6103306105db3660046155d4565b6112c4565b6103246105ee366004615145565b61137e565b61013d5461042a906001600160a01b031681565b6101395461042a906001600160a01b031681565b61062e6106293660046151b5565b611404565b60405161033a91906156d4565b61064e610649366004615413565b611522565b60405161033a9190600060c0820190508251825260208301516020830152604083015160408301526060830151606083015260808301516001600160401b0380821660808501528060a08601511660a0850152505092915050565b6106bc6106b7366004615631565b61160d565b6040805192835260208301919091520161033a565b6103306106df36600461538a565b6116d7565b6103246106f236600461526d565b61180c565b6103306101315481565b61032461070f366004615458565b611869565b6103306101355481565b6101365461042a906001600160a01b031681565b610374610740366004615413565b611965565b6103d86107533660046155d4565b611ac2565b6101375461042a906001600160a01b031681565b61032461077a366004615145565b611b6d565b61012d54610330565b610324610796366004615145565b611c44565b6104f76107a93660046153d6565b611d98565b6103246107bc366004615145565b611e62565b6103306101325481565b6106bc6107d9366004615608565b611f4d565b6065546001600160a01b031633146108115760405162461bcd60e51b8152600401610808906157c5565b60405180910390fd5b6001600160a01b0381163b6108385760405162461bcd60e51b8152600401610808906158b8565b61013d80546001600160a01b0319166001600160a01b0383161790556040516836b83426b4b73a32b960b91b81526009015b6040519081900381206001600160a01b03831682529033907f64b03eb8356730cffd396927eec0e9b1e0599498960e022df3dae35791c17cf5906020015b60405180910390a350565b6000806000676765c793fa10079d601b1b61012f5461013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190615372565b61095b91906159b0565b6109659190615990565b610135549091506000818311156109835761098082846159cf565b90505b61013654604080516306a61f7560e51b815290516000926001600160a01b03169163d4c3eea091600480830192602092919082900301818787803b1580156109ca57600080fd5b505af11580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a029190615372565b9050600082610134546101335461013254610a1d9190615978565b610a279190615978565b610a319190615978565b9050808210610a4f5760009650610a4881836159cf565b9550610a60565b60019650610a5d82826159cf565b95505b50505050509091565b600060026001541415610a8e5760405162461bcd60e51b815260040161080890615881565b6002600155610a9e338484611f9d565b600180559392505050565b600060026001541415610ace5760405162461bcd60e51b815260040161080890615881565b6002600155610ae2368390038301836152c7565b604080516001600160401b03881660208201529081018690528415156060820152631ee2e38960e01b90608001604051602081830303815290604052610b29838383611fbd565b610b45836000015184602001518560400151866060015161221b565b610b5f610b556020870187615145565b8989896000612257565b6001805598975050505050505050565b6065546001600160a01b03163314610b995760405162461bcd60e51b8152600401610808906157c5565b61013b546040516355f804b360e01b81526001600160a01b03909116906355f804b390610bcc9085908590600401615735565b600060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050505050565b600060026001541415610c275760405162461bcd60e51b815260040161080890615881565b6002600155610c3b368390038301836152c7565b604080516001600160401b0386166020820152632808bf5360e01b9101604051602081830303815290604052610c72838383611fbd565b610c8e836000015184602001518560400151866060015161221b565b610c97866122ac565b600180559695505050505050565b6065546001600160a01b03163314610ccf5760405162461bcd60e51b8152600401610808906157c5565b60008111610cef5760405162461bcd60e51b815260040161080890615827565b6101318190556040516f135a5b91195c1bdcda5d105b5bdd5b9d60821b81526010016040519081900381208282529033907ff37f82a82443ce2d0a9a47ee78cef1a46975e3f33782fcb8caf315626b73a3d4906020016108a8565b600060026001541415610d6f5760405162461bcd60e51b815260040161080890615881565b6002600155610d82338585856000612257565b60018055949350505050565b610d988282612603565b6040516370a0823160e01b81523060048201528290610e289083906001600160a01b038416906370a082319060240160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190615372565b6001600160a01b0384169190612631565b505050565b6065546001600160a01b03163314610e575760405162461bcd60e51b8152600401610808906157c5565b600080610e626108b3565b9150915081610e285761013654604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401602060405180830381600087803b158015610eb257600080fd5b505af1158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea9190615372565b61013754909150610e28906001600160a01b03168483612631565b600060026001541415610f2a5760405162461bcd60e51b815260040161080890615881565b6002600155610a9e338484612694565b600054610100900460ff1680610f53575060005460ff16155b610f6f5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015610f91576000805461ffff19166101011790555b610fa38b8b8b8b8b8b8b8b8b8b6126b9565b8015610fb5576000805461ff00191690555b5050505050505050505050565b6065546001600160a01b03163314610fec5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b6110135760405162461bcd60e51b8152600401610808906158b8565b61013980546001600160a01b0319166001600160a01b0383161790556040516c1a5b9d195c995cdd135bd9195b609a1b8152600d0161086a565b6065546001600160a01b031633146110775760405162461bcd60e51b8152600401610808906157c5565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b600080600260015414156110e75760405162461bcd60e51b815260040161080890615881565b60026001556110f933858560006127e3565b60018055909590945092505050565b60408051608081018252600080825260208201819052918101829052606081019190915261012e61113a6001846159e6565b6001600160401b03168154811061116157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051608081018252600390930290910180546001600160401b038082168552600160401b9091041693830193909352600183015490820152600290910154606082015290505b919050565b6065546001600160a01b031633146111e35760405162461bcd60e51b8152600401610808906157c5565b6000816001600160401b03161161120c5760405162461bcd60e51b815260040161080890615827565b610130805467ffffffffffffffff19166001600160401b0383161790556040516f13585e11195c1bdcda5d14195c9a5bd960821b81526010016040519081900381206001600160401b03831682529033907ff37f82a82443ce2d0a9a47ee78cef1a46975e3f33782fcb8caf315626b73a3d4906020016108a8565b6000600260015414156112ac5760405162461bcd60e51b815260040161080890615881565b60026001556112ba826122ac565b6001805592915050565b6000600260015414156112e95760405162461bcd60e51b815260040161080890615881565b60026001556112fd368390038301836152c7565b604080516001600160401b0387166020820152908101859052639a372cc760e01b9060600160405160208183030381529060405261133c838383611fbd565b611358836000015184602001518560400151866060015161221b565b61136f6113686020870187615145565b8888611f9d565b60018055979650505050505050565b6065546001600160a01b031633146113a85760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b6113cf5760405162461bcd60e51b8152600401610808906158b8565b61013880546001600160a01b0319166001600160a01b03831617905560405167199959535bd9195b60c21b815260080161086a565b6060816001600160401b0381111561142c57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561145f57816020015b606081526020019060019003908161144a5790505b50905060005b8281101561151b576114dd3085858481811061149157634e487b7160e01b600052603260045260246000fd5b90506020028101906114a391906158ef565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061280a92505050565b8282815181106114fd57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061151390615a3a565b915050611465565b5092915050565b61156d6040518060c001604052806000815260200160008152602001600081526020016000815260200160006001600160401b0316815260200160006001600160401b031681525090565b61012d61157b6001846159e6565b6001600160401b0316815481106115a257634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160c081018252600590930290910180548352600181015493830193909352600283015490820152600382015460608201526004909101546001600160401b038082166080840152600160401b9091041660a08201529050919050565b600080600260015414156116335760405162461bcd60e51b815260040161080890615881565b6002600155611647368490038401846152c7565b604080516001600160401b038881166020830152871681830152815180820383018152606090910190915263b4b1f22f60e01b90611686838383611fbd565b6116a2836000015184602001518560400151866060015161221b565b6116b96116b26020880188615145565b89896128f5565b600180556001600160401b0391909116999098509650505050505050565b61013a54604080516385b3a93160e01b8152815160009384936001600160a01b03909116926385b3a931926004808301939282900301818787803b15801561171e57600080fd5b505af1158015611732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117569190615240565b9150506000806117646108b3565b6101395460405163684df1a760e11b8152600481018a905260248101899052604481018790528315156064820152608481018390529294509092506001600160a01b03169063d09be34e9060a40160206040518083038186803b1580156117ca57600080fd5b505afa1580156117de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118029190615372565b9695505050505050565b6065546001600160a01b031633146118365760405162461bcd60e51b8152600401610808906157c5565b61013b5460405163938e3d7b60e01b81526001600160a01b039091169063938e3d7b90610bcc9085908590600401615735565b6065546001600160a01b031633146118935760405162461bcd60e51b8152600401610808906157c5565b600061189e8361296c565b60028101546001820154825492935090918285106118ce5760405162461bcd60e51b815260040161080890615827565b60006118ec6118e5670de0b6b3a764000085615978565b83906129b8565b600286018790559050600061190b61190488876159cf565b83906129d7565b905061191781836129b8565b6119219085615978565b866001018190555080610133600082825461193c9190615978565b9250508190555080610134600082825461195691906159cf565b90915550505050505050505050565b60008060006119738461296c565b9050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a009190615372565b8254600184015491925090600090611a25906118e590670de0b6b3a764000090615978565b90506000611a3382846159cf565b90506000611a4e8660020154846129d790919063ffffffff16565b9050600086600301548685611a6391906159b0565b611a6d9190615990565b9050600082611a7c8587615978565b611a869190615978565b9050808210611aa45760009950611a9d81836159cf565b9850611ab5565b60019950611ab282826159cf565b98505b5050505050505050915091565b600060026001541415611ae75760405162461bcd60e51b815260040161080890615881565b6002600155611afb368390038301836152c7565b604080516001600160401b038716602082015290810185905263e676e86360e01b90606001604051602081830303815290604052611b3a838383611fbd565b611b56836000015184602001518560400151866060015161221b565b61136f611b666020870187615145565b8888612694565b6065546001600160a01b03163314611b975760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b611bbe5760405162461bcd60e51b8152600401610808906158b8565b6101365460405163761c543160e11b81526001600160a01b0383811660048301529091169063ec38a86290602401600060405180830381600087803b158015611c0657600080fd5b505af1158015611c1a573d6000803e3d6000fd5b5050505060405161086a90726d6f6e65794d61726b65742e7265776172647360681b815260130190565b6065546001600160a01b03163314611c6e5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b0381163b611c955760405162461bcd60e51b8152600401610808906158b8565b61013a80546001600160a01b0319166001600160a01b03838116918217909255610136546040805163d6d75f5160e01b81529051919093169263d6d75f51916004808301926020929190829003018186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190615161565b6001600160a01b031614611d795760405162461bcd60e51b815260206004820152601560248201527444496e7465726573743a204241445f4f5241434c4560581b6044820152606401610808565b6040516d696e7465726573744f7261636c6560901b8152600e0161086a565b60008060026001541415611dbe5760405162461bcd60e51b815260040161080890615881565b6002600155611dd2368490038401846152c7565b604051633ca3aba360e21b90611e0090889088906020019182526001600160401b0316602082015260400190565b604051602081830303815290604052611e1a838383611fbd565b611e36836000015184602001518560400151866060015161221b565b611e4f611e466020880188615145565b898960006127e3565b6001805590999098509650505050505050565b6065546001600160a01b03163314611e8c5760405162461bcd60e51b8152600401610808906157c5565b6001600160a01b038116611ef15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610808565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b60008060026001541415611f735760405162461bcd60e51b815260040161080890615881565b6002600155611f833385856128f5565b600180556001600160401b03919091169590945092505050565b6000611faa8484846129ec565b9050611fb68483612ea2565b9392505050565b82516001600160a01b0316600090815260fb60205260409020546080840151146120225760405162461bcd60e51b815260206004820152601660248201527553706f6e736f7261626c653a204241445f4e4f4e434560501b6044820152606401610808565b8260a0015142111561206e5760405162461bcd60e51b815260206004820152601560248201527414dc1bdb9cdbdc98589b194e8814d251d7d1115051605a1b6044820152606401610808565b6020808401516040808601516060808801516080808a015160a0808c01518751469a81018b905230988101989098526001600160a01b039889169588019590955296909416908501529383019390935260c082015260e08101919091526001600160e01b031984166101008201526000906101200160408051601f19818403018152908290526121029185906020016156a5565b60408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c01604051602081830303815290604052805190602001209050600061217e828760c001518860e00151896101000151612f0c565b90506001600160a01b038116158015906121a4575085516001600160a01b038281169116145b6121e75760405162461bcd60e51b815260206004820152601460248201527353706f6e736f7261626c653a204241445f53494760601b6044820152606401610808565b60808601516121f7906001615978565b95516001600160a01b0316600090815260fb60205260409020959095555050505050565b8061222557612251565b8161223b6001600160a01b0382168630856130ac565b61224f6001600160a01b0382168584612631565b505b50505050565b600080600080600061226b8a8a8a8a6130e4565b935093509350935061229e8a6122808b61296c565b60040154600160401b90046001600160401b0316868686868c6136a8565b9a9950505050505050505050565b6000806122b883613a1e565b9050600081600101549050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561231657600080fd5b505af115801561232a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234e9190615372565b61013c5460405163bd85b03960e01b81526001600160401b03881660048201529192506000916001600160a01b039091169063bd85b0399060240160206040518083038186803b1580156123a157600080fd5b505afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190615372565b90506000600160801b8560020154836123f291906159b0565b6123fc9190615990565b905083612414676765c793fa10079d601b1b836159b0565b61241e9190615990565b83612434676765c793fa10079d601b1b846159b0565b61243e9190615990565b61012f5461244c9190615978565b61245691906159cf565b61012f5560018501839055808461246d85836159b0565b6124779190615990565b61248191906159cf565b95505050505060008211156125b95761013654604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401602060405180830381600087803b1580156124d757600080fd5b505af11580156124eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250f9190615372565b915081156125b95761013c5461013754612536916001600160a01b03918216911684613a6a565b61013c54610137546040516316f6849d60e31b81526001600160401b03861660048201526001600160a01b0391821660248201526044810185905291169063b7b424e890606401600060405180830381600087803b15801561259757600080fd5b505af11580156125ab573d6000803e3d6000fd5b505050506125b98383613b53565b60408051838152600060208201526001600160401b038516917f8f0a3cf13ab42f1ec8d1e3df9aa7f0b3219995863af01088afec4c3fef43f79c910160405180910390a250919050565b6065546001600160a01b0316331461262d5760405162461bcd60e51b815260040161080890615853565b5050565b6040516001600160a01b038316602482015260448101829052610e2890849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613d08565b6000806126a2858585613dda565b90925090506126b18582612ea2565b509392505050565b600054610100900460ff16806126d2575060005460ff16155b6126ee5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015612710576000805461ffff19166101011790555b612718614368565b6127206143dc565b61013680546001600160a01b03199081166001600160a01b038c811691909117909255610137805482168b8416179055610138805482168a84161790556101398054821689841617905561013a8054821688841617905561013b8054821687841617905561013c8054821686841617905561013d8054909116918416919091179055610130805467ffffffffffffffff19166001600160401b038d161790556101318a90558015610fb5576000805461ff00191690555050505050505050505050565b6000806127f1868686614443565b90925090506128018686856148e9565b94509492505050565b6060823b6128695760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610808565b600080846001600160a01b0316846040516128849190615689565b600060405180830381855af49150503d80600081146128bf576040519150601f19603f3d011682016040523d82523d6000602084013e6128c4565b606091505b50915091506128ec8282604051806060016040528060278152602001615a8f6027913961498a565b95945050505050565b600080600061290b868660001960006001612257565b905061291a86828660016127e3565b60405191945092506001600160401b0380851691908716906001600160a01b038916907fa1784acef38e256a50f87b9b937145b9d8294956f1f444d097b9f34217e7291490600090a450935093915050565b600061012d61297c6001846159e6565b6001600160401b0316815481106129a357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502019050919050565b6000816129cd670de0b6b3a7640000856159b0565b611fb69190615990565b6000670de0b6b3a76400006129cd83856159b0565b6000806129f88461296c565b61013b546040516331a9108f60e11b81526001600160401b03871660048201529192506001600160a01b0387811692911690636352211e9060240160206040518083038186803b158015612a4b57600080fd5b505afa158015612a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a839190615161565b6001600160a01b031614612aa95760405162461bcd60e51b815260040161080890615853565b6004810154600090612ac59042906001600160401b03166159cf565b9050612ad184826116d7565b925060008311612b1d5760405162461bcd60e51b815260206004820152601760248201527611125b9d195c995cdd0e8810905117d2539511549154d5604a1b6044820152606401610808565b6101385460405163cf27fa5960e01b8152306004820152602481018590526000916001600160a01b03169063cf27fa599060440160206040518083038186803b158015612b6957600080fd5b505afa158015612b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba19190615372565b9050612bad81856159cf565b60018401549094506000612bd4612bcc670de0b6b3a764000084615978565b8654906129b8565b9050612be08688615978565b856000016000828254612bf39190615978565b90915550612c0390508188615978565b612c0d83836159b0565b612c1f88670de0b6b3a76400006159b0565b612c299190615978565b612c339190615990565b6001860155612c428188615978565b6002860154612c5190836159b0565b612c6385670de0b6b3a76400006159b0565b612c6d9190615978565b612c779190615990565b6002860155610136546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b158015612cc357600080fd5b505af1158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190615372565b612d10676765c793fa10079d601b1b8a6159b0565b612d1a9190615990565b6003870154612d34676765c793fa10079d601b1b856159b0565b612d3e9190615990565b612d489190615978565b905080676765c793fa10079d601b1b612d61848b615978565b612d6b91906159b0565b612d759190615990565b8660030181905550876101326000828254612d909190615978565b92505081905550866101336000828254612daa9190615978565b92505081905550836101346000828254612dc49190615978565b909155505060408051898152602081018990529081018590526001600160401b038a16906001600160a01b038c16907f3cfdfbe5c59b104993c5bb7a19605a181c358415effb11a8903c7168f3948f4f9060600160405180910390a361013d54604051634452179160e11b81526001600160401b038b16600482015260248101849052604481018a90526001600160a01b03909116906388a42f2290606401600060405180830381600087803b158015612e7d57600080fd5b505af1158015612e91573d6000803e3d6000fd5b505050505050505050509392505050565b61013754612ebb906001600160a01b03168330846130ac565b6101365461013754612eda916001600160a01b03918216911683613a6a565b6101365460405163b6b55f2560e01b8152600481018390526001600160a01b039091169063b6b55f2590602401610bcc565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612f895760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610808565b8360ff16601b1480612f9e57508360ff16601c145b612ff55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610808565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613049573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166128ec5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610808565b6040516001600160a01b03808516602483015283166044820152606481018290526122519085906323b872dd60e01b9060840161265d565b600080600080600086116131325760405162461bcd60e51b815260206004820152601560248201527411125b9d195c995cdd0e8810905117d05353d55395605a1b6044820152606401610808565b600061313d8861296c565b9050851561319a5760048101546001600160401b031642106131955760405162461bcd60e51b815260206004820152601160248201527044496e7465726573743a204d415455524560781b6044820152606401610808565b6131ed565b60048101546001600160401b03164210156131ed5760405162461bcd60e51b815260206004820152601360248201527244496e7465726573743a20494d4d415455524560681b6044820152606401610808565b61013b546040516331a9108f60e11b81526001600160401b038a1660048201526001600160a01b038b8116921690636352211e9060240160206040518083038186803b15801561323c57600080fd5b505afa158015613250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132749190615161565b6001600160a01b03161461329a5760405162461bcd60e51b815260040161080890615853565b8054808811156132a8578097505b506001810154600282015460006132d16132ca670de0b6b3a764000085615978565b8b906129b8565b90506000896132e9576132e4828c6159cf565b6132ec565b60005b90506132f88183615978565b98505088156133ab57610138546040516376dffb8f60e01b81523060048201526001600160401b038d166024820152604481018a90526000916001600160a01b0316906376dffb8f9060640160206040518083038186803b15801561335c57600080fd5b505afa158015613370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133949190615372565b97508790506133a3818a6159cf565b9850506133b8565b6133b581836129d7565b96505b8061013260008282546133cb91906159cf565b909155506133db9050818b6159cf565b61013360008282546133ed91906159cf565b909155506133fd905081836129d7565b610134600082825461340f91906159cf565b90915550506004840154600160401b90046001600160401b0316801561355f57600061343a82613a1e565b600281015461013c5460405163bd85b03960e01b81526001600160401b0386166004820152929350600092600160801b92916001600160a01b03169063bd85b0399060240160206040518083038186803b15801561349757600080fd5b505afa1580156134ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134cf9190615372565b6134d991906159b0565b6134e39190615990565b905060006134f58f89600001546149c3565b9050600061350386886129d7565b8f61350e9190615978565b905061351a8382615978565b821161354a578261352b82846159cf565b856002015461353a91906159b0565b6135449190615990565b60028501555b505061355783828e614a22565b909950975050505b6000613586613576670de0b6b3a764000087615978565b61357f8f61296c565b54906129b8565b905061013d60009054906101000a90046001600160a01b03166001600160a01b03166388a42f228e8360006040518463ffffffff1660e01b81526004016135eb939291906001600160401b039390931683526020830191909152604082015260600190565b600060405180830381600087803b15801561360557600080fd5b505af1158015613619573d6000803e3d6000fd5b50505050508a6136288d61296c565b80546000906136389084906159cf565b925050819055508915158c6001600160401b03168e6001600160a01b03167fc915235dea7625ad78e3b510156c53e55606173e23b24de4bfdb0c7b9952065f8e8c604051613690929190918252602082015260400190565b60405180910390a45050505050945094509450949050565b6000811561378b57610136546000906001600160a01b0316632e1a7d4d6136cf8789615978565b6040518263ffffffff1660e01b81526004016136ed91815260200190565b602060405180830381600087803b15801561370757600080fd5b505af115801561371b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373f9190615372565b905061374b8587615978565b81106137625761375b85826159cf565b9550613782565b85811061377a5761377386826159cf565b9450613782565b809550600094505b869150506138c2565b610136546000906001600160a01b0316632e1a7d4d866137ab898b615978565b6137b59190615978565b6040518263ffffffff1660e01b81526004016137d391815260200190565b602060405180830381600087803b1580156137ed57600080fd5b505af1158015613801573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138259190615372565b8792509050846138358784615978565b61383f9190615978565b8110613861578461385088836159cf565b61385a91906159cf565b95506138a2565b61386b8688615978565b811061388d578561387c88836159cf565b61388691906159cf565b94506138a2565b86811061389e5761385a87826159cf565b8091505b81156138c057610137546138c0906001600160a01b03168a84612631565b505b841561395b5761013854604080516338af3eed60e01b8152905161395b926001600160a01b0316916338af3eed916004808301926020929190829003018186803b15801561390f57600080fd5b505afa158015613923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139479190615161565b610137546001600160a01b03169087612631565b8315613a135761013c5461013754613980916001600160a01b03918216911686613a6a565b61013c54610137546040516316f6849d60e31b81526001600160401b038a1660048201526001600160a01b0391821660248201526044810187905291169063b7b424e890606401600060405180830381600087803b1580156139e157600080fd5b505af11580156139f5573d6000803e3d6000fd5b50505050828410613a1357613a1387613a0e85876159cf565b613b53565b979650505050505050565b600061012e613a2e6001846159e6565b6001600160401b031681548110613a5557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302019050919050565b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e9060440160206040518083038186803b158015613ab557600080fd5b505afa158015613ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aed9190615372565b1115613b23576040516001600160a01b038316602482015260006044820152613b2390849063095ea7b360e01b9060640161265d565b6040516001600160a01b038316602482015260448101829052610e2890849063095ea7b360e01b9060640161265d565b6000613b5e83613a1e565b8054909150600090613b78906001600160401b031661296c565b600401546001600160401b0316905042811015613c4a578154600160401b90046001600160401b031681811015613c44576000613bb582426159cf565b613bbf83856159cf565b613bc990876159b0565b613bd39190615990565b61013d54604051634999011360e11b81526001600160401b0389166004820152602481018390529192506001600160a01b031690639332022690604401600060405180830381600087803b158015613c2a57600080fd5b505af1158015613c3e573d6000803e3d6000fd5b50505050505b50613cb9565b61013d54604051634999011360e11b81526001600160401b0386166004820152602481018590526001600160a01b0390911690639332022690604401600060405180830381600087803b158015613ca057600080fd5b505af1158015613cb4573d6000803e3d6000fd5b505050505b6001600160401b03421115613ce05760405162461bcd60e51b8152600401610808906157fa565b50805467ffffffffffffffff60401b1916600160401b426001600160401b0316021790555050565b6000613d5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614e509092919063ffffffff16565b805190915015610e285780806020019051810190613d7b9190615224565b610e285760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610808565b6000806000613de88561296c565b9050600080613df56108b3565b9150915081613e3b5760405162461bcd60e51b815260206004820152601260248201527111125b9d195c995cdd0e881393d7d111509560721b6044820152606401610808565b613e4487611965565b909250905081613e8b5760405162461bcd60e51b815260206004820152601260248201527111125b9d195c995cdd0e881393d7d111509560721b6044820152606401610808565b80861115613e97578095505b610136546040805163010e130960e51b815290516000926001600160a01b0316916321c2612091600480830192602092919082900301818787803b158015613ede57600080fd5b505af1158015613ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f169190615372565b905060008111613f5f5760405162461bcd60e51b815260206004820152601460248201527308892dce8cae4cae6e87440848288be929c888ab60631b6044820152606401610808565b6000613f6f8986600001546149c3565b6004860154600160401b90046001600160401b031697509050600080881580613fa25750613f9c89613a1e565b60020154155b1561411b576001600160401b03421115613fce5760405162461bcd60e51b8152600401610808906157fa565b604080516080810182526001600160401b03808e16825242811660208301908152928201878152600160801b6060840190815261012e80546001810182556000829052945160039095027fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f8101805497518616600160401b026001600160801b0319909816968616969096179690961790945590517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e380850155517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e381909301929092555411156140cf5760405162461bcd60e51b8152600401610808906157fa565b61012e5460048801805467ffffffffffffffff60401b1916600160401b6001600160401b038416021790559850846141078b856159b0565b6141119190615990565b915081905061423f565b614124896122ac565b5060006141308a613a1e565b6002015461013c5460405163bd85b03960e01b81526001600160401b038d166004820152919250600091600160801b9184916001600160a01b039091169063bd85b0399060240160206040518083038186803b15801561418f57600080fd5b505afa1580156141a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141c79190615372565b6141d191906159b0565b6141db9190615990565b6141e590866159cf565b9050846141f282896159b0565b6141fc9190615990565b9650868c111561420a57869b505b866142158d836159b0565b61421f9190615990565b935081614230600160801b866159b0565b61423a9190615990565b925050505b61013c54604051630ab714fb60e11b81526001600160a01b038e811660048301526001600160401b038c166024830152604482018490529091169063156e29f690606401600060405180830381600087803b15801561429d57600080fd5b505af11580156142b1573d6000803e3d6000fd5b5050505083676765c793fa10079d601b1b836142cd91906159b0565b6142d79190615990565b61012f60008282546142e99190615978565b925050819055508161013560008282546143039190615978565b9091555050604080518b8152602081018390526001600160401b038b16916001600160a01b038f16917e041ad888f8f0041ca5438a2a667df2a6a90adb28eaf8ec67152459058415ec910160405180910390a389975050505050505050935093915050565b600054610100900460ff1680614381575060005460ff16155b61439d5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff161580156143bf576000805461ffff19166101011790555b6143c7614e67565b80156143d9576000805461ff00191690555b50565b600054610100900460ff16806143f5575060005460ff16155b6144115760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614433576000805461ffff19166101011790555b61443b614ed6565b6143c7614f40565b600080610131548410156144915760405162461bcd60e51b815260206004820152601560248201527411125b9d195c995cdd0e8810905117d05353d55395605a1b6044820152606401610808565b60006144a6426001600160401b0386166159cf565b610130549091506001600160401b03168111156144fb5760405162461bcd60e51b815260206004820152601360248201527244496e7465726573743a204241445f54494d4560681b6044820152606401610808565b61450585826116d7565b9150600082116145515760405162461bcd60e51b815260206004820152601760248201527611125b9d195c995cdd0e8810905117d2539511549154d5604a1b6044820152606401610808565b6101385460405163cf27fa5960e01b8152306004820152602481018490526000916001600160a01b03169063cf27fa599060440160206040518083038186803b15801561459d57600080fd5b505afa1580156145b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145d59190615372565b90506145e181846159cf565b925061012d6040518060c0016040528085896145fd9190615978565b815260200161460c868a6129b8565b815260200161461b848a6129b8565b8152610136546040805163010e130960e51b815290516020938401936001600160a01b03909316926321c2612092600480820193918290030181600087803b15801561466657600080fd5b505af115801561467a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061469e9190615372565b81526001600160401b038089166020808401919091526000604093840181905285546001818101885596825290829020855160059092020190815590840151948101949094559082015160028401556060820151600384015560808201516004909301805460a0909301518216600160401b026001600160801b0319909316938216939093179190911790915561012d54111561474d5760405162461bcd60e51b8152600401610808906157fa565b61012d8054905093508561013260008282546147699190615978565b925050819055508261013360008282546147839190615978565b9250508190555080610134600082825461479d9190615978565b909155505061013b546040516340c10f1960e01b81526001600160a01b0389811660048301526001600160401b0387166024830152909116906340c10f1990604401600060405180830381600087803b1580156147f957600080fd5b505af115801561480d573d6000803e3d6000fd5b505060408051898152602081018790529081018490526001600160401b038881166060830152871692506001600160a01b038a1691507f61431584ca96282c2c6748c4dabd382bc28bde7792a7fa3c3668927bedf4446f9060800160405180910390a361013d54604051631a3ee6b160e01b81526001600160a01b0389811660048301526001600160401b038716602483015290911690631a3ee6b190604401600060405180830381600087803b1580156148c757600080fd5b505af11580156148db573d6000803e3d6000fd5b505050505050935093915050565b80610e285761013754614907906001600160a01b03168430856130ac565b6101365461013754614926916001600160a01b03918216911684613a6a565b6101365460405163b6b55f2560e01b8152600481018490526001600160a01b039091169063b6b55f2590602401600060405180830381600087803b15801561496d57600080fd5b505af1158015614981573d6000803e3d6000fd5b50505050505050565b60608315614999575081611fb6565b8251156149a95782518084602001fd5b8160405162461bcd60e51b81526004016108089190615764565b6000806149cf8461296c565b90506000816001015490506128ec670de0b6b3a76400008360020154836149f69190615978565b614a009190615978565b614a1c614a15670de0b6b3a764000085615978565b87906129b8565b906129d7565b6000806000614a3086613a1e565b600281015461013c5460405163bd85b03960e01b81526001600160401b038a166004820152929350600092600160801b92916001600160a01b03169063bd85b0399060240160206040518083038186803b158015614a8d57600080fd5b505afa158015614aa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614ac59190615372565b614acf91906159b0565b614ad99190615990565b9050600082600101549050600061013660009054906101000a90046001600160a01b03166001600160a01b03166321c261206040518163ffffffff1660e01b8152600401602060405180830381600087803b158015614b3757600080fd5b505af1158015614b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b6f9190615372565b905060008111614bb85760405162461bcd60e51b815260206004820152601460248201527308892dce8cae4cae6e87440848288be929c888ab60631b6044820152606401610808565b600081614bd0676765c793fa10079d601b1b866159b0565b614bda9190615990565b9050600083614bf4676765c793fa10079d601b1b8c6159b0565b614bfe9190615990565b9050808261012f54614c109190615978565b10614c3857808261012f54614c259190615978565b614c2f91906159cf565b61012f55614c3f565b600061012f555b60018601839055614c50858b6159cf565b6101356000828254614c6291906159cf565b909155508a905084614c7485836159b0565b614c7e9190615990565b614c8891906159cf565b9750505050508415614e02578154600090614cab906001600160401b031661296c565b6001810154600282015461013a54604080516385b3a93160e01b81528151959650939492936000936001600160a01b03909316926385b3a9319260048084019391929182900301818787803b158015614d0357600080fd5b505af1158015614d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d3b9190615240565b6004860154909250670de0b6b3a76400009150614d629042906001600160401b03166159cf565b614d8583670de0b6b3a7640000898f614d7b91906159cf565b614a1c91906159b0565b614d8f91906159b0565b614d999190615990565b96506000614ddc614daa8486615978565b614a1c85614dc088670de0b6b3a7640000615978565b614dca9190615978565b898f614dd691906159cf565b906129b8565b905080881115614dec5780614dee565b875b9750614dfa888a615978565b985050505050505b60408051858152602081018590526001600160401b038916917f8f0a3cf13ab42f1ec8d1e3df9aa7f0b3219995863af01088afec4c3fef43f79c910160405180910390a25050935093915050565b6060614e5f8484600085614fee565b949350505050565b600054610100900460ff1680614e80575060005460ff16155b614e9c5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614ebe576000805461ffff19166101011790555b6001805580156143d9576000805461ff001916905550565b600054610100900460ff1680614eef575060005460ff16155b614f0b5760405162461bcd60e51b815260040161080890615777565b600054610100900460ff161580156143c7576000805461ffff191661010117905580156143d9576000805461ff001916905550565b600054610100900460ff1680614f59575060005460ff16155b614f755760405162461bcd60e51b815260040161080890615777565b600054610100900460ff16158015614f97576000805461ffff19166101011790555b606580546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156143d9576000805461ff001916905550565b60608247101561504f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610808565b843b61509d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610808565b600080866001600160a01b031685876040516150b99190615689565b60006040518083038185875af1925050503d80600081146150f6576040519150601f19603f3d011682016040523d82523d6000602084013e6150fb565b606091505b5091509150613a1382828661498a565b80356111b481615a6b565b60006101208284031215615128578081fd5b50919050565b80356001600160401b03811681146111b457600080fd5b600060208284031215615156578081fd5b8135611fb681615a6b565b600060208284031215615172578081fd5b8151611fb681615a6b565b6000806040838503121561518f578081fd5b823561519a81615a6b565b915060208301356151aa81615a6b565b809150509250929050565b600080602083850312156151c7578182fd5b82356001600160401b03808211156151dd578384fd5b818501915085601f8301126151f0578384fd5b8135818111156151fe578485fd5b8660208260051b8501011115615212578485fd5b60209290920196919550909350505050565b600060208284031215615235578081fd5b8151611fb681615a80565b60008060408385031215615252578182fd5b825161525d81615a80565b6020939093015192949293505050565b6000806020838503121561527f578182fd5b82356001600160401b0380821115615295578384fd5b818501915085601f8301126152a8578384fd5b8135818111156152b6578485fd5b866020828501011115615212578485fd5b60006101208083850312156152da578182fd5b6152e38161593a565b90506152ee8361510b565b81526152fc6020840161510b565b602082015261530d6040840161510b565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152508091505092915050565b60006020828403121561536b578081fd5b5035919050565b600060208284031215615383578081fd5b5051919050565b6000806040838503121561539c578182fd5b50508035926020909101359150565b600080604083850312156153bd578182fd5b823591506153cd6020840161512e565b90509250929050565b600080600061016084860312156153eb578081fd5b833592506153fb6020850161512e565b915061540a8560408601615116565b90509250925092565b600060208284031215615424578081fd5b611fb68261512e565b6000806101408385031215615440578182fd5b6154498361512e565b91506153cd8460208501615116565b6000806040838503121561546a578182fd5b6154738361512e565b946020939093013593505050565b6000806000806000806000806000806101408b8d0312156154a0578788fd5b6154a98b61512e565b995060208b0135985060408b01356154c081615a6b565b975060608b01356154d081615a6b565b965060808b01356154e081615a6b565b955060a08b01356154f081615a6b565b945060c08b013561550081615a6b565b935060e08b013561551081615a6b565b92506101008b013561552181615a6b565b91506101208b013561553281615a6b565b809150509295989b9194979a5092959850565b600080600060608486031215615559578081fd5b6155628461512e565b925060208401359150604084013561557981615a80565b809150509250925092565b600080600080610180858703121561559a578182fd5b6155a38561512e565b93506020850135925060408501356155ba81615a80565b91506155c98660608701615116565b905092959194509250565b600080600061016084860312156155e9578081fd5b6155f28461512e565b92506020840135915061540a8560408601615116565b6000806040838503121561561a578182fd5b6156238361512e565b91506153cd6020840161512e565b60008060006101608486031215615646578081fd5b61564f8461512e565b92506153fb6020850161512e565b60008151808452615675816020860160208601615a0e565b601f01601f19169290920160200192915050565b6000825161569b818460208701615a0e565b9190910192915050565b600083516156b7818460208801615a0e565b8351908301906156cb818360208801615a0e565b01949350505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561572857603f1988860301845261571685835161565d565b945092850192908501906001016156fa565b5092979650505050505050565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b600060208252611fb6602083018461565d565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527244496e7465726573743a204f564552464c4f5760681b604082015260600190565b60208082526012908201527111125b9d195c995cdd0e8810905117d5905360721b604082015260600190565b6020808252601490820152732224b73a32b932b9ba1d102727aa2fa7aba722a960611b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526017908201527f44496e7465726573743a204e4f545f434f4e5452414354000000000000000000604082015260600190565b6000808335601e19843603018112615905578283fd5b8301803591506001600160401b0382111561591e578283fd5b60200191503681900382131561593357600080fd5b9250929050565b604051601f8201601f191681016001600160401b038111828210171561597057634e487b7160e01b600052604160045260246000fd5b604052919050565b6000821982111561598b5761598b615a55565b500190565b6000826159ab57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156159ca576159ca615a55565b500290565b6000828210156159e1576159e1615a55565b500390565b60006001600160401b0383811690831681811015615a0657615a06615a55565b039392505050565b60005b83811015615a29578181015183820152602001615a11565b838111156122515750506000910152565b6000600019821415615a4e57615a4e615a55565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146143d957600080fd5b80151581146143d957600080fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d2e7f25aa9a806a6c002abfad15cb8dcc38b1ce57055a5ca22de9412516adf9b64736f6c63430008030033",
  "devdoc": {
    "author": "Zefram Lou",
    "details": "The contract to interact with for most actions",
    "kind": "dev",
    "methods": {
      "calculateInterestAmount(uint256,uint256)": {
        "params": {
          "depositAmount": "The deposit amount, in stablecoins",
          "depositPeriodInSeconds": "The deposit period, in seconds"
        },
        "returns": {
          "interestAmount": "The amount of fixed-rate interest (before fees)"
        }
      },
      "deposit(uint256,uint64)": {
        "details": "The ERC-721 NFT representing deposit ownership is given to msg.sender",
        "params": {
          "depositAmount": "The amount of deposit, in stablecoin",
          "maturationTimestamp": "The Unix timestamp of maturation, in seconds"
        },
        "returns": {
          "depositID": "The ID of the created deposit",
          "interestAmount": "The amount of fixed-rate interest"
        }
      },
      "depositsLength()": {
        "returns": {
          "_0": "deposits.length"
        }
      },
      "fund(uint64,uint256)": {
        "details": "The sender receives ERC-1155 multitokens (fundingMultitoken) representing their floating-rate bonds.",
        "params": {
          "depositID": "The deposit whose fixed-rate interest will be funded",
          "fundAmount": "The amount of fixed-rate interest to fund. If it exceeds surplusOfDeposit(depositID), it will be set to the surplus value instead.",
          "fundingID": "The ID of the fundingMultitoken the sender received"
        }
      },
      "fundingListLength()": {
        "returns": {
          "_0": "fundingList.length"
        }
      },
      "getDeposit(uint64)": {
        "params": {
          "depositID": "The ID of the deposit"
        },
        "returns": {
          "_0": "The deposit struct"
        }
      },
      "getFunding(uint64)": {
        "params": {
          "fundingID": "The ID of the floating-rate bond"
        },
        "returns": {
          "_0": "The Funding struct"
        }
      },
      "initialize(uint64,uint256,address,address,address,address,address,address,address,address)": {
        "params": {
          "_MaxDepositPeriod": "The maximum deposit period, in seconds",
          "_MinDepositAmount": "The minimum deposit amount, in stablecoins",
          "_depositNFT": "Address of the NFT representing ownership of deposits (owner must be set to this DInterest contract)",
          "_feeModel": "Address of the FeeModel contract that determines how fees are charged",
          "_fundingMultitoken": "Address of the ERC1155 multitoken representing ownership of fundings (this DInterest contract must have the minter-burner role)",
          "_interestModel": "Address of the InterestModel contract that determines how much interest to offer",
          "_interestOracle": "Address of the InterestOracle contract that provides the average interest rate",
          "_moneyMarket": "Address of MoneyMarket that's used for generating interest (owner must be set to this DInterest contract)",
          "_mphMinter": "Address of the contract for handling minting MPH to users",
          "_stablecoin": "Address of the stablecoin used to store funds"
        }
      },
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payInterestToFunders(uint64)": {
        "params": {
          "fundingID": "The ID of the floating-rate bond"
        },
        "returns": {
          "interestAmount": "The amount of interest distributed, in stablecoins"
        }
      },
      "rawSurplusOfDeposit(uint64)": {
        "params": {
          "depositID": "The ID of the deposit"
        },
        "returns": {
          "isNegative": "True if the surplus is negative, false otherwise",
          "surplusAmount": "The absolute value of the surplus, in stablecoins"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescue(address,address)": {
        "details": "Need to implement {_authorizeRescue} to do access-control for this function.",
        "params": {
          "target": "The address to send the tokens to",
          "token": "The ERC20 token to rescue"
        }
      },
      "rolloverDeposit(uint64,uint64)": {
        "params": {
          "depositID": "The deposit to roll over",
          "maturationTimestamp": "The Unix timestamp of the new deposit, in seconds"
        },
        "returns": {
          "newDepositID": "The ID of the new deposit"
        }
      },
      "surplus()": {
        "returns": {
          "isNegative": "True if the surplus is negative, false otherwise",
          "surplusAmount": "The absolute value of the surplus, in stablecoins"
        }
      },
      "topupDeposit(uint64,uint256)": {
        "details": "The interest rate for the topped up funds will be the current oracle rate.",
        "params": {
          "depositAmount": "The amount to top up, in stablecoin",
          "depositID": "The deposit to top up"
        },
        "returns": {
          "interestAmount": "The amount of interest that will be earned by the topped up funds at maturation"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint64,uint256,bool)": {
        "details": "Virtual tokens behave like zero coupon bonds, after maturation withdrawing 1 virtual token yields 1 stablecoin. The total supply is given by deposit.virtualTokenTotalSupply",
        "params": {
          "depositID": "the deposit to withdraw from",
          "early": "True if intend to withdraw before maturation, false otherwise",
          "virtualTokenAmount": "the amount of virtual tokens to withdraw"
        },
        "returns": {
          "withdrawnStablecoinAmount": "the amount of stablecoins withdrawn"
        }
      }
    },
    "stateVariables": {
      "EXTRA_PRECISION": {
        "details": "used for sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex"
      },
      "MaxDepositPeriod": {
        "details": "Maximum deposit period, in seconds"
      },
      "MinDepositAmount": {
        "details": "Minimum deposit amount, in stablecoins"
      },
      "ULTRA_PRECISION": {
        "details": "used for funding.principalPerToken"
      }
    },
    "title": "DeLorean Interest -- It's coming back from the future!",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateInterestAmount(uint256,uint256)": {
        "notice": "Computes the amount of fixed-rate interest (before fees) that will be given to a deposit of `depositAmount` stablecoins that matures in `depositPeriodInSeconds` seconds."
      },
      "deposit(uint256,uint64)": {
        "notice": "Create a deposit using `depositAmount` stablecoin that matures at timestamp `maturationTimestamp`."
      },
      "depositsLength()": {
        "notice": "Returns the total number of deposits."
      },
      "fund(uint64,uint256)": {
        "notice": "Funds the fixed-rate interest of the deposit with ID `depositID`. In exchange, the funder receives the future floating-rate interest generated by the portion of the deposit whose interest was funded."
      },
      "fundingListLength()": {
        "notice": "Returns the total number of floating-rate bonds."
      },
      "getDeposit(uint64)": {
        "notice": "Returns the Deposit struct associated with the deposit with ID `depositID`."
      },
      "getFunding(uint64)": {
        "notice": "Returns the Funding struct associated with the floating-rate bond with ID `fundingID`."
      },
      "payInterestToFunders(uint64)": {
        "notice": "Distributes the floating-rate interest accrued by a deposit to the floating-rate bond holders."
      },
      "rawSurplusOfDeposit(uint64)": {
        "notice": "Computes the raw surplus of a deposit, which is the current value of the deposit in the money market minus the amount owed (deposit + interest + fee). The deposit's funding status is not considered here, meaning even if a deposit's fixed-rate interest is fully funded, it likely will still have a non-zero surplus."
      },
      "rescue(address,address)": {
        "notice": "Rescues ERC20 tokens sent to the contract in error."
      },
      "rolloverDeposit(uint64,uint64)": {
        "notice": "Withdraw all funds from deposit with ID `depositID` and use them to create a new deposit that matures at time `maturationTimestamp`"
      },
      "setFeeModel(address)": {
        "notice": "Param setters (only callable by the owner)"
      },
      "sponsoredDeposit(uint256,uint64,(address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes32))": {
        "notice": "Sponsored action functions"
      },
      "surplus()": {
        "notice": "Computes the pool's overall surplus, which is the value of its holdings in the `moneyMarket` minus the amount owed to depositors, funders, and the fee beneficiary."
      },
      "topupDeposit(uint64,uint256)": {
        "notice": "Add `depositAmount` stablecoin to the existing deposit with ID `depositID`."
      },
      "withdraw(uint64,uint256,bool)": {
        "notice": "Withdraws funds from the deposit with ID `depositID`."
      }
    },
    "notice": "The main pool contract for fixed-rate deposits",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 612,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 615,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 666,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 709,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3064,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 525,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13733,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3204,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13915,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "accountNonce",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14103,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5979,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "deposits",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_struct(Deposit)5975_storage)dyn_storage"
      },
      {
        "astId": 5992,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "fundingList",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_struct(Funding)5988_storage)dyn_storage"
      },
      {
        "astId": 5994,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "sumOfRecordedFundedPrincipalAmountDivRecordedIncomeIndex",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      },
      {
        "astId": 5997,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "MaxDepositPeriod",
        "offset": 0,
        "slot": "304",
        "type": "t_uint64"
      },
      {
        "astId": 6000,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "MinDepositAmount",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 6002,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "totalDeposit",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 6004,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "totalInterestOwed",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 6006,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "totalFeeOwed",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 6008,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "totalFundedPrincipalAmount",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 6011,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "moneyMarket",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(MoneyMarket)17114"
      },
      {
        "astId": 6014,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "stablecoin",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(ERC20)4992"
      },
      {
        "astId": 6017,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "feeModel",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IFeeModel)16189"
      },
      {
        "astId": 6020,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "interestModel",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IInterestModel)16841"
      },
      {
        "astId": 6023,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "interestOracle",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IInterestOracle)16823"
      },
      {
        "astId": 6026,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "depositNFT",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(NFT)22757"
      },
      {
        "astId": 6029,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "fundingMultitoken",
        "offset": 0,
        "slot": "316",
        "type": "t_contract(FundingMultitoken)22629"
      },
      {
        "astId": 6032,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "mphMinter",
        "offset": 0,
        "slot": "317",
        "type": "t_contract(MPHMinter)20433"
      },
      {
        "astId": 9052,
        "contract": "contracts/DInterest.sol:DInterest",
        "label": "__gap",
        "offset": 0,
        "slot": "318",
        "type": "t_array(t_uint256)33_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Deposit)5975_storage)dyn_storage": {
        "base": "t_struct(Deposit)5975_storage",
        "encoding": "dynamic_array",
        "label": "struct DInterest.Deposit[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Funding)5988_storage)dyn_storage": {
        "base": "t_struct(Funding)5988_storage",
        "encoding": "dynamic_array",
        "label": "struct DInterest.Funding[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)33_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[33]",
        "numberOfBytes": "1056"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)4992": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(FundingMultitoken)22629": {
        "encoding": "inplace",
        "label": "contract FundingMultitoken",
        "numberOfBytes": "20"
      },
      "t_contract(IFeeModel)16189": {
        "encoding": "inplace",
        "label": "contract IFeeModel",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestModel)16841": {
        "encoding": "inplace",
        "label": "contract IInterestModel",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestOracle)16823": {
        "encoding": "inplace",
        "label": "contract IInterestOracle",
        "numberOfBytes": "20"
      },
      "t_contract(MPHMinter)20433": {
        "encoding": "inplace",
        "label": "contract MPHMinter",
        "numberOfBytes": "20"
      },
      "t_contract(MoneyMarket)17114": {
        "encoding": "inplace",
        "label": "contract MoneyMarket",
        "numberOfBytes": "20"
      },
      "t_contract(NFT)22757": {
        "encoding": "inplace",
        "label": "contract NFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Deposit)5975_storage": {
        "encoding": "inplace",
        "label": "struct DInterest.Deposit",
        "members": [
          {
            "astId": 5964,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "virtualTokenTotalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5966,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "interestRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5968,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "feeRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5970,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "averageRecordedIncomeIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5972,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "maturationTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 5974,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "fundingID",
            "offset": 8,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Funding)5988_storage": {
        "encoding": "inplace",
        "label": "struct DInterest.Funding",
        "members": [
          {
            "astId": 5981,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "depositID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5983,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "lastInterestPayoutTimestamp",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5985,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "recordedMoneyMarketIncomeIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5987,
            "contract": "contracts/DInterest.sol:DInterest",
            "label": "principalPerToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
