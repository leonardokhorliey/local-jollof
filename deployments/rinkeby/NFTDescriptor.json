{
  "address": "0xdECeDA6bE05D1A28a3cAc226Eb2Cb9e36B5C6b4d",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.URIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xd440f269c46688c8c201a489cfbb8dea1491447a320c31283290c288ce105457",
  "receipt": {
    "to": null,
    "from": "0x6FE2f50f7BC16264f51aC6fFd07C11984305b612",
    "contractAddress": "0xdECeDA6bE05D1A28a3cAc226Eb2Cb9e36B5C6b4d",
    "transactionIndex": 3,
    "gasUsed": "2125067",
    "logsBloom": "0x
    "blockHash": "0x2e7a07cc2e1d9594fd4fc29717de4c34e881a509632fd3873320bbf1a9660c95",
    "transactionHash": "0xd440f269c46688c8c201a489cfbb8dea1491447a320c31283290c288ce105457",
    "logs": [],
    "blockNumber": 9145515,
    "cumulativeGasUsed": "2318051",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "94929ae33d77e0dfa8fe4fc98eac6c36",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.URIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libs/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/libs/HexStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// MODIFIED Uniswap-v3-periphery\\npragma solidity 0.8.4;\\n\\nlibrary HexStrings {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc2c848c95f6c0c675eecd5f92b3aba277832a07385cb932966e96953db9e934c\",\"license\":\"MIT\"},\"contracts/libs/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./HexStrings.sol\\\";\\nimport \\\"./NFTSVG.sol\\\";\\n\\nlibrary NFTDescriptor {\\n    using Strings for uint256;\\n    using HexStrings for uint256;\\n\\n    struct URIParams {\\n        uint256 tokenId;\\n        address owner;\\n        string name;\\n        string symbol;\\n    }\\n\\n    function constructTokenURI(URIParams memory params)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                string(abi.encodePacked(params.name, \\\"-NFT\\\")),\\n                                '\\\", \\\"description\\\":\\\"',\\n                                generateDescription(),\\n                                '\\\", \\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                Base64.encode(bytes(generateSVGImage(params))),\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function escapeQuotes(string memory symbol)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint8 quotesCount = 0;\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes =\\n                new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = \\\"\\\\\\\\\\\";\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function addressToString(address addr)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return uint256(uint160(addr)).toHexString(20);\\n    }\\n\\n    function toColorHex(uint256 base, uint256 offset)\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        return string((base >> offset).toHexStringNoPrefix(3));\\n    }\\n\\n    function generateDescription() private pure returns (string memory) {\\n        return\\n            \\\"This NFT represents a 88mph bond. The owner of this NFT can change URI.\\\\\\\\n\\\";\\n    }\\n\\n    function generateSVGImage(URIParams memory params)\\n        internal\\n        pure\\n        returns (string memory svg)\\n    {\\n        NFTSVG.SVGParams memory svgParams =\\n            NFTSVG.SVGParams({\\n                tokenId: params.tokenId,\\n                owner: addressToString(params.owner),\\n                name: params.name,\\n                symbol: params.symbol,\\n                color0: toColorHex(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(params.owner, params.tokenId)\\n                        )\\n                    ),\\n                    140\\n                ),\\n                color1: toColorHex(\\n                    uint256(\\n                        keccak256(\\n                            abi.encodePacked(params.owner, params.tokenId)\\n                        )\\n                    ),\\n                    0\\n                )\\n            });\\n\\n        return NFTSVG.generateSVG(svgParams);\\n    }\\n}\\n\",\"keccak256\":\"0x4c49686b57f0b5b7224091c75ae4036f1bd4842f47a1dcc6ceebc215355aa570\",\"license\":\"MIT\"},\"contracts/libs/NFTSVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n///@notice Inspired by Uniswap-v3-periphery NFTSVG.sol\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./HexStrings.sol\\\";\\n\\nlibrary NFTSVG {\\n    using Strings for uint256;\\n\\n    struct SVGParams {\\n        uint256 tokenId;\\n        string owner;\\n        string name;\\n        string symbol;\\n        string color0;\\n        string color1;\\n    }\\n\\n    function generateSVG(SVGParams memory params)\\n        internal\\n        pure\\n        returns (string memory svg)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    generateSVGDefs(params),\\n                    generateSVGBackGround(params.tokenId, params.name),\\n                    generateSVGFigures(params),\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function generateSVGDefs(SVGParams memory params)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        svg = string(\\n            abi.encodePacked(\\n                '<svg width=\\\"419\\\" height=\\\"292\\\" viewBox=\\\"0 0 419 292\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><defs><linearGradient id=\\\"g1\\\" x1=\\\"0%\\\" y1=\\\"50%\\\" >',\\n                generateSVGColorPartOne(params),\\n                generateSVGColorPartTwo(params),\\n                \\\"</linearGradient>\\\",\\n                generateSVGFilter(\\n                    \\\"filter0_d\\\",\\n                    [\\\"85.852\\\", \\\"212.189\\\"],\\n                    [\\\"238.557\\\", \\\"53.1563\\\"],\\n                    \\\"2\\\"\\n                ),\\n                generateSVGFilter(\\n                    \\\"filter1_d\\\",\\n                    [\\\"90.075\\\", \\\"103.557\\\"],\\n                    [\\\"228.372\\\", \\\"171.911\\\"],\\n                    \\\"6\\\"\\n                ),\\n                '<linearGradient id=\\\"paint0_linear\\\" x1=\\\"209.162\\\" y1=\\\"291.796\\\" x2=\\\"209.162\\\" y2=\\\"1.0534\\\" gradientUnits=\\\"userSpaceOnUse\\\"><stop stop-color=\\\"#FFE600\\\"/><stop offset=\\\"0.307292\\\" stop-color=\\\"#FAAD14\\\"/><stop offset=\\\"0.671875\\\" stop-color=\\\"#F7169C\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#3435F5\\\"/></linearGradient>',\\n                generateSVGGradient(),\\n                \\\"</defs>\\\"\\n            )\\n        );\\n    }\\n\\n    function generateSVGFigures(SVGParams memory params)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        svg = string(\\n            abi.encodePacked(\\n                '<path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M195.243 283.687C201.373 294.499 216.951 294.499 223.081 283.687L235.238 262.244H183.086L195.243 283.687ZM173.834 245.923L155.328 213.282H262.996L244.49 245.923H173.834ZM146.076 196.961H272.248L290.754 164.32H127.57L146.076 196.961ZM118.318 147.999L99.8123 115.358H318.512L300.006 147.999H118.318ZM90.5596 99.0369H327.764L349.634 60.4607H68.6896L90.5596 99.0369ZM59.437 44.1401L47.9572 23.8909C41.9102 13.2248 49.6149 0 61.876 0H356.448C368.709 0 376.414 13.2248 370.367 23.891L358.887 44.1401H59.437Z\\\" fill=\\\"url(#paint0_linear)\\\"/>',\\n                generateSVGText(params)\\n            )\\n        );\\n    }\\n\\n    function generateSVGText(SVGParams memory params)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        svg = string(\\n            abi.encodePacked(\\n                '<g fill=\\\"black\\\" font-family=\\\"monospace\\\" font-style=\\\"bold\\\" font-weight=\\\"bolder\\\" style=\\\"text-shadow:4px 4px #558ABB; text-align:center;\\\">',\\n                '<text><tspan x=\\\"35\\\" y=\\\"105\\\" dx=\\\"20\\\" font-size=\\\"25\\\">',\\n                params.name,\\n                '</tspan><tspan x=\\\"35\\\" y=\\\"165\\\" dx=\\\"10\\\" font-size=\\\"12\\\" >',\\n                params.owner,\\n                '</tspan><tspan x=\\\"165\\\" y=\\\"190\\\" dx=\\\"10\\\" font-size=\\\"12\\\" >tokenId :',\\n                params.tokenId.toString(),\\n                \\\"</tspan></text></g>\\\"\\n            )\\n        );\\n    }\\n\\n    function generateSVGFilter(\\n        string memory id,\\n        string[2] memory coordinates,\\n        string[2] memory size,\\n        string memory stdDeviation\\n    ) private pure returns (string memory svg) {\\n        string memory filterFragment =\\n            string(\\n                abi.encodePacked(\\n                    '<filter id=\\\"',\\n                    id,\\n                    '\\\" x=\\\"',\\n                    coordinates[0],\\n                    '\\\" y=\\\"',\\n                    coordinates[1],\\n                    '\\\" width=\\\"',\\n                    size[0],\\n                    '\\\" height=\\\"',\\n                    size[1],\\n                    '\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\">'\\n                )\\n            );\\n        svg = string(\\n            abi.encodePacked(\\n                filterFragment,\\n                '<feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"',\\n                stdDeviation,\\n                '\\\"/><feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 0.898039 0 0 0 0 0.129412 0 0 0 0 0.615686 0 0 0 0.5 0\\\"/><feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow\\\"/>',\\n                '<feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow\\\" result=\\\"shape\\\"/></filter>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGGradient() private pure returns (string memory svg) {\\n        svg = string(\\n            abi.encodePacked(\\n                generateSVGGradientEleOne(\\\"paint1_linear\\\"),\\n                generateSVGGradientEleOne(\\\"paint2_linear\\\"),\\n                generateSVGGradientEleOne(\\\"paint3_linear\\\"),\\n                generateSVGGradientEleTwo(\\\"paint4_linear\\\"),\\n                generateSVGGradientEleTwo(\\\"paint5_linear\\\"),\\n                generateSVGGradientEleTwo(\\\"paint6_linear\\\")\\n            )\\n        );\\n    }\\n\\n    function generateSVGGradientEleOne(string memory id)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        svg = string(\\n            abi.encodePacked(\\n                '<linearGradient id=\\\"',\\n                id,\\n                '\\\" x1=\\\"212.356\\\" y1=\\\"140\\\" x2=\\\"248.856\\\" y2=\\\"265.5\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\n                '<stop offset=\\\"0.223958\\\" stop-color=\\\"#FF009D\\\"/><stop offset=\\\"0.880208\\\" stop-color=\\\"#3435F5\\\"/></linearGradient>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGGradientEleTwo(string memory id)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        svg = string(\\n            abi.encodePacked(\\n                '<linearGradient id=\\\"',\\n                id,\\n                '\\\" x1=\\\"195.663\\\" y1=\\\"154.629\\\" x2=\\\"198.752\\\" y2=\\\"249\\\" gradientUnits=\\\"userSpaceOnUse\\\">',\\n                '<stop stop-color=\\\"white\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#F7169C\\\"/></linearGradient>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGColorPartOne(SVGParams memory params)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        string memory values0 =\\n            string(abi.encodePacked(\\\"#\\\", params.color0, \\\"; #\\\", params.color1));\\n        string memory values1 =\\n            string(abi.encodePacked(\\\"#\\\", params.color1, \\\"; #\\\", params.color0));\\n        svg = string(\\n            abi.encodePacked(\\n                '<stop offset=\\\"0%\\\" stop-color=\\\"#',\\n                params.color0,\\n                '\\\" ><animate id=\\\"a1\\\" attributeName=\\\"stop-color\\\" values=\\\"',\\n                values0,\\n                '\\\" begin=\\\"0; a2.end\\\" dur=\\\"3s\\\" /><animate id=\\\"a2\\\" attributeName=\\\"stop-color\\\" values=\\\"',\\n                values1,\\n                '\\\" begin=\\\"a1.end\\\" dur=\\\"3s\\\" /></stop>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGColorPartTwo(SVGParams memory params)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        string memory values0 =\\n            string(abi.encodePacked(\\\"#\\\", params.color0, \\\"; #\\\", params.color1));\\n        string memory values1 =\\n            string(abi.encodePacked(\\\"#\\\", params.color1, \\\"; #\\\", params.color0));\\n        svg = string(\\n            abi.encodePacked(\\n                '<stop offset=\\\"100%\\\" stop-color=\\\"#',\\n                params.color1,\\n                '\\\" >',\\n                '<animate id=\\\"a3\\\" attributeName=\\\"stop-color\\\" values=\\\"',\\n                values1,\\n                '\\\" begin=\\\"0; a4.end\\\" dur=\\\"3s\\\" /><animate id=\\\"a4\\\" attributeName=\\\"stop-color\\\" values=\\\"',\\n                values0,\\n                '\\\" begin=\\\"a3.end\\\" dur=\\\"3s\\\" /></stop>'\\n            )\\n        );\\n    }\\n\\n    function generateSVGBackGround(uint256 tokenId, string memory name)\\n        private\\n        pure\\n        returns (string memory svg)\\n    {\\n        if (isRare(tokenId, name)) {\\n            svg = string(\\n                abi.encodePacked(\\n                    '<rect id=\\\"r\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"419\\\" height=\\\"512\\\" ',\\n                    'fill=\\\"url(#g1)\\\" />'\\n                )\\n            );\\n        } else {\\n            svg = string(\\n                abi.encodePacked(\\n                    '<rect id=\\\"r\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"419\\\" height=\\\"512\\\" ',\\n                    'fill=\\\"black\\\" />'\\n                )\\n            );\\n        }\\n    }\\n\\n    function isRare(uint256 tokenId, string memory name)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return uint256(keccak256(abi.encodePacked(tokenId, name))) > 5**tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x9d2be78f49edcf14cd7059f44e485b06218161c691ee26d0c8dcb68640e559e5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}