{
  "address": "0x30c8441dd81A5f6FdFc348AEe3ba3e02AcE7cD79",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "paramName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "ESetParamAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "paramName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ESetParamUint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositPeriodInSeconds",
          "type": "uint256"
        }
      ],
      "name": "computeDepositorReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositorReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "govReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingCreationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "maturationTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "computeFunderReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "funderReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "govReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintMPHAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "early",
          "type": "bool"
        }
      ],
      "name": "computeTakeBackDepositorRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takeBackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "devReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "govReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_devRewardMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_govRewardMultiplier",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolDepositorRewardMintMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolFunderRewardMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolFunderRewardVestPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setDevRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setGovRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setPoolDepositorRewardMintMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setPoolFunderRewardMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newVestPeriodInSeconds",
          "type": "uint256"
        }
      ],
      "name": "setPoolFunderRewardVestPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23285cd959d77e75279e285b68db833871bcc8bb497f1185fa36c11209f6ef79",
  "receipt": {
    "to": null,
    "from": "0xc0FcF8403e10B65f1D18f1B81b093004B1127275",
    "contractAddress": "0x30c8441dd81A5f6FdFc348AEe3ba3e02AcE7cD79",
    "transactionIndex": 3,
    "gasUsed": "868876",
    "logsBloom": "0x
    "blockHash": "0xfd2fcf348c144b4f82bbe193a1bda115b8f3d61699847c46b03244cbb736bb32",
    "transactionHash": "0x23285cd959d77e75279e285b68db833871bcc8bb497f1185fa36c11209f6ef79",
    "logs": [],
    "blockNumber": 8694946,
    "cumulativeGasUsed": "1379178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e60ae8ce476666259c0e591d71d287b8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ESetParamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"paramName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ESetParamUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"computeDepositorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositorReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"govReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingCreationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"maturationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"computeFunderReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"funderReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"govReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintMPHAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"early\",\"type\":\"bool\"}],\"name\":\"computeTakeBackDepositorRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takeBackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"govReward\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devRewardMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_govRewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolDepositorRewardMintMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFunderRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFunderRewardVestPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setDevRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setGovRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPoolDepositorRewardMintMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMultiplier\",\"type\":\"uint256\"}],\"name\":\"setPoolFunderRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newVestPeriodInSeconds\",\"type\":\"uint256\"}],\"name\":\"setPoolFunderRewardVestPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeDepositorReward(address,uint256,uint256)\":{\"params\":{\"depositAmount\":\"The deposit amount in the pool's stablecoins\",\"depositPeriodInSeconds\":\"The deposit's lock period in seconds\",\"pool\":\"The DInterest pool trying to mint reward\"},\"returns\":{\"depositorReward\":\"The MPH amount to mint to the depositor devReward The MPH amount to mint to the dev wallet govReward The MPH amount to mint to the gov treasury\"}},\"computeFunderReward(address,uint256,uint256,uint64,bool)\":{\"params\":{\"depositAmount\":\"The deposit amount in the pool's stablecoins\",\"early\":\"True if the deposit is withdrawn early, false if the deposit is mature\",\"fundingCreationTimestamp\":\"The timestamp of the funding's creation, in seconds\",\"maturationTimestamp\":\"The maturation timestamp of the deposit, in seconds\",\"pool\":\"The DInterest pool trying to mint reward\"},\"returns\":{\"funderReward\":\"The MPH amount to mint to the funder devReward The MPH amount to mint to the dev wallet govReward The MPH amount to mint to the gov treasury\"}},\"computeTakeBackDepositorRewardAmount(uint256,bool)\":{\"params\":{\"early\":\"True if the deposit is withdrawn early, false if the deposit is mature\",\"mintMPHAmount\":\"The MPH amount originally minted to the depositor as reward\"},\"returns\":{\"takeBackAmount\":\"The MPH amount to take back from the depositor devReward The MPH amount from takeBackAmount to send to the dev wallet govReward The MPH amount from takeBackAmount to send to the gov treasury\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeDepositorReward(address,uint256,uint256)\":{\"notice\":\"Computes the MPH amount to reward to a depositor upon deposit.\"},\"computeFunderReward(address,uint256,uint256,uint64,bool)\":{\"notice\":\"Computes the MPH amount to reward to a deficit funder upon withdrawal of an underlying deposit.\"},\"computeTakeBackDepositorRewardAmount(uint256,bool)\":{\"notice\":\"Computes the MPH amount to take back from a depositor upon withdrawal. If takeBackAmount > devReward + govReward, the extra MPH should be burnt.\"},\"devRewardMultiplier()\":{\"notice\":\"Multiplier used for calculating dev reward\"},\"govRewardMultiplier()\":{\"notice\":\"Multiplier used for calculating gov reward\"},\"poolDepositorRewardMintMultiplier(address)\":{\"notice\":\"The multiplier applied when minting MPH for a pool's depositor reward. Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter!\"},\"poolFunderRewardMultiplier(address)\":{\"notice\":\"The multiplier applied when minting MPH for a pool's funder reward. v2 usage: Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter! v3 usage: Unit is MPH-wei per depositToken-wei. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter!\"},\"poolFunderRewardVestPeriod(address)\":{\"notice\":\"v2 usage: The period over which the funder reward will be vested, in seconds.\"},\"setPoolDepositorRewardMintMultiplier(address,uint256)\":{\"notice\":\"Param setters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/models/issuance/MPHIssuanceModel02.sol\":\"MPHIssuanceModel02\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"contracts/libs/DecMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\n// Decimal math library\\nlibrary DecMath {\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    function decmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / PRECISION;\\n    }\\n\\n    function decdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * PRECISION) / b;\\n    }\\n}\\n\",\"keccak256\":\"0x830cccda720ec3797259ec651073e91c889e7e3aeec81e034c793ca9d106eb8b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/models/issuance/IMPHIssuanceModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\ninterface IMPHIssuanceModel {\\n    /**\\n        v2 legacy functions\\n     */\\n    /**\\n        @notice Computes the MPH amount to reward to a depositor upon deposit.\\n        @param  pool The DInterest pool trying to mint reward\\n        @param  depositAmount The deposit amount in the pool's stablecoins\\n        @param  depositPeriodInSeconds The deposit's lock period in seconds\\n        @return depositorReward The MPH amount to mint to the depositor\\n                devReward The MPH amount to mint to the dev wallet\\n                govReward The MPH amount to mint to the gov treasury\\n     */\\n    function computeDepositorReward(\\n        address pool,\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 depositorReward,\\n            uint256 devReward,\\n            uint256 govReward\\n        );\\n\\n    /**\\n        @notice Computes the MPH amount to take back from a depositor upon withdrawal.\\n                If takeBackAmount > devReward + govReward, the extra MPH should be burnt.\\n        @param  mintMPHAmount The MPH amount originally minted to the depositor as reward\\n        @param  early True if the deposit is withdrawn early, false if the deposit is mature\\n        @return takeBackAmount The MPH amount to take back from the depositor\\n                devReward The MPH amount from takeBackAmount to send to the dev wallet\\n                govReward The MPH amount from takeBackAmount to send to the gov treasury\\n     */\\n    function computeTakeBackDepositorRewardAmount(\\n        uint256 mintMPHAmount,\\n        bool early\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 takeBackAmount,\\n            uint256 devReward,\\n            uint256 govReward\\n        );\\n\\n    /**\\n        @notice Computes the MPH amount to reward to a deficit funder upon withdrawal of an underlying deposit.\\n        @param  pool The DInterest pool trying to mint reward\\n        @param  depositAmount The deposit amount in the pool's stablecoins\\n        @param  fundingCreationTimestamp The timestamp of the funding's creation, in seconds\\n        @param  maturationTimestamp The maturation timestamp of the deposit, in seconds\\n        @param  early True if the deposit is withdrawn early, false if the deposit is mature\\n        @return funderReward The MPH amount to mint to the funder\\n                devReward The MPH amount to mint to the dev wallet\\n                govReward The MPH amount to mint to the gov treasury\\n     */\\n    function computeFunderReward(\\n        address pool,\\n        uint256 depositAmount,\\n        uint256 fundingCreationTimestamp,\\n        uint64 maturationTimestamp,\\n        bool early\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 funderReward,\\n            uint256 devReward,\\n            uint256 govReward\\n        );\\n\\n    /**\\n        @notice The period over which the funder reward will be vested, in seconds.\\n     */\\n    function poolFunderRewardVestPeriod(address pool)\\n        external\\n        view\\n        returns (uint256 vestPeriodInSeconds);\\n\\n    /**\\n        v3 functions\\n     */\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's depositor reward.\\n                Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    function poolDepositorRewardMintMultiplier(address pool)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's funder reward.\\n                v2 usage:\\n                Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n                v3 usage:\\n                Unit is MPH-wei per depositToken-wei. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    function poolFunderRewardMultiplier(address pool)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x48fc3f18dd5bd813e795b22af71a6cafd69970526573c60fb441b52c00847eab\",\"license\":\"GPL-3.0-or-later\"},\"contracts/models/issuance/MPHIssuanceModel02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.3;\\n\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    AddressUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {DecMath} from \\\"../../libs/DecMath.sol\\\";\\nimport {IMPHIssuanceModel} from \\\"./IMPHIssuanceModel.sol\\\";\\n\\ncontract MPHIssuanceModel02 is OwnableUpgradeable, IMPHIssuanceModel {\\n    using AddressUpgradeable for address;\\n    using DecMath for uint256;\\n\\n    uint256 internal constant PRECISION = 10**18;\\n\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's depositor reward.\\n                Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    mapping(address => uint256)\\n        public\\n        override poolDepositorRewardMintMultiplier;\\n    /**\\n        @notice The multiplier applied when minting MPH for a pool's funder reward.\\n                v2 usage:\\n                Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n                v3 usage:\\n                Unit is MPH-wei per depositToken-wei. (wei here is the smallest decimal place)\\n                Scaled by 10^18.\\n                NOTE: The depositToken's decimals matter!\\n     */\\n    mapping(address => uint256) public override poolFunderRewardMultiplier;\\n    /**\\n        @notice v2 usage:\\n                The period over which the funder reward will be vested, in seconds.\\n     */\\n    mapping(address => uint256) public override poolFunderRewardVestPeriod;\\n\\n    /**\\n        @notice Multiplier used for calculating dev reward\\n     */\\n    uint256 public devRewardMultiplier;\\n    /**\\n        @notice Multiplier used for calculating gov reward\\n     */\\n    uint256 public govRewardMultiplier;\\n\\n    event ESetParamAddress(\\n        address indexed sender,\\n        string indexed paramName,\\n        address newValue\\n    );\\n    event ESetParamUint(\\n        address indexed sender,\\n        string indexed paramName,\\n        address indexed pool,\\n        uint256 newValue\\n    );\\n\\n    function __MPHIssuanceModel02_init(\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) internal initializer {\\n        __Ownable_init();\\n        __MPHIssuanceModel02_init_unchained(\\n            _devRewardMultiplier,\\n            _govRewardMultiplier\\n        );\\n    }\\n\\n    function __MPHIssuanceModel02_init_unchained(\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) internal initializer {\\n        devRewardMultiplier = _devRewardMultiplier;\\n        govRewardMultiplier = _govRewardMultiplier;\\n    }\\n\\n    function initialize(\\n        uint256 _devRewardMultiplier,\\n        uint256 _govRewardMultiplier\\n    ) external initializer {\\n        __MPHIssuanceModel02_init(_devRewardMultiplier, _govRewardMultiplier);\\n    }\\n\\n    /**\\n        v2 legacy functions\\n     */\\n    /**\\n        @notice Computes the MPH amount to reward to a depositor upon deposit.\\n        @param  pool The DInterest pool trying to mint reward\\n        @param  depositAmount The deposit amount in the pool's stablecoins\\n        @param  depositPeriodInSeconds The deposit's lock period in seconds\\n        @return depositorReward The MPH amount to mint to the depositor\\n                devReward The MPH amount to mint to the dev wallet\\n                govReward The MPH amount to mint to the gov treasury\\n     */\\n    function computeDepositorReward(\\n        address pool,\\n        uint256 depositAmount,\\n        uint256 depositPeriodInSeconds\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 depositorReward,\\n            uint256 devReward,\\n            uint256 govReward\\n        )\\n    {\\n        uint256 mintAmount =\\n            (depositAmount * depositPeriodInSeconds).decmul(\\n                poolDepositorRewardMintMultiplier[pool]\\n            );\\n        depositorReward = mintAmount;\\n        devReward = mintAmount.decmul(devRewardMultiplier);\\n        govReward = mintAmount.decmul(govRewardMultiplier);\\n    }\\n\\n    /**\\n        @notice Computes the MPH amount to take back from a depositor upon withdrawal.\\n                If takeBackAmount > devReward + govReward, the extra MPH should be burnt.\\n        @param  mintMPHAmount The MPH amount originally minted to the depositor as reward\\n        @param  early True if the deposit is withdrawn early, false if the deposit is mature\\n        @return takeBackAmount The MPH amount to take back from the depositor\\n                devReward The MPH amount from takeBackAmount to send to the dev wallet\\n                govReward The MPH amount from takeBackAmount to send to the gov treasury\\n     */\\n    function computeTakeBackDepositorRewardAmount(\\n        uint256 mintMPHAmount,\\n        bool early\\n    )\\n        external\\n        pure\\n        override\\n        returns (\\n            uint256 takeBackAmount,\\n            uint256 devReward,\\n            uint256 govReward\\n        )\\n    {\\n        takeBackAmount = early ? mintMPHAmount : 0;\\n        devReward = 0;\\n        govReward = 0;\\n    }\\n\\n    /**\\n        @notice Computes the MPH amount to reward to a deficit funder upon withdrawal of an underlying deposit.\\n        @param  pool The DInterest pool trying to mint reward\\n        @param  depositAmount The deposit amount in the pool's stablecoins\\n        @param  fundingCreationTimestamp The timestamp of the funding's creation, in seconds\\n        @param  maturationTimestamp The maturation timestamp of the deposit, in seconds\\n        @param  early True if the deposit is withdrawn early, false if the deposit is mature\\n        @return funderReward The MPH amount to mint to the funder\\n                devReward The MPH amount to mint to the dev wallet\\n                govReward The MPH amount to mint to the gov treasury\\n     */\\n    function computeFunderReward(\\n        address pool,\\n        uint256 depositAmount,\\n        uint256 fundingCreationTimestamp,\\n        uint64 maturationTimestamp,\\n        bool early\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 funderReward,\\n            uint256 devReward,\\n            uint256 govReward\\n        )\\n    {\\n        if (early) {\\n            return (0, 0, 0);\\n        }\\n        funderReward = maturationTimestamp > fundingCreationTimestamp\\n            ? (depositAmount * (maturationTimestamp - fundingCreationTimestamp))\\n                .decmul(poolFunderRewardMultiplier[pool])\\n            : 0;\\n        devReward = funderReward.decmul(devRewardMultiplier);\\n        govReward = funderReward.decmul(govRewardMultiplier);\\n    }\\n\\n    /**\\n        Param setters\\n     */\\n\\n    function setPoolDepositorRewardMintMultiplier(\\n        address pool,\\n        uint256 newMultiplier\\n    ) external onlyOwner {\\n        require(pool.isContract(), \\\"MPHIssuanceModel: pool not contract\\\");\\n        poolDepositorRewardMintMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolDepositorRewardMintMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n\\n    function setPoolFunderRewardMultiplier(address pool, uint256 newMultiplier)\\n        external\\n        onlyOwner\\n    {\\n        require(pool.isContract(), \\\"MPHIssuanceModel: pool not contract\\\");\\n        poolFunderRewardMultiplier[pool] = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolFunderRewardMultiplier\\\",\\n            pool,\\n            newMultiplier\\n        );\\n    }\\n\\n    function setPoolFunderRewardVestPeriod(\\n        address pool,\\n        uint256 newVestPeriodInSeconds\\n    ) external onlyOwner {\\n        require(pool.isContract(), \\\"MPHIssuanceModel: pool not contract\\\");\\n        poolFunderRewardVestPeriod[pool] = newVestPeriodInSeconds;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"poolFunderRewardVestPeriod\\\",\\n            pool,\\n            newVestPeriodInSeconds\\n        );\\n    }\\n\\n    function setDevRewardMultiplier(uint256 newMultiplier) external onlyOwner {\\n        require(\\n            newMultiplier <= PRECISION,\\n            \\\"MPHIssuanceModel: invalid multiplier\\\"\\n        );\\n        devRewardMultiplier = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"devRewardMultiplier\\\",\\n            address(0),\\n            newMultiplier\\n        );\\n    }\\n\\n    function setGovRewardMultiplier(uint256 newMultiplier) external onlyOwner {\\n        require(\\n            newMultiplier <= PRECISION,\\n            \\\"MPHIssuanceModel: invalid multiplier\\\"\\n        );\\n        govRewardMultiplier = newMultiplier;\\n        emit ESetParamUint(\\n            msg.sender,\\n            \\\"govRewardMultiplier\\\",\\n            address(0),\\n            newMultiplier\\n        );\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x51f420b71b7337fbca429bd03a73e97d45f0068bdf7da8dc0840d75f59727d2e\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ec2806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063c2cdb788116100a2578063e296651e11610071578063e296651e14610231578063e4a301161461023a578063f2fde38b1461024d578063f3eaeb2f14610260578063f422eb91146102805761010b565b8063c2cdb788146101e5578063d2a974db146101f8578063db4ae18c1461020b578063dce7d0341461021e5761010b565b80638da5cb5b116100de5780638da5cb5b1461016957806390e0414014610184578063a4a6b0c3146101b2578063bff5806b146101d25761010b565b8063022cff8c146101105780631425d49f14610143578063715018a61461014c5780637675d49014610156575b600080fd5b61013061011e366004610bd9565b60666020526000908152604090205481565b6040519081526020015b60405180910390f35b61013060685481565b610154610293565b005b610154610164366004610bf3565b610310565b6033546040516001600160a01b03909116815260200161013a565b610197610192366004610cca565b6103ed565b6040805193845260208401929092529082015260600161013a565b6101306101c0366004610bd9565b60656020526000908152604090205481565b6101546101e0366004610bf3565b61040e565b6101546101f3366004610cb2565b6104af565b610197610206366004610c1c565b610568565b610154610219366004610bf3565b6105d8565b61015461022c366004610cb2565b610685565b61013060695481565b610154610248366004610cf5565b610703565b61015461025b366004610bd9565b61077b565b61013061026e366004610bd9565b60676020526000908152604090205481565b61019761028e366004610c4e565b610866565b6033546001600160a01b031633146102c65760405162461bcd60e51b81526004016102bd90610da7565b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b0316331461033a5760405162461bcd60e51b81526004016102bd90610da7565b61034c826001600160a01b031661090e565b6103685760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526066602052604090819020839055517f706f6f6c46756e6465725265776172644d756c7469706c6965720000000000008152601a015b6040519081900381208382529033907fd67ee305223ec33d9a5765a1fb6ca68e970700f8ecbd44f2064ae021661431729060200160405180910390a45050565b6000806000836103fe576000610400565b845b956000955085945092505050565b6033546001600160a01b031633146104385760405162461bcd60e51b81526004016102bd90610da7565b61044a826001600160a01b031661090e565b6104665760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526067602052604090819020839055517f706f6f6c46756e64657252657761726456657374506572696f640000000000008152601a016103ad565b6033546001600160a01b031633146104d95760405162461bcd60e51b81526004016102bd90610da7565b670de0b6b3a76400008111156105015760405162461bcd60e51b81526004016102bd90610ddc565b60698190556040517233b7bb2932bbb0b93226bab63a34b83634b2b960691b81526000906013015b6040519081900381208382529033907fd67ee305223ec33d9a5765a1fb6ca68e970700f8ecbd44f2064ae021661431729060200160405180910390a450565b6001600160a01b03831660009081526065602052604081205481908190819061059b906105958789610e40565b90610918565b90508093506105b56068548261091890919063ffffffff16565b92506105cc6069548261091890919063ffffffff16565b91505093509350939050565b6033546001600160a01b031633146106025760405162461bcd60e51b81526004016102bd90610da7565b610614826001600160a01b031661090e565b6106305760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526065602052604090819020839055516103ad907f706f6f6c4465706f7369746f725265776172644d696e744d756c7469706c69658152603960f91b602082015260210190565b6033546001600160a01b031633146106af5760405162461bcd60e51b81526004016102bd90610da7565b670de0b6b3a76400008111156106d75760405162461bcd60e51b81526004016102bd90610ddc565b6068819055604051723232bb2932bbb0b93226bab63a34b83634b2b960691b8152600090601301610529565b600054610100900460ff168061071c575060005460ff16155b6107385760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff1615801561075a576000805461ffff19166101011790555b610764838361093e565b8015610776576000805461ff00191690555b505050565b6033546001600160a01b031633146107a55760405162461bcd60e51b81526004016102bd90610da7565b6001600160a01b03811661080a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000831561087f57506000915081905080610903565b858567ffffffffffffffff16116108975760006108d2565b6001600160a01b0388166000908152606660205260409020546108d2906108c88867ffffffffffffffff8916610e5f565b610595908a610e40565b92506108e96068548461091890919063ffffffff16565b91506109006069548461091890919063ffffffff16565b90505b955095509592505050565b803b15155b919050565b6000670de0b6b3a764000061092d8385610e40565b6109379190610e20565b9392505050565b600054610100900460ff1680610957575060005460ff16155b6109735760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610995576000805461ffff19166101011790555b61099d6109a7565b6107648383610a23565b600054610100900460ff16806109c0575060005460ff16155b6109dc5760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff161580156109fe576000805461ffff19166101011790555b610a06610a9a565b610a0e610b04565b8015610a20576000805461ff00191690555b50565b600054610100900460ff1680610a3c575060005460ff16155b610a585760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610a7a576000805461ffff19166101011790555b606883905560698290558015610776576000805461ff0019169055505050565b600054610100900460ff1680610ab3575060005460ff16155b610acf5760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610a0e576000805461ffff19166101011790558015610a20576000805461ff001916905550565b600054610100900460ff1680610b1d575060005460ff16155b610b395760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610b5b576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a20576000805461ff001916905550565b80356001600160a01b038116811461091357600080fd5b8035801515811461091357600080fd5b600060208284031215610bea578081fd5b61093782610bb2565b60008060408385031215610c05578081fd5b610c0e83610bb2565b946020939093013593505050565b600080600060608486031215610c30578081fd5b610c3984610bb2565b95602085013595506040909401359392505050565b600080600080600060a08688031215610c65578081fd5b610c6e86610bb2565b94506020860135935060408601359250606086013567ffffffffffffffff81168114610c98578182fd5b9150610ca660808701610bc9565b90509295509295909350565b600060208284031215610cc3578081fd5b5035919050565b60008060408385031215610cdc578182fd5b82359150610cec60208401610bc9565b90509250929050565b60008060408385031215610d07578182fd5b50508035926020909101359150565b60208082526023908201527f4d504849737375616e63654d6f64656c3a20706f6f6c206e6f7420636f6e74726040820152621858dd60ea1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4d504849737375616e63654d6f64656c3a20696e76616c6964206d756c7469706040820152633634b2b960e11b606082015260800190565b600082610e3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610e5a57610e5a610e76565b500290565b600082821015610e7157610e71610e76565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122068e1a45ebac8d901b6d19485f058b1f8b132a51ff55fddda848744b6841fcc9c64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063c2cdb788116100a2578063e296651e11610071578063e296651e14610231578063e4a301161461023a578063f2fde38b1461024d578063f3eaeb2f14610260578063f422eb91146102805761010b565b8063c2cdb788146101e5578063d2a974db146101f8578063db4ae18c1461020b578063dce7d0341461021e5761010b565b80638da5cb5b116100de5780638da5cb5b1461016957806390e0414014610184578063a4a6b0c3146101b2578063bff5806b146101d25761010b565b8063022cff8c146101105780631425d49f14610143578063715018a61461014c5780637675d49014610156575b600080fd5b61013061011e366004610bd9565b60666020526000908152604090205481565b6040519081526020015b60405180910390f35b61013060685481565b610154610293565b005b610154610164366004610bf3565b610310565b6033546040516001600160a01b03909116815260200161013a565b610197610192366004610cca565b6103ed565b6040805193845260208401929092529082015260600161013a565b6101306101c0366004610bd9565b60656020526000908152604090205481565b6101546101e0366004610bf3565b61040e565b6101546101f3366004610cb2565b6104af565b610197610206366004610c1c565b610568565b610154610219366004610bf3565b6105d8565b61015461022c366004610cb2565b610685565b61013060695481565b610154610248366004610cf5565b610703565b61015461025b366004610bd9565b61077b565b61013061026e366004610bd9565b60676020526000908152604090205481565b61019761028e366004610c4e565b610866565b6033546001600160a01b031633146102c65760405162461bcd60e51b81526004016102bd90610da7565b60405180910390fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b0316331461033a5760405162461bcd60e51b81526004016102bd90610da7565b61034c826001600160a01b031661090e565b6103685760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526066602052604090819020839055517f706f6f6c46756e6465725265776172644d756c7469706c6965720000000000008152601a015b6040519081900381208382529033907fd67ee305223ec33d9a5765a1fb6ca68e970700f8ecbd44f2064ae021661431729060200160405180910390a45050565b6000806000836103fe576000610400565b845b956000955085945092505050565b6033546001600160a01b031633146104385760405162461bcd60e51b81526004016102bd90610da7565b61044a826001600160a01b031661090e565b6104665760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526067602052604090819020839055517f706f6f6c46756e64657252657761726456657374506572696f640000000000008152601a016103ad565b6033546001600160a01b031633146104d95760405162461bcd60e51b81526004016102bd90610da7565b670de0b6b3a76400008111156105015760405162461bcd60e51b81526004016102bd90610ddc565b60698190556040517233b7bb2932bbb0b93226bab63a34b83634b2b960691b81526000906013015b6040519081900381208382529033907fd67ee305223ec33d9a5765a1fb6ca68e970700f8ecbd44f2064ae021661431729060200160405180910390a450565b6001600160a01b03831660009081526065602052604081205481908190819061059b906105958789610e40565b90610918565b90508093506105b56068548261091890919063ffffffff16565b92506105cc6069548261091890919063ffffffff16565b91505093509350939050565b6033546001600160a01b031633146106025760405162461bcd60e51b81526004016102bd90610da7565b610614826001600160a01b031661090e565b6106305760405162461bcd60e51b81526004016102bd90610d16565b6001600160a01b03821660008181526065602052604090819020839055516103ad907f706f6f6c4465706f7369746f725265776172644d696e744d756c7469706c69658152603960f91b602082015260210190565b6033546001600160a01b031633146106af5760405162461bcd60e51b81526004016102bd90610da7565b670de0b6b3a76400008111156106d75760405162461bcd60e51b81526004016102bd90610ddc565b6068819055604051723232bb2932bbb0b93226bab63a34b83634b2b960691b8152600090601301610529565b600054610100900460ff168061071c575060005460ff16155b6107385760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff1615801561075a576000805461ffff19166101011790555b610764838361093e565b8015610776576000805461ff00191690555b505050565b6033546001600160a01b031633146107a55760405162461bcd60e51b81526004016102bd90610da7565b6001600160a01b03811661080a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bd565b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000831561087f57506000915081905080610903565b858567ffffffffffffffff16116108975760006108d2565b6001600160a01b0388166000908152606660205260409020546108d2906108c88867ffffffffffffffff8916610e5f565b610595908a610e40565b92506108e96068548461091890919063ffffffff16565b91506109006069548461091890919063ffffffff16565b90505b955095509592505050565b803b15155b919050565b6000670de0b6b3a764000061092d8385610e40565b6109379190610e20565b9392505050565b600054610100900460ff1680610957575060005460ff16155b6109735760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610995576000805461ffff19166101011790555b61099d6109a7565b6107648383610a23565b600054610100900460ff16806109c0575060005460ff16155b6109dc5760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff161580156109fe576000805461ffff19166101011790555b610a06610a9a565b610a0e610b04565b8015610a20576000805461ff00191690555b50565b600054610100900460ff1680610a3c575060005460ff16155b610a585760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610a7a576000805461ffff19166101011790555b606883905560698290558015610776576000805461ff0019169055505050565b600054610100900460ff1680610ab3575060005460ff16155b610acf5760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610a0e576000805461ffff19166101011790558015610a20576000805461ff001916905550565b600054610100900460ff1680610b1d575060005460ff16155b610b395760405162461bcd60e51b81526004016102bd90610d59565b600054610100900460ff16158015610b5b576000805461ffff19166101011790555b603380546001600160a01b0319163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a20576000805461ff001916905550565b80356001600160a01b038116811461091357600080fd5b8035801515811461091357600080fd5b600060208284031215610bea578081fd5b61093782610bb2565b60008060408385031215610c05578081fd5b610c0e83610bb2565b946020939093013593505050565b600080600060608486031215610c30578081fd5b610c3984610bb2565b95602085013595506040909401359392505050565b600080600080600060a08688031215610c65578081fd5b610c6e86610bb2565b94506020860135935060408601359250606086013567ffffffffffffffff81168114610c98578182fd5b9150610ca660808701610bc9565b90509295509295909350565b600060208284031215610cc3578081fd5b5035919050565b60008060408385031215610cdc578182fd5b82359150610cec60208401610bc9565b90509250929050565b60008060408385031215610d07578182fd5b50508035926020909101359150565b60208082526023908201527f4d504849737375616e63654d6f64656c3a20706f6f6c206e6f7420636f6e74726040820152621858dd60ea1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526024908201527f4d504849737375616e63654d6f64656c3a20696e76616c6964206d756c7469706040820152633634b2b960e11b606082015260800190565b600082610e3b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610e5a57610e5a610e76565b500290565b600082821015610e7157610e71610e76565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122068e1a45ebac8d901b6d19485f058b1f8b132a51ff55fddda848744b6841fcc9c64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeDepositorReward(address,uint256,uint256)": {
        "params": {
          "depositAmount": "The deposit amount in the pool's stablecoins",
          "depositPeriodInSeconds": "The deposit's lock period in seconds",
          "pool": "The DInterest pool trying to mint reward"
        },
        "returns": {
          "depositorReward": "The MPH amount to mint to the depositor devReward The MPH amount to mint to the dev wallet govReward The MPH amount to mint to the gov treasury"
        }
      },
      "computeFunderReward(address,uint256,uint256,uint64,bool)": {
        "params": {
          "depositAmount": "The deposit amount in the pool's stablecoins",
          "early": "True if the deposit is withdrawn early, false if the deposit is mature",
          "fundingCreationTimestamp": "The timestamp of the funding's creation, in seconds",
          "maturationTimestamp": "The maturation timestamp of the deposit, in seconds",
          "pool": "The DInterest pool trying to mint reward"
        },
        "returns": {
          "funderReward": "The MPH amount to mint to the funder devReward The MPH amount to mint to the dev wallet govReward The MPH amount to mint to the gov treasury"
        }
      },
      "computeTakeBackDepositorRewardAmount(uint256,bool)": {
        "params": {
          "early": "True if the deposit is withdrawn early, false if the deposit is mature",
          "mintMPHAmount": "The MPH amount originally minted to the depositor as reward"
        },
        "returns": {
          "takeBackAmount": "The MPH amount to take back from the depositor devReward The MPH amount from takeBackAmount to send to the dev wallet govReward The MPH amount from takeBackAmount to send to the gov treasury"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeDepositorReward(address,uint256,uint256)": {
        "notice": "Computes the MPH amount to reward to a depositor upon deposit."
      },
      "computeFunderReward(address,uint256,uint256,uint64,bool)": {
        "notice": "Computes the MPH amount to reward to a deficit funder upon withdrawal of an underlying deposit."
      },
      "computeTakeBackDepositorRewardAmount(uint256,bool)": {
        "notice": "Computes the MPH amount to take back from a depositor upon withdrawal. If takeBackAmount > devReward + govReward, the extra MPH should be burnt."
      },
      "devRewardMultiplier()": {
        "notice": "Multiplier used for calculating dev reward"
      },
      "govRewardMultiplier()": {
        "notice": "Multiplier used for calculating gov reward"
      },
      "poolDepositorRewardMintMultiplier(address)": {
        "notice": "The multiplier applied when minting MPH for a pool's depositor reward. Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter!"
      },
      "poolFunderRewardMultiplier(address)": {
        "notice": "The multiplier applied when minting MPH for a pool's funder reward. v2 usage: Unit is MPH-wei per depositToken-wei per second. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter! v3 usage: Unit is MPH-wei per depositToken-wei. (wei here is the smallest decimal place) Scaled by 10^18. NOTE: The depositToken's decimals matter!"
      },
      "poolFunderRewardVestPeriod(address)": {
        "notice": "v2 usage: The period over which the funder reward will be vested, in seconds."
      },
      "setPoolDepositorRewardMintMultiplier(address,uint256)": {
        "notice": "Param setters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 612,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 615,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3064,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 406,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 525,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16370,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "poolDepositorRewardMintMultiplier",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16376,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "poolFunderRewardMultiplier",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16382,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "poolFunderRewardVestPeriod",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16385,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "devRewardMultiplier",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 16388,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "govRewardMultiplier",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 16758,
        "contract": "contracts/models/issuance/MPHIssuanceModel02.sol:MPHIssuanceModel02",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
